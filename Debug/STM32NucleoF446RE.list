
STM32NucleoF446RE.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004ebc  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000d0  0800508c  0800508c  0001508c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800515c  0800515c  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  0800515c  0800515c  0001515c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005164  08005164  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005164  08005164  00015164  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005168  08005168  00015168  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  0800516c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000144  20000070  080051dc  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200001b4  080051dc  000201b4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000a37a  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001bcd  00000000  00000000  0002a41a  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000008c8  00000000  00000000  0002bfe8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000007e0  00000000  00000000  0002c8b0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000226b0  00000000  00000000  0002d090  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00007db1  00000000  00000000  0004f740  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000cd59c  00000000  00000000  000574f1  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00124a8d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002acc  00000000  00000000  00124b08  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000070 	.word	0x20000070
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08005074 	.word	0x08005074

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000074 	.word	0x20000074
 800020c:	08005074 	.word	0x08005074

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_drsub>:
 80002b0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002b4:	e002      	b.n	80002bc <__adddf3>
 80002b6:	bf00      	nop

080002b8 <__aeabi_dsub>:
 80002b8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002bc <__adddf3>:
 80002bc:	b530      	push	{r4, r5, lr}
 80002be:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002c2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002c6:	ea94 0f05 	teq	r4, r5
 80002ca:	bf08      	it	eq
 80002cc:	ea90 0f02 	teqeq	r0, r2
 80002d0:	bf1f      	itttt	ne
 80002d2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002d6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002da:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002de:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002e2:	f000 80e2 	beq.w	80004aa <__adddf3+0x1ee>
 80002e6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ea:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ee:	bfb8      	it	lt
 80002f0:	426d      	neglt	r5, r5
 80002f2:	dd0c      	ble.n	800030e <__adddf3+0x52>
 80002f4:	442c      	add	r4, r5
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	ea82 0000 	eor.w	r0, r2, r0
 8000302:	ea83 0101 	eor.w	r1, r3, r1
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	2d36      	cmp	r5, #54	; 0x36
 8000310:	bf88      	it	hi
 8000312:	bd30      	pophi	{r4, r5, pc}
 8000314:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000318:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800031c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000320:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000324:	d002      	beq.n	800032c <__adddf3+0x70>
 8000326:	4240      	negs	r0, r0
 8000328:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800032c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000330:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000334:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000338:	d002      	beq.n	8000340 <__adddf3+0x84>
 800033a:	4252      	negs	r2, r2
 800033c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000340:	ea94 0f05 	teq	r4, r5
 8000344:	f000 80a7 	beq.w	8000496 <__adddf3+0x1da>
 8000348:	f1a4 0401 	sub.w	r4, r4, #1
 800034c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000350:	db0d      	blt.n	800036e <__adddf3+0xb2>
 8000352:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000356:	fa22 f205 	lsr.w	r2, r2, r5
 800035a:	1880      	adds	r0, r0, r2
 800035c:	f141 0100 	adc.w	r1, r1, #0
 8000360:	fa03 f20e 	lsl.w	r2, r3, lr
 8000364:	1880      	adds	r0, r0, r2
 8000366:	fa43 f305 	asr.w	r3, r3, r5
 800036a:	4159      	adcs	r1, r3
 800036c:	e00e      	b.n	800038c <__adddf3+0xd0>
 800036e:	f1a5 0520 	sub.w	r5, r5, #32
 8000372:	f10e 0e20 	add.w	lr, lr, #32
 8000376:	2a01      	cmp	r2, #1
 8000378:	fa03 fc0e 	lsl.w	ip, r3, lr
 800037c:	bf28      	it	cs
 800037e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000382:	fa43 f305 	asr.w	r3, r3, r5
 8000386:	18c0      	adds	r0, r0, r3
 8000388:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800038c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000390:	d507      	bpl.n	80003a2 <__adddf3+0xe6>
 8000392:	f04f 0e00 	mov.w	lr, #0
 8000396:	f1dc 0c00 	rsbs	ip, ip, #0
 800039a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800039e:	eb6e 0101 	sbc.w	r1, lr, r1
 80003a2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003a6:	d31b      	bcc.n	80003e0 <__adddf3+0x124>
 80003a8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003ac:	d30c      	bcc.n	80003c8 <__adddf3+0x10c>
 80003ae:	0849      	lsrs	r1, r1, #1
 80003b0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003b4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003b8:	f104 0401 	add.w	r4, r4, #1
 80003bc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003c0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003c4:	f080 809a 	bcs.w	80004fc <__adddf3+0x240>
 80003c8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003cc:	bf08      	it	eq
 80003ce:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003d2:	f150 0000 	adcs.w	r0, r0, #0
 80003d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003da:	ea41 0105 	orr.w	r1, r1, r5
 80003de:	bd30      	pop	{r4, r5, pc}
 80003e0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003e4:	4140      	adcs	r0, r0
 80003e6:	eb41 0101 	adc.w	r1, r1, r1
 80003ea:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003ee:	f1a4 0401 	sub.w	r4, r4, #1
 80003f2:	d1e9      	bne.n	80003c8 <__adddf3+0x10c>
 80003f4:	f091 0f00 	teq	r1, #0
 80003f8:	bf04      	itt	eq
 80003fa:	4601      	moveq	r1, r0
 80003fc:	2000      	moveq	r0, #0
 80003fe:	fab1 f381 	clz	r3, r1
 8000402:	bf08      	it	eq
 8000404:	3320      	addeq	r3, #32
 8000406:	f1a3 030b 	sub.w	r3, r3, #11
 800040a:	f1b3 0220 	subs.w	r2, r3, #32
 800040e:	da0c      	bge.n	800042a <__adddf3+0x16e>
 8000410:	320c      	adds	r2, #12
 8000412:	dd08      	ble.n	8000426 <__adddf3+0x16a>
 8000414:	f102 0c14 	add.w	ip, r2, #20
 8000418:	f1c2 020c 	rsb	r2, r2, #12
 800041c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000420:	fa21 f102 	lsr.w	r1, r1, r2
 8000424:	e00c      	b.n	8000440 <__adddf3+0x184>
 8000426:	f102 0214 	add.w	r2, r2, #20
 800042a:	bfd8      	it	le
 800042c:	f1c2 0c20 	rsble	ip, r2, #32
 8000430:	fa01 f102 	lsl.w	r1, r1, r2
 8000434:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000438:	bfdc      	itt	le
 800043a:	ea41 010c 	orrle.w	r1, r1, ip
 800043e:	4090      	lslle	r0, r2
 8000440:	1ae4      	subs	r4, r4, r3
 8000442:	bfa2      	ittt	ge
 8000444:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000448:	4329      	orrge	r1, r5
 800044a:	bd30      	popge	{r4, r5, pc}
 800044c:	ea6f 0404 	mvn.w	r4, r4
 8000450:	3c1f      	subs	r4, #31
 8000452:	da1c      	bge.n	800048e <__adddf3+0x1d2>
 8000454:	340c      	adds	r4, #12
 8000456:	dc0e      	bgt.n	8000476 <__adddf3+0x1ba>
 8000458:	f104 0414 	add.w	r4, r4, #20
 800045c:	f1c4 0220 	rsb	r2, r4, #32
 8000460:	fa20 f004 	lsr.w	r0, r0, r4
 8000464:	fa01 f302 	lsl.w	r3, r1, r2
 8000468:	ea40 0003 	orr.w	r0, r0, r3
 800046c:	fa21 f304 	lsr.w	r3, r1, r4
 8000470:	ea45 0103 	orr.w	r1, r5, r3
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f1c4 040c 	rsb	r4, r4, #12
 800047a:	f1c4 0220 	rsb	r2, r4, #32
 800047e:	fa20 f002 	lsr.w	r0, r0, r2
 8000482:	fa01 f304 	lsl.w	r3, r1, r4
 8000486:	ea40 0003 	orr.w	r0, r0, r3
 800048a:	4629      	mov	r1, r5
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	fa21 f004 	lsr.w	r0, r1, r4
 8000492:	4629      	mov	r1, r5
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f094 0f00 	teq	r4, #0
 800049a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800049e:	bf06      	itte	eq
 80004a0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004a4:	3401      	addeq	r4, #1
 80004a6:	3d01      	subne	r5, #1
 80004a8:	e74e      	b.n	8000348 <__adddf3+0x8c>
 80004aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ae:	bf18      	it	ne
 80004b0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004b4:	d029      	beq.n	800050a <__adddf3+0x24e>
 80004b6:	ea94 0f05 	teq	r4, r5
 80004ba:	bf08      	it	eq
 80004bc:	ea90 0f02 	teqeq	r0, r2
 80004c0:	d005      	beq.n	80004ce <__adddf3+0x212>
 80004c2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004c6:	bf04      	itt	eq
 80004c8:	4619      	moveq	r1, r3
 80004ca:	4610      	moveq	r0, r2
 80004cc:	bd30      	pop	{r4, r5, pc}
 80004ce:	ea91 0f03 	teq	r1, r3
 80004d2:	bf1e      	ittt	ne
 80004d4:	2100      	movne	r1, #0
 80004d6:	2000      	movne	r0, #0
 80004d8:	bd30      	popne	{r4, r5, pc}
 80004da:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004de:	d105      	bne.n	80004ec <__adddf3+0x230>
 80004e0:	0040      	lsls	r0, r0, #1
 80004e2:	4149      	adcs	r1, r1
 80004e4:	bf28      	it	cs
 80004e6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ea:	bd30      	pop	{r4, r5, pc}
 80004ec:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004f0:	bf3c      	itt	cc
 80004f2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004f6:	bd30      	popcc	{r4, r5, pc}
 80004f8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004fc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000500:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000504:	f04f 0000 	mov.w	r0, #0
 8000508:	bd30      	pop	{r4, r5, pc}
 800050a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800050e:	bf1a      	itte	ne
 8000510:	4619      	movne	r1, r3
 8000512:	4610      	movne	r0, r2
 8000514:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000518:	bf1c      	itt	ne
 800051a:	460b      	movne	r3, r1
 800051c:	4602      	movne	r2, r0
 800051e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000522:	bf06      	itte	eq
 8000524:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000528:	ea91 0f03 	teqeq	r1, r3
 800052c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000530:	bd30      	pop	{r4, r5, pc}
 8000532:	bf00      	nop

08000534 <__aeabi_ui2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f04f 0500 	mov.w	r5, #0
 800054c:	f04f 0100 	mov.w	r1, #0
 8000550:	e750      	b.n	80003f4 <__adddf3+0x138>
 8000552:	bf00      	nop

08000554 <__aeabi_i2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000568:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800056c:	bf48      	it	mi
 800056e:	4240      	negmi	r0, r0
 8000570:	f04f 0100 	mov.w	r1, #0
 8000574:	e73e      	b.n	80003f4 <__adddf3+0x138>
 8000576:	bf00      	nop

08000578 <__aeabi_f2d>:
 8000578:	0042      	lsls	r2, r0, #1
 800057a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800057e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000582:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000586:	bf1f      	itttt	ne
 8000588:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800058c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000590:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000594:	4770      	bxne	lr
 8000596:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800059a:	bf08      	it	eq
 800059c:	4770      	bxeq	lr
 800059e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005a2:	bf04      	itt	eq
 80005a4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005a8:	4770      	bxeq	lr
 80005aa:	b530      	push	{r4, r5, lr}
 80005ac:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005b0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005b4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005b8:	e71c      	b.n	80003f4 <__adddf3+0x138>
 80005ba:	bf00      	nop

080005bc <__aeabi_ul2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f04f 0500 	mov.w	r5, #0
 80005ca:	e00a      	b.n	80005e2 <__aeabi_l2d+0x16>

080005cc <__aeabi_l2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005da:	d502      	bpl.n	80005e2 <__aeabi_l2d+0x16>
 80005dc:	4240      	negs	r0, r0
 80005de:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005e2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005e6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ea:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ee:	f43f aed8 	beq.w	80003a2 <__adddf3+0xe6>
 80005f2:	f04f 0203 	mov.w	r2, #3
 80005f6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005fa:	bf18      	it	ne
 80005fc:	3203      	addne	r2, #3
 80005fe:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000602:	bf18      	it	ne
 8000604:	3203      	addne	r2, #3
 8000606:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800060a:	f1c2 0320 	rsb	r3, r2, #32
 800060e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000612:	fa20 f002 	lsr.w	r0, r0, r2
 8000616:	fa01 fe03 	lsl.w	lr, r1, r3
 800061a:	ea40 000e 	orr.w	r0, r0, lr
 800061e:	fa21 f102 	lsr.w	r1, r1, r2
 8000622:	4414      	add	r4, r2
 8000624:	e6bd      	b.n	80003a2 <__adddf3+0xe6>
 8000626:	bf00      	nop

08000628 <__aeabi_dmul>:
 8000628:	b570      	push	{r4, r5, r6, lr}
 800062a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800062e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000632:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000636:	bf1d      	ittte	ne
 8000638:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800063c:	ea94 0f0c 	teqne	r4, ip
 8000640:	ea95 0f0c 	teqne	r5, ip
 8000644:	f000 f8de 	bleq	8000804 <__aeabi_dmul+0x1dc>
 8000648:	442c      	add	r4, r5
 800064a:	ea81 0603 	eor.w	r6, r1, r3
 800064e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000652:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000656:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800065a:	bf18      	it	ne
 800065c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000660:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000664:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000668:	d038      	beq.n	80006dc <__aeabi_dmul+0xb4>
 800066a:	fba0 ce02 	umull	ip, lr, r0, r2
 800066e:	f04f 0500 	mov.w	r5, #0
 8000672:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000676:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800067a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800067e:	f04f 0600 	mov.w	r6, #0
 8000682:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000686:	f09c 0f00 	teq	ip, #0
 800068a:	bf18      	it	ne
 800068c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000690:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000694:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000698:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800069c:	d204      	bcs.n	80006a8 <__aeabi_dmul+0x80>
 800069e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006a2:	416d      	adcs	r5, r5
 80006a4:	eb46 0606 	adc.w	r6, r6, r6
 80006a8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006ac:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006b0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006b4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006b8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006bc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006c0:	bf88      	it	hi
 80006c2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006c6:	d81e      	bhi.n	8000706 <__aeabi_dmul+0xde>
 80006c8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006cc:	bf08      	it	eq
 80006ce:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006d2:	f150 0000 	adcs.w	r0, r0, #0
 80006d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006e0:	ea46 0101 	orr.w	r1, r6, r1
 80006e4:	ea40 0002 	orr.w	r0, r0, r2
 80006e8:	ea81 0103 	eor.w	r1, r1, r3
 80006ec:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006f0:	bfc2      	ittt	gt
 80006f2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006f6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	popgt	{r4, r5, r6, pc}
 80006fc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000700:	f04f 0e00 	mov.w	lr, #0
 8000704:	3c01      	subs	r4, #1
 8000706:	f300 80ab 	bgt.w	8000860 <__aeabi_dmul+0x238>
 800070a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800070e:	bfde      	ittt	le
 8000710:	2000      	movle	r0, #0
 8000712:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000716:	bd70      	pople	{r4, r5, r6, pc}
 8000718:	f1c4 0400 	rsb	r4, r4, #0
 800071c:	3c20      	subs	r4, #32
 800071e:	da35      	bge.n	800078c <__aeabi_dmul+0x164>
 8000720:	340c      	adds	r4, #12
 8000722:	dc1b      	bgt.n	800075c <__aeabi_dmul+0x134>
 8000724:	f104 0414 	add.w	r4, r4, #20
 8000728:	f1c4 0520 	rsb	r5, r4, #32
 800072c:	fa00 f305 	lsl.w	r3, r0, r5
 8000730:	fa20 f004 	lsr.w	r0, r0, r4
 8000734:	fa01 f205 	lsl.w	r2, r1, r5
 8000738:	ea40 0002 	orr.w	r0, r0, r2
 800073c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000740:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000744:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000748:	fa21 f604 	lsr.w	r6, r1, r4
 800074c:	eb42 0106 	adc.w	r1, r2, r6
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 040c 	rsb	r4, r4, #12
 8000760:	f1c4 0520 	rsb	r5, r4, #32
 8000764:	fa00 f304 	lsl.w	r3, r0, r4
 8000768:	fa20 f005 	lsr.w	r0, r0, r5
 800076c:	fa01 f204 	lsl.w	r2, r1, r4
 8000770:	ea40 0002 	orr.w	r0, r0, r2
 8000774:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000778:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800077c:	f141 0100 	adc.w	r1, r1, #0
 8000780:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000784:	bf08      	it	eq
 8000786:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800078a:	bd70      	pop	{r4, r5, r6, pc}
 800078c:	f1c4 0520 	rsb	r5, r4, #32
 8000790:	fa00 f205 	lsl.w	r2, r0, r5
 8000794:	ea4e 0e02 	orr.w	lr, lr, r2
 8000798:	fa20 f304 	lsr.w	r3, r0, r4
 800079c:	fa01 f205 	lsl.w	r2, r1, r5
 80007a0:	ea43 0302 	orr.w	r3, r3, r2
 80007a4:	fa21 f004 	lsr.w	r0, r1, r4
 80007a8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007ac:	fa21 f204 	lsr.w	r2, r1, r4
 80007b0:	ea20 0002 	bic.w	r0, r0, r2
 80007b4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007bc:	bf08      	it	eq
 80007be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007c2:	bd70      	pop	{r4, r5, r6, pc}
 80007c4:	f094 0f00 	teq	r4, #0
 80007c8:	d10f      	bne.n	80007ea <__aeabi_dmul+0x1c2>
 80007ca:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ce:	0040      	lsls	r0, r0, #1
 80007d0:	eb41 0101 	adc.w	r1, r1, r1
 80007d4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3c01      	subeq	r4, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1a6>
 80007de:	ea41 0106 	orr.w	r1, r1, r6
 80007e2:	f095 0f00 	teq	r5, #0
 80007e6:	bf18      	it	ne
 80007e8:	4770      	bxne	lr
 80007ea:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ee:	0052      	lsls	r2, r2, #1
 80007f0:	eb43 0303 	adc.w	r3, r3, r3
 80007f4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3d01      	subeq	r5, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1c6>
 80007fe:	ea43 0306 	orr.w	r3, r3, r6
 8000802:	4770      	bx	lr
 8000804:	ea94 0f0c 	teq	r4, ip
 8000808:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800080c:	bf18      	it	ne
 800080e:	ea95 0f0c 	teqne	r5, ip
 8000812:	d00c      	beq.n	800082e <__aeabi_dmul+0x206>
 8000814:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000818:	bf18      	it	ne
 800081a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081e:	d1d1      	bne.n	80007c4 <__aeabi_dmul+0x19c>
 8000820:	ea81 0103 	eor.w	r1, r1, r3
 8000824:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000828:	f04f 0000 	mov.w	r0, #0
 800082c:	bd70      	pop	{r4, r5, r6, pc}
 800082e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000832:	bf06      	itte	eq
 8000834:	4610      	moveq	r0, r2
 8000836:	4619      	moveq	r1, r3
 8000838:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083c:	d019      	beq.n	8000872 <__aeabi_dmul+0x24a>
 800083e:	ea94 0f0c 	teq	r4, ip
 8000842:	d102      	bne.n	800084a <__aeabi_dmul+0x222>
 8000844:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000848:	d113      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800084a:	ea95 0f0c 	teq	r5, ip
 800084e:	d105      	bne.n	800085c <__aeabi_dmul+0x234>
 8000850:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000854:	bf1c      	itt	ne
 8000856:	4610      	movne	r0, r2
 8000858:	4619      	movne	r1, r3
 800085a:	d10a      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800085c:	ea81 0103 	eor.w	r1, r1, r3
 8000860:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000864:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000868:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800086c:	f04f 0000 	mov.w	r0, #0
 8000870:	bd70      	pop	{r4, r5, r6, pc}
 8000872:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000876:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800087a:	bd70      	pop	{r4, r5, r6, pc}

0800087c <__aeabi_ddiv>:
 800087c:	b570      	push	{r4, r5, r6, lr}
 800087e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000882:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000886:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800088a:	bf1d      	ittte	ne
 800088c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000890:	ea94 0f0c 	teqne	r4, ip
 8000894:	ea95 0f0c 	teqne	r5, ip
 8000898:	f000 f8a7 	bleq	80009ea <__aeabi_ddiv+0x16e>
 800089c:	eba4 0405 	sub.w	r4, r4, r5
 80008a0:	ea81 0e03 	eor.w	lr, r1, r3
 80008a4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008a8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008ac:	f000 8088 	beq.w	80009c0 <__aeabi_ddiv+0x144>
 80008b0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008b4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008b8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008bc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008c0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008c4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008c8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008cc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008d0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008d4:	429d      	cmp	r5, r3
 80008d6:	bf08      	it	eq
 80008d8:	4296      	cmpeq	r6, r2
 80008da:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008de:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008e2:	d202      	bcs.n	80008ea <__aeabi_ddiv+0x6e>
 80008e4:	085b      	lsrs	r3, r3, #1
 80008e6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ea:	1ab6      	subs	r6, r6, r2
 80008ec:	eb65 0503 	sbc.w	r5, r5, r3
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008fa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000928:	085b      	lsrs	r3, r3, #1
 800092a:	ea4f 0232 	mov.w	r2, r2, rrx
 800092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000936:	bf22      	ittt	cs
 8000938:	1ab6      	subcs	r6, r6, r2
 800093a:	4675      	movcs	r5, lr
 800093c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000940:	085b      	lsrs	r3, r3, #1
 8000942:	ea4f 0232 	mov.w	r2, r2, rrx
 8000946:	ebb6 0e02 	subs.w	lr, r6, r2
 800094a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800094e:	bf22      	ittt	cs
 8000950:	1ab6      	subcs	r6, r6, r2
 8000952:	4675      	movcs	r5, lr
 8000954:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000958:	ea55 0e06 	orrs.w	lr, r5, r6
 800095c:	d018      	beq.n	8000990 <__aeabi_ddiv+0x114>
 800095e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000962:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000966:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800096a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800096e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000972:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000976:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800097a:	d1c0      	bne.n	80008fe <__aeabi_ddiv+0x82>
 800097c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000980:	d10b      	bne.n	800099a <__aeabi_ddiv+0x11e>
 8000982:	ea41 0100 	orr.w	r1, r1, r0
 8000986:	f04f 0000 	mov.w	r0, #0
 800098a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800098e:	e7b6      	b.n	80008fe <__aeabi_ddiv+0x82>
 8000990:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000994:	bf04      	itt	eq
 8000996:	4301      	orreq	r1, r0
 8000998:	2000      	moveq	r0, #0
 800099a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800099e:	bf88      	it	hi
 80009a0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009a4:	f63f aeaf 	bhi.w	8000706 <__aeabi_dmul+0xde>
 80009a8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009ac:	bf04      	itt	eq
 80009ae:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009b2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009b6:	f150 0000 	adcs.w	r0, r0, #0
 80009ba:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009be:	bd70      	pop	{r4, r5, r6, pc}
 80009c0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009c4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009c8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009cc:	bfc2      	ittt	gt
 80009ce:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009d2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009d6:	bd70      	popgt	{r4, r5, r6, pc}
 80009d8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009dc:	f04f 0e00 	mov.w	lr, #0
 80009e0:	3c01      	subs	r4, #1
 80009e2:	e690      	b.n	8000706 <__aeabi_dmul+0xde>
 80009e4:	ea45 0e06 	orr.w	lr, r5, r6
 80009e8:	e68d      	b.n	8000706 <__aeabi_dmul+0xde>
 80009ea:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ee:	ea94 0f0c 	teq	r4, ip
 80009f2:	bf08      	it	eq
 80009f4:	ea95 0f0c 	teqeq	r5, ip
 80009f8:	f43f af3b 	beq.w	8000872 <__aeabi_dmul+0x24a>
 80009fc:	ea94 0f0c 	teq	r4, ip
 8000a00:	d10a      	bne.n	8000a18 <__aeabi_ddiv+0x19c>
 8000a02:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a06:	f47f af34 	bne.w	8000872 <__aeabi_dmul+0x24a>
 8000a0a:	ea95 0f0c 	teq	r5, ip
 8000a0e:	f47f af25 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a12:	4610      	mov	r0, r2
 8000a14:	4619      	mov	r1, r3
 8000a16:	e72c      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a18:	ea95 0f0c 	teq	r5, ip
 8000a1c:	d106      	bne.n	8000a2c <__aeabi_ddiv+0x1b0>
 8000a1e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a22:	f43f aefd 	beq.w	8000820 <__aeabi_dmul+0x1f8>
 8000a26:	4610      	mov	r0, r2
 8000a28:	4619      	mov	r1, r3
 8000a2a:	e722      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a2c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a30:	bf18      	it	ne
 8000a32:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a36:	f47f aec5 	bne.w	80007c4 <__aeabi_dmul+0x19c>
 8000a3a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a3e:	f47f af0d 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a42:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a46:	f47f aeeb 	bne.w	8000820 <__aeabi_dmul+0x1f8>
 8000a4a:	e712      	b.n	8000872 <__aeabi_dmul+0x24a>

08000a4c <__aeabi_d2f>:
 8000a4c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a50:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000a54:	bf24      	itt	cs
 8000a56:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000a5a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000a5e:	d90d      	bls.n	8000a7c <__aeabi_d2f+0x30>
 8000a60:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000a64:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000a68:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000a6c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000a70:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000a74:	bf08      	it	eq
 8000a76:	f020 0001 	biceq.w	r0, r0, #1
 8000a7a:	4770      	bx	lr
 8000a7c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000a80:	d121      	bne.n	8000ac6 <__aeabi_d2f+0x7a>
 8000a82:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000a86:	bfbc      	itt	lt
 8000a88:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000a8c:	4770      	bxlt	lr
 8000a8e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000a92:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000a96:	f1c2 0218 	rsb	r2, r2, #24
 8000a9a:	f1c2 0c20 	rsb	ip, r2, #32
 8000a9e:	fa10 f30c 	lsls.w	r3, r0, ip
 8000aa2:	fa20 f002 	lsr.w	r0, r0, r2
 8000aa6:	bf18      	it	ne
 8000aa8:	f040 0001 	orrne.w	r0, r0, #1
 8000aac:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ab0:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000ab4:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000ab8:	ea40 000c 	orr.w	r0, r0, ip
 8000abc:	fa23 f302 	lsr.w	r3, r3, r2
 8000ac0:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000ac4:	e7cc      	b.n	8000a60 <__aeabi_d2f+0x14>
 8000ac6:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000aca:	d107      	bne.n	8000adc <__aeabi_d2f+0x90>
 8000acc:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000ad0:	bf1e      	ittt	ne
 8000ad2:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000ad6:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000ada:	4770      	bxne	lr
 8000adc:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000ae0:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ae4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ae8:	4770      	bx	lr
 8000aea:	bf00      	nop

08000aec <__aeabi_uldivmod>:
 8000aec:	b953      	cbnz	r3, 8000b04 <__aeabi_uldivmod+0x18>
 8000aee:	b94a      	cbnz	r2, 8000b04 <__aeabi_uldivmod+0x18>
 8000af0:	2900      	cmp	r1, #0
 8000af2:	bf08      	it	eq
 8000af4:	2800      	cmpeq	r0, #0
 8000af6:	bf1c      	itt	ne
 8000af8:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000afc:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000b00:	f000 b972 	b.w	8000de8 <__aeabi_idiv0>
 8000b04:	f1ad 0c08 	sub.w	ip, sp, #8
 8000b08:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000b0c:	f000 f806 	bl	8000b1c <__udivmoddi4>
 8000b10:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b14:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b18:	b004      	add	sp, #16
 8000b1a:	4770      	bx	lr

08000b1c <__udivmoddi4>:
 8000b1c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000b20:	9e08      	ldr	r6, [sp, #32]
 8000b22:	4604      	mov	r4, r0
 8000b24:	4688      	mov	r8, r1
 8000b26:	2b00      	cmp	r3, #0
 8000b28:	d14b      	bne.n	8000bc2 <__udivmoddi4+0xa6>
 8000b2a:	428a      	cmp	r2, r1
 8000b2c:	4615      	mov	r5, r2
 8000b2e:	d967      	bls.n	8000c00 <__udivmoddi4+0xe4>
 8000b30:	fab2 f282 	clz	r2, r2
 8000b34:	b14a      	cbz	r2, 8000b4a <__udivmoddi4+0x2e>
 8000b36:	f1c2 0720 	rsb	r7, r2, #32
 8000b3a:	fa01 f302 	lsl.w	r3, r1, r2
 8000b3e:	fa20 f707 	lsr.w	r7, r0, r7
 8000b42:	4095      	lsls	r5, r2
 8000b44:	ea47 0803 	orr.w	r8, r7, r3
 8000b48:	4094      	lsls	r4, r2
 8000b4a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000b4e:	0c23      	lsrs	r3, r4, #16
 8000b50:	fbb8 f7fe 	udiv	r7, r8, lr
 8000b54:	fa1f fc85 	uxth.w	ip, r5
 8000b58:	fb0e 8817 	mls	r8, lr, r7, r8
 8000b5c:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000b60:	fb07 f10c 	mul.w	r1, r7, ip
 8000b64:	4299      	cmp	r1, r3
 8000b66:	d909      	bls.n	8000b7c <__udivmoddi4+0x60>
 8000b68:	18eb      	adds	r3, r5, r3
 8000b6a:	f107 30ff 	add.w	r0, r7, #4294967295	; 0xffffffff
 8000b6e:	f080 811b 	bcs.w	8000da8 <__udivmoddi4+0x28c>
 8000b72:	4299      	cmp	r1, r3
 8000b74:	f240 8118 	bls.w	8000da8 <__udivmoddi4+0x28c>
 8000b78:	3f02      	subs	r7, #2
 8000b7a:	442b      	add	r3, r5
 8000b7c:	1a5b      	subs	r3, r3, r1
 8000b7e:	b2a4      	uxth	r4, r4
 8000b80:	fbb3 f0fe 	udiv	r0, r3, lr
 8000b84:	fb0e 3310 	mls	r3, lr, r0, r3
 8000b88:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000b8c:	fb00 fc0c 	mul.w	ip, r0, ip
 8000b90:	45a4      	cmp	ip, r4
 8000b92:	d909      	bls.n	8000ba8 <__udivmoddi4+0x8c>
 8000b94:	192c      	adds	r4, r5, r4
 8000b96:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000b9a:	f080 8107 	bcs.w	8000dac <__udivmoddi4+0x290>
 8000b9e:	45a4      	cmp	ip, r4
 8000ba0:	f240 8104 	bls.w	8000dac <__udivmoddi4+0x290>
 8000ba4:	3802      	subs	r0, #2
 8000ba6:	442c      	add	r4, r5
 8000ba8:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000bac:	eba4 040c 	sub.w	r4, r4, ip
 8000bb0:	2700      	movs	r7, #0
 8000bb2:	b11e      	cbz	r6, 8000bbc <__udivmoddi4+0xa0>
 8000bb4:	40d4      	lsrs	r4, r2
 8000bb6:	2300      	movs	r3, #0
 8000bb8:	e9c6 4300 	strd	r4, r3, [r6]
 8000bbc:	4639      	mov	r1, r7
 8000bbe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000bc2:	428b      	cmp	r3, r1
 8000bc4:	d909      	bls.n	8000bda <__udivmoddi4+0xbe>
 8000bc6:	2e00      	cmp	r6, #0
 8000bc8:	f000 80eb 	beq.w	8000da2 <__udivmoddi4+0x286>
 8000bcc:	2700      	movs	r7, #0
 8000bce:	e9c6 0100 	strd	r0, r1, [r6]
 8000bd2:	4638      	mov	r0, r7
 8000bd4:	4639      	mov	r1, r7
 8000bd6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000bda:	fab3 f783 	clz	r7, r3
 8000bde:	2f00      	cmp	r7, #0
 8000be0:	d147      	bne.n	8000c72 <__udivmoddi4+0x156>
 8000be2:	428b      	cmp	r3, r1
 8000be4:	d302      	bcc.n	8000bec <__udivmoddi4+0xd0>
 8000be6:	4282      	cmp	r2, r0
 8000be8:	f200 80fa 	bhi.w	8000de0 <__udivmoddi4+0x2c4>
 8000bec:	1a84      	subs	r4, r0, r2
 8000bee:	eb61 0303 	sbc.w	r3, r1, r3
 8000bf2:	2001      	movs	r0, #1
 8000bf4:	4698      	mov	r8, r3
 8000bf6:	2e00      	cmp	r6, #0
 8000bf8:	d0e0      	beq.n	8000bbc <__udivmoddi4+0xa0>
 8000bfa:	e9c6 4800 	strd	r4, r8, [r6]
 8000bfe:	e7dd      	b.n	8000bbc <__udivmoddi4+0xa0>
 8000c00:	b902      	cbnz	r2, 8000c04 <__udivmoddi4+0xe8>
 8000c02:	deff      	udf	#255	; 0xff
 8000c04:	fab2 f282 	clz	r2, r2
 8000c08:	2a00      	cmp	r2, #0
 8000c0a:	f040 808f 	bne.w	8000d2c <__udivmoddi4+0x210>
 8000c0e:	1b49      	subs	r1, r1, r5
 8000c10:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000c14:	fa1f f885 	uxth.w	r8, r5
 8000c18:	2701      	movs	r7, #1
 8000c1a:	fbb1 fcfe 	udiv	ip, r1, lr
 8000c1e:	0c23      	lsrs	r3, r4, #16
 8000c20:	fb0e 111c 	mls	r1, lr, ip, r1
 8000c24:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c28:	fb08 f10c 	mul.w	r1, r8, ip
 8000c2c:	4299      	cmp	r1, r3
 8000c2e:	d907      	bls.n	8000c40 <__udivmoddi4+0x124>
 8000c30:	18eb      	adds	r3, r5, r3
 8000c32:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 8000c36:	d202      	bcs.n	8000c3e <__udivmoddi4+0x122>
 8000c38:	4299      	cmp	r1, r3
 8000c3a:	f200 80cd 	bhi.w	8000dd8 <__udivmoddi4+0x2bc>
 8000c3e:	4684      	mov	ip, r0
 8000c40:	1a59      	subs	r1, r3, r1
 8000c42:	b2a3      	uxth	r3, r4
 8000c44:	fbb1 f0fe 	udiv	r0, r1, lr
 8000c48:	fb0e 1410 	mls	r4, lr, r0, r1
 8000c4c:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000c50:	fb08 f800 	mul.w	r8, r8, r0
 8000c54:	45a0      	cmp	r8, r4
 8000c56:	d907      	bls.n	8000c68 <__udivmoddi4+0x14c>
 8000c58:	192c      	adds	r4, r5, r4
 8000c5a:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000c5e:	d202      	bcs.n	8000c66 <__udivmoddi4+0x14a>
 8000c60:	45a0      	cmp	r8, r4
 8000c62:	f200 80b6 	bhi.w	8000dd2 <__udivmoddi4+0x2b6>
 8000c66:	4618      	mov	r0, r3
 8000c68:	eba4 0408 	sub.w	r4, r4, r8
 8000c6c:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000c70:	e79f      	b.n	8000bb2 <__udivmoddi4+0x96>
 8000c72:	f1c7 0c20 	rsb	ip, r7, #32
 8000c76:	40bb      	lsls	r3, r7
 8000c78:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000c7c:	ea4e 0e03 	orr.w	lr, lr, r3
 8000c80:	fa01 f407 	lsl.w	r4, r1, r7
 8000c84:	fa20 f50c 	lsr.w	r5, r0, ip
 8000c88:	fa21 f30c 	lsr.w	r3, r1, ip
 8000c8c:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000c90:	4325      	orrs	r5, r4
 8000c92:	fbb3 f9f8 	udiv	r9, r3, r8
 8000c96:	0c2c      	lsrs	r4, r5, #16
 8000c98:	fb08 3319 	mls	r3, r8, r9, r3
 8000c9c:	fa1f fa8e 	uxth.w	sl, lr
 8000ca0:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000ca4:	fb09 f40a 	mul.w	r4, r9, sl
 8000ca8:	429c      	cmp	r4, r3
 8000caa:	fa02 f207 	lsl.w	r2, r2, r7
 8000cae:	fa00 f107 	lsl.w	r1, r0, r7
 8000cb2:	d90b      	bls.n	8000ccc <__udivmoddi4+0x1b0>
 8000cb4:	eb1e 0303 	adds.w	r3, lr, r3
 8000cb8:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000cbc:	f080 8087 	bcs.w	8000dce <__udivmoddi4+0x2b2>
 8000cc0:	429c      	cmp	r4, r3
 8000cc2:	f240 8084 	bls.w	8000dce <__udivmoddi4+0x2b2>
 8000cc6:	f1a9 0902 	sub.w	r9, r9, #2
 8000cca:	4473      	add	r3, lr
 8000ccc:	1b1b      	subs	r3, r3, r4
 8000cce:	b2ad      	uxth	r5, r5
 8000cd0:	fbb3 f0f8 	udiv	r0, r3, r8
 8000cd4:	fb08 3310 	mls	r3, r8, r0, r3
 8000cd8:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000cdc:	fb00 fa0a 	mul.w	sl, r0, sl
 8000ce0:	45a2      	cmp	sl, r4
 8000ce2:	d908      	bls.n	8000cf6 <__udivmoddi4+0x1da>
 8000ce4:	eb1e 0404 	adds.w	r4, lr, r4
 8000ce8:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000cec:	d26b      	bcs.n	8000dc6 <__udivmoddi4+0x2aa>
 8000cee:	45a2      	cmp	sl, r4
 8000cf0:	d969      	bls.n	8000dc6 <__udivmoddi4+0x2aa>
 8000cf2:	3802      	subs	r0, #2
 8000cf4:	4474      	add	r4, lr
 8000cf6:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000cfa:	fba0 8902 	umull	r8, r9, r0, r2
 8000cfe:	eba4 040a 	sub.w	r4, r4, sl
 8000d02:	454c      	cmp	r4, r9
 8000d04:	46c2      	mov	sl, r8
 8000d06:	464b      	mov	r3, r9
 8000d08:	d354      	bcc.n	8000db4 <__udivmoddi4+0x298>
 8000d0a:	d051      	beq.n	8000db0 <__udivmoddi4+0x294>
 8000d0c:	2e00      	cmp	r6, #0
 8000d0e:	d069      	beq.n	8000de4 <__udivmoddi4+0x2c8>
 8000d10:	ebb1 050a 	subs.w	r5, r1, sl
 8000d14:	eb64 0403 	sbc.w	r4, r4, r3
 8000d18:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000d1c:	40fd      	lsrs	r5, r7
 8000d1e:	40fc      	lsrs	r4, r7
 8000d20:	ea4c 0505 	orr.w	r5, ip, r5
 8000d24:	e9c6 5400 	strd	r5, r4, [r6]
 8000d28:	2700      	movs	r7, #0
 8000d2a:	e747      	b.n	8000bbc <__udivmoddi4+0xa0>
 8000d2c:	f1c2 0320 	rsb	r3, r2, #32
 8000d30:	fa20 f703 	lsr.w	r7, r0, r3
 8000d34:	4095      	lsls	r5, r2
 8000d36:	fa01 f002 	lsl.w	r0, r1, r2
 8000d3a:	fa21 f303 	lsr.w	r3, r1, r3
 8000d3e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000d42:	4338      	orrs	r0, r7
 8000d44:	0c01      	lsrs	r1, r0, #16
 8000d46:	fbb3 f7fe 	udiv	r7, r3, lr
 8000d4a:	fa1f f885 	uxth.w	r8, r5
 8000d4e:	fb0e 3317 	mls	r3, lr, r7, r3
 8000d52:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d56:	fb07 f308 	mul.w	r3, r7, r8
 8000d5a:	428b      	cmp	r3, r1
 8000d5c:	fa04 f402 	lsl.w	r4, r4, r2
 8000d60:	d907      	bls.n	8000d72 <__udivmoddi4+0x256>
 8000d62:	1869      	adds	r1, r5, r1
 8000d64:	f107 3cff 	add.w	ip, r7, #4294967295	; 0xffffffff
 8000d68:	d22f      	bcs.n	8000dca <__udivmoddi4+0x2ae>
 8000d6a:	428b      	cmp	r3, r1
 8000d6c:	d92d      	bls.n	8000dca <__udivmoddi4+0x2ae>
 8000d6e:	3f02      	subs	r7, #2
 8000d70:	4429      	add	r1, r5
 8000d72:	1acb      	subs	r3, r1, r3
 8000d74:	b281      	uxth	r1, r0
 8000d76:	fbb3 f0fe 	udiv	r0, r3, lr
 8000d7a:	fb0e 3310 	mls	r3, lr, r0, r3
 8000d7e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d82:	fb00 f308 	mul.w	r3, r0, r8
 8000d86:	428b      	cmp	r3, r1
 8000d88:	d907      	bls.n	8000d9a <__udivmoddi4+0x27e>
 8000d8a:	1869      	adds	r1, r5, r1
 8000d8c:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 8000d90:	d217      	bcs.n	8000dc2 <__udivmoddi4+0x2a6>
 8000d92:	428b      	cmp	r3, r1
 8000d94:	d915      	bls.n	8000dc2 <__udivmoddi4+0x2a6>
 8000d96:	3802      	subs	r0, #2
 8000d98:	4429      	add	r1, r5
 8000d9a:	1ac9      	subs	r1, r1, r3
 8000d9c:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000da0:	e73b      	b.n	8000c1a <__udivmoddi4+0xfe>
 8000da2:	4637      	mov	r7, r6
 8000da4:	4630      	mov	r0, r6
 8000da6:	e709      	b.n	8000bbc <__udivmoddi4+0xa0>
 8000da8:	4607      	mov	r7, r0
 8000daa:	e6e7      	b.n	8000b7c <__udivmoddi4+0x60>
 8000dac:	4618      	mov	r0, r3
 8000dae:	e6fb      	b.n	8000ba8 <__udivmoddi4+0x8c>
 8000db0:	4541      	cmp	r1, r8
 8000db2:	d2ab      	bcs.n	8000d0c <__udivmoddi4+0x1f0>
 8000db4:	ebb8 0a02 	subs.w	sl, r8, r2
 8000db8:	eb69 020e 	sbc.w	r2, r9, lr
 8000dbc:	3801      	subs	r0, #1
 8000dbe:	4613      	mov	r3, r2
 8000dc0:	e7a4      	b.n	8000d0c <__udivmoddi4+0x1f0>
 8000dc2:	4660      	mov	r0, ip
 8000dc4:	e7e9      	b.n	8000d9a <__udivmoddi4+0x27e>
 8000dc6:	4618      	mov	r0, r3
 8000dc8:	e795      	b.n	8000cf6 <__udivmoddi4+0x1da>
 8000dca:	4667      	mov	r7, ip
 8000dcc:	e7d1      	b.n	8000d72 <__udivmoddi4+0x256>
 8000dce:	4681      	mov	r9, r0
 8000dd0:	e77c      	b.n	8000ccc <__udivmoddi4+0x1b0>
 8000dd2:	3802      	subs	r0, #2
 8000dd4:	442c      	add	r4, r5
 8000dd6:	e747      	b.n	8000c68 <__udivmoddi4+0x14c>
 8000dd8:	f1ac 0c02 	sub.w	ip, ip, #2
 8000ddc:	442b      	add	r3, r5
 8000dde:	e72f      	b.n	8000c40 <__udivmoddi4+0x124>
 8000de0:	4638      	mov	r0, r7
 8000de2:	e708      	b.n	8000bf6 <__udivmoddi4+0xda>
 8000de4:	4637      	mov	r7, r6
 8000de6:	e6e9      	b.n	8000bbc <__udivmoddi4+0xa0>

08000de8 <__aeabi_idiv0>:
 8000de8:	4770      	bx	lr
 8000dea:	bf00      	nop
 8000dec:	0000      	movs	r0, r0
	...

08000df0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000df0:	b598      	push	{r3, r4, r7, lr}
 8000df2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000df4:	f000 fc58 	bl	80016a8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000df8:	f000 f8bc 	bl	8000f74 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000dfc:	f000 f9c0 	bl	8001180 <MX_GPIO_Init>
  MX_DMA_Init();
 8000e00:	f000 f99e 	bl	8001140 <MX_DMA_Init>
  MX_USART2_UART_Init();
 8000e04:	f000 f972 	bl	80010ec <MX_USART2_UART_Init>
  MX_ADC1_Init();
 8000e08:	f000 f922 	bl	8001050 <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */
  HAL_UART_Receive_DMA(&huart2,RxBuffer,10);
 8000e0c:	220a      	movs	r2, #10
 8000e0e:	494c      	ldr	r1, [pc, #304]	; (8000f40 <main+0x150>)
 8000e10:	484c      	ldr	r0, [pc, #304]	; (8000f44 <main+0x154>)
 8000e12:	f002 fcff 	bl	8003814 <HAL_UART_Receive_DMA>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  sConfig.Channel = ADC_CHANNEL_0;
 8000e16:	4b4c      	ldr	r3, [pc, #304]	; (8000f48 <main+0x158>)
 8000e18:	2200      	movs	r2, #0
 8000e1a:	601a      	str	r2, [r3, #0]
	  HAL_ADC_ConfigChannel(&hadc1, &sConfig);
 8000e1c:	494a      	ldr	r1, [pc, #296]	; (8000f48 <main+0x158>)
 8000e1e:	484b      	ldr	r0, [pc, #300]	; (8000f4c <main+0x15c>)
 8000e20:	f000 fe72 	bl	8001b08 <HAL_ADC_ConfigChannel>
	  if(HAL_GPIO_ReadPin(GPIOC,GPIO_PIN_13) == GPIO_PIN_RESET)
 8000e24:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000e28:	4849      	ldr	r0, [pc, #292]	; (8000f50 <main+0x160>)
 8000e2a:	f001 fead 	bl	8002b88 <HAL_GPIO_ReadPin>
 8000e2e:	4603      	mov	r3, r0
 8000e30:	2b00      	cmp	r3, #0
 8000e32:	d10d      	bne.n	8000e50 <main+0x60>
	  	  {
		  	  while(HAL_GPIO_ReadPin(GPIOC,GPIO_PIN_13) == GPIO_PIN_RESET);
 8000e34:	bf00      	nop
 8000e36:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000e3a:	4845      	ldr	r0, [pc, #276]	; (8000f50 <main+0x160>)
 8000e3c:	f001 fea4 	bl	8002b88 <HAL_GPIO_ReadPin>
 8000e40:	4603      	mov	r3, r0
 8000e42:	2b00      	cmp	r3, #0
 8000e44:	d0f7      	beq.n	8000e36 <main+0x46>
		  	  HAL_GPIO_WritePin(GPIOA,GPIO_PIN_5,GPIO_PIN_SET);
 8000e46:	2201      	movs	r2, #1
 8000e48:	2120      	movs	r1, #32
 8000e4a:	4842      	ldr	r0, [pc, #264]	; (8000f54 <main+0x164>)
 8000e4c:	f001 feb4 	bl	8002bb8 <HAL_GPIO_WritePin>

	  	  }
	  HAL_GPIO_TogglePin(GPIOA,GPIO_PIN_5);
 8000e50:	2120      	movs	r1, #32
 8000e52:	4840      	ldr	r0, [pc, #256]	; (8000f54 <main+0x164>)
 8000e54:	f001 fec9 	bl	8002bea <HAL_GPIO_TogglePin>
	  HAL_Delay(1000);
 8000e58:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000e5c:	f000 fc96 	bl	800178c <HAL_Delay>
	  HAL_ADC_Start(&hadc1);
 8000e60:	483a      	ldr	r0, [pc, #232]	; (8000f4c <main+0x15c>)
 8000e62:	f000 fcf9 	bl	8001858 <HAL_ADC_Start>
	  if(HAL_ADC_PollForConversion(&hadc1,5) == HAL_OK)
 8000e66:	2105      	movs	r1, #5
 8000e68:	4838      	ldr	r0, [pc, #224]	; (8000f4c <main+0x15c>)
 8000e6a:	f000 fdbb 	bl	80019e4 <HAL_ADC_PollForConversion>
 8000e6e:	4603      	mov	r3, r0
 8000e70:	2b00      	cmp	r3, #0
 8000e72:	d126      	bne.n	8000ec2 <main+0xd2>
	  {
	  		AdcValue0 = HAL_ADC_GetValue(&hadc1);
 8000e74:	4835      	ldr	r0, [pc, #212]	; (8000f4c <main+0x15c>)
 8000e76:	f000 fe39 	bl	8001aec <HAL_ADC_GetValue>
 8000e7a:	4602      	mov	r2, r0
 8000e7c:	4b36      	ldr	r3, [pc, #216]	; (8000f58 <main+0x168>)
 8000e7e:	601a      	str	r2, [r3, #0]
	  		Voltage0  = AdcValue0*VOLT_CONV_FACTOR;
 8000e80:	4b35      	ldr	r3, [pc, #212]	; (8000f58 <main+0x168>)
 8000e82:	681b      	ldr	r3, [r3, #0]
 8000e84:	4618      	mov	r0, r3
 8000e86:	f7ff fb55 	bl	8000534 <__aeabi_ui2d>
 8000e8a:	a32b      	add	r3, pc, #172	; (adr r3, 8000f38 <main+0x148>)
 8000e8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000e90:	f7ff fbca 	bl	8000628 <__aeabi_dmul>
 8000e94:	4603      	mov	r3, r0
 8000e96:	460c      	mov	r4, r1
 8000e98:	4618      	mov	r0, r3
 8000e9a:	4621      	mov	r1, r4
 8000e9c:	f7ff fdd6 	bl	8000a4c <__aeabi_d2f>
 8000ea0:	4602      	mov	r2, r0
 8000ea2:	4b2e      	ldr	r3, [pc, #184]	; (8000f5c <main+0x16c>)
 8000ea4:	601a      	str	r2, [r3, #0]
	  		printf("V0:%ld V\t",(uint32_t)(Voltage0 * 100));
 8000ea6:	4b2d      	ldr	r3, [pc, #180]	; (8000f5c <main+0x16c>)
 8000ea8:	edd3 7a00 	vldr	s15, [r3]
 8000eac:	ed9f 7a2c 	vldr	s14, [pc, #176]	; 8000f60 <main+0x170>
 8000eb0:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000eb4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000eb8:	ee17 1a90 	vmov	r1, s15
 8000ebc:	4829      	ldr	r0, [pc, #164]	; (8000f64 <main+0x174>)
 8000ebe:	f003 f9f5 	bl	80042ac <iprintf>
	  		/* printing voltage as integer since %f is not working in stm32 */
	  }
	  sConfig.Channel = ADC_CHANNEL_1;
 8000ec2:	4b21      	ldr	r3, [pc, #132]	; (8000f48 <main+0x158>)
 8000ec4:	2201      	movs	r2, #1
 8000ec6:	601a      	str	r2, [r3, #0]
	  HAL_ADC_ConfigChannel(&hadc1, &sConfig);
 8000ec8:	491f      	ldr	r1, [pc, #124]	; (8000f48 <main+0x158>)
 8000eca:	4820      	ldr	r0, [pc, #128]	; (8000f4c <main+0x15c>)
 8000ecc:	f000 fe1c 	bl	8001b08 <HAL_ADC_ConfigChannel>
	  HAL_ADC_Start(&hadc1);
 8000ed0:	481e      	ldr	r0, [pc, #120]	; (8000f4c <main+0x15c>)
 8000ed2:	f000 fcc1 	bl	8001858 <HAL_ADC_Start>
	  if(HAL_ADC_PollForConversion(&hadc1,5) == HAL_OK)
 8000ed6:	2105      	movs	r1, #5
 8000ed8:	481c      	ldr	r0, [pc, #112]	; (8000f4c <main+0x15c>)
 8000eda:	f000 fd83 	bl	80019e4 <HAL_ADC_PollForConversion>
 8000ede:	4603      	mov	r3, r0
 8000ee0:	2b00      	cmp	r3, #0
 8000ee2:	d198      	bne.n	8000e16 <main+0x26>
	  {
	  		AdcValue1 = HAL_ADC_GetValue(&hadc1);
 8000ee4:	4819      	ldr	r0, [pc, #100]	; (8000f4c <main+0x15c>)
 8000ee6:	f000 fe01 	bl	8001aec <HAL_ADC_GetValue>
 8000eea:	4602      	mov	r2, r0
 8000eec:	4b1e      	ldr	r3, [pc, #120]	; (8000f68 <main+0x178>)
 8000eee:	601a      	str	r2, [r3, #0]
	  		Voltage1 = AdcValue1*VOLT_CONV_FACTOR;
 8000ef0:	4b1d      	ldr	r3, [pc, #116]	; (8000f68 <main+0x178>)
 8000ef2:	681b      	ldr	r3, [r3, #0]
 8000ef4:	4618      	mov	r0, r3
 8000ef6:	f7ff fb1d 	bl	8000534 <__aeabi_ui2d>
 8000efa:	a30f      	add	r3, pc, #60	; (adr r3, 8000f38 <main+0x148>)
 8000efc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000f00:	f7ff fb92 	bl	8000628 <__aeabi_dmul>
 8000f04:	4603      	mov	r3, r0
 8000f06:	460c      	mov	r4, r1
 8000f08:	4618      	mov	r0, r3
 8000f0a:	4621      	mov	r1, r4
 8000f0c:	f7ff fd9e 	bl	8000a4c <__aeabi_d2f>
 8000f10:	4602      	mov	r2, r0
 8000f12:	4b16      	ldr	r3, [pc, #88]	; (8000f6c <main+0x17c>)
 8000f14:	601a      	str	r2, [r3, #0]
	  		printf("V1:%ld V\n\r",(uint32_t)(Voltage1 * 100));
 8000f16:	4b15      	ldr	r3, [pc, #84]	; (8000f6c <main+0x17c>)
 8000f18:	edd3 7a00 	vldr	s15, [r3]
 8000f1c:	ed9f 7a10 	vldr	s14, [pc, #64]	; 8000f60 <main+0x170>
 8000f20:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000f24:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000f28:	ee17 1a90 	vmov	r1, s15
 8000f2c:	4810      	ldr	r0, [pc, #64]	; (8000f70 <main+0x180>)
 8000f2e:	f003 f9bd 	bl	80042ac <iprintf>
	  sConfig.Channel = ADC_CHANNEL_0;
 8000f32:	e770      	b.n	8000e16 <main+0x26>
 8000f34:	f3af 8000 	nop.w
 8000f38:	66666666 	.word	0x66666666
 8000f3c:	3f4a6666 	.word	0x3f4a6666
 8000f40:	20000158 	.word	0x20000158
 8000f44:	20000168 	.word	0x20000168
 8000f48:	2000008c 	.word	0x2000008c
 8000f4c:	2000010c 	.word	0x2000010c
 8000f50:	40020800 	.word	0x40020800
 8000f54:	40020000 	.word	0x40020000
 8000f58:	20000164 	.word	0x20000164
 8000f5c:	20000108 	.word	0x20000108
 8000f60:	42c80000 	.word	0x42c80000
 8000f64:	0800508c 	.word	0x0800508c
 8000f68:	200001a8 	.word	0x200001a8
 8000f6c:	20000154 	.word	0x20000154
 8000f70:	08005098 	.word	0x08005098

08000f74 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000f74:	b580      	push	{r7, lr}
 8000f76:	b094      	sub	sp, #80	; 0x50
 8000f78:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000f7a:	f107 031c 	add.w	r3, r7, #28
 8000f7e:	2234      	movs	r2, #52	; 0x34
 8000f80:	2100      	movs	r1, #0
 8000f82:	4618      	mov	r0, r3
 8000f84:	f003 f98a 	bl	800429c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000f88:	f107 0308 	add.w	r3, r7, #8
 8000f8c:	2200      	movs	r2, #0
 8000f8e:	601a      	str	r2, [r3, #0]
 8000f90:	605a      	str	r2, [r3, #4]
 8000f92:	609a      	str	r2, [r3, #8]
 8000f94:	60da      	str	r2, [r3, #12]
 8000f96:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000f98:	2300      	movs	r3, #0
 8000f9a:	607b      	str	r3, [r7, #4]
 8000f9c:	4b2a      	ldr	r3, [pc, #168]	; (8001048 <SystemClock_Config+0xd4>)
 8000f9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fa0:	4a29      	ldr	r2, [pc, #164]	; (8001048 <SystemClock_Config+0xd4>)
 8000fa2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000fa6:	6413      	str	r3, [r2, #64]	; 0x40
 8000fa8:	4b27      	ldr	r3, [pc, #156]	; (8001048 <SystemClock_Config+0xd4>)
 8000faa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fac:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000fb0:	607b      	str	r3, [r7, #4]
 8000fb2:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000fb4:	2300      	movs	r3, #0
 8000fb6:	603b      	str	r3, [r7, #0]
 8000fb8:	4b24      	ldr	r3, [pc, #144]	; (800104c <SystemClock_Config+0xd8>)
 8000fba:	681b      	ldr	r3, [r3, #0]
 8000fbc:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000fc0:	4a22      	ldr	r2, [pc, #136]	; (800104c <SystemClock_Config+0xd8>)
 8000fc2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000fc6:	6013      	str	r3, [r2, #0]
 8000fc8:	4b20      	ldr	r3, [pc, #128]	; (800104c <SystemClock_Config+0xd8>)
 8000fca:	681b      	ldr	r3, [r3, #0]
 8000fcc:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000fd0:	603b      	str	r3, [r7, #0]
 8000fd2:	683b      	ldr	r3, [r7, #0]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000fd4:	2302      	movs	r3, #2
 8000fd6:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000fd8:	2301      	movs	r3, #1
 8000fda:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000fdc:	2310      	movs	r3, #16
 8000fde:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000fe0:	2302      	movs	r3, #2
 8000fe2:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000fe4:	2300      	movs	r3, #0
 8000fe6:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 16;
 8000fe8:	2310      	movs	r3, #16
 8000fea:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000fec:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8000ff0:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8000ff2:	2304      	movs	r3, #4
 8000ff4:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000ff6:	2302      	movs	r3, #2
 8000ff8:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000ffa:	2302      	movs	r3, #2
 8000ffc:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000ffe:	f107 031c 	add.w	r3, r7, #28
 8001002:	4618      	mov	r0, r3
 8001004:	f002 f8c6 	bl	8003194 <HAL_RCC_OscConfig>
 8001008:	4603      	mov	r3, r0
 800100a:	2b00      	cmp	r3, #0
 800100c:	d001      	beq.n	8001012 <SystemClock_Config+0x9e>
  {
    Error_Handler();
 800100e:	f000 f94b 	bl	80012a8 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001012:	230f      	movs	r3, #15
 8001014:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001016:	2302      	movs	r3, #2
 8001018:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800101a:	2300      	movs	r3, #0
 800101c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800101e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001022:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001024:	2300      	movs	r3, #0
 8001026:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001028:	f107 0308 	add.w	r3, r7, #8
 800102c:	2102      	movs	r1, #2
 800102e:	4618      	mov	r0, r3
 8001030:	f001 fdf6 	bl	8002c20 <HAL_RCC_ClockConfig>
 8001034:	4603      	mov	r3, r0
 8001036:	2b00      	cmp	r3, #0
 8001038:	d001      	beq.n	800103e <SystemClock_Config+0xca>
  {
    Error_Handler();
 800103a:	f000 f935 	bl	80012a8 <Error_Handler>
  }
}
 800103e:	bf00      	nop
 8001040:	3750      	adds	r7, #80	; 0x50
 8001042:	46bd      	mov	sp, r7
 8001044:	bd80      	pop	{r7, pc}
 8001046:	bf00      	nop
 8001048:	40023800 	.word	0x40023800
 800104c:	40007000 	.word	0x40007000

08001050 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001050:	b580      	push	{r7, lr}
 8001052:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion) 
  */
  hadc1.Instance = ADC1;
 8001054:	4b21      	ldr	r3, [pc, #132]	; (80010dc <MX_ADC1_Init+0x8c>)
 8001056:	4a22      	ldr	r2, [pc, #136]	; (80010e0 <MX_ADC1_Init+0x90>)
 8001058:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 800105a:	4b20      	ldr	r3, [pc, #128]	; (80010dc <MX_ADC1_Init+0x8c>)
 800105c:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001060:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001062:	4b1e      	ldr	r3, [pc, #120]	; (80010dc <MX_ADC1_Init+0x8c>)
 8001064:	2200      	movs	r2, #0
 8001066:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8001068:	4b1c      	ldr	r3, [pc, #112]	; (80010dc <MX_ADC1_Init+0x8c>)
 800106a:	2200      	movs	r2, #0
 800106c:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800106e:	4b1b      	ldr	r3, [pc, #108]	; (80010dc <MX_ADC1_Init+0x8c>)
 8001070:	2200      	movs	r2, #0
 8001072:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001074:	4b19      	ldr	r3, [pc, #100]	; (80010dc <MX_ADC1_Init+0x8c>)
 8001076:	2200      	movs	r2, #0
 8001078:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800107c:	4b17      	ldr	r3, [pc, #92]	; (80010dc <MX_ADC1_Init+0x8c>)
 800107e:	2200      	movs	r2, #0
 8001080:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001082:	4b16      	ldr	r3, [pc, #88]	; (80010dc <MX_ADC1_Init+0x8c>)
 8001084:	4a17      	ldr	r2, [pc, #92]	; (80010e4 <MX_ADC1_Init+0x94>)
 8001086:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001088:	4b14      	ldr	r3, [pc, #80]	; (80010dc <MX_ADC1_Init+0x8c>)
 800108a:	2200      	movs	r2, #0
 800108c:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 800108e:	4b13      	ldr	r3, [pc, #76]	; (80010dc <MX_ADC1_Init+0x8c>)
 8001090:	2201      	movs	r2, #1
 8001092:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8001094:	4b11      	ldr	r3, [pc, #68]	; (80010dc <MX_ADC1_Init+0x8c>)
 8001096:	2200      	movs	r2, #0
 8001098:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800109c:	4b0f      	ldr	r3, [pc, #60]	; (80010dc <MX_ADC1_Init+0x8c>)
 800109e:	2201      	movs	r2, #1
 80010a0:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80010a2:	480e      	ldr	r0, [pc, #56]	; (80010dc <MX_ADC1_Init+0x8c>)
 80010a4:	f000 fb94 	bl	80017d0 <HAL_ADC_Init>
 80010a8:	4603      	mov	r3, r0
 80010aa:	2b00      	cmp	r3, #0
 80010ac:	d001      	beq.n	80010b2 <MX_ADC1_Init+0x62>
  {
    Error_Handler();
 80010ae:	f000 f8fb 	bl	80012a8 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
  */
  sConfig.Channel = ADC_CHANNEL_0;
 80010b2:	4b0d      	ldr	r3, [pc, #52]	; (80010e8 <MX_ADC1_Init+0x98>)
 80010b4:	2200      	movs	r2, #0
 80010b6:	601a      	str	r2, [r3, #0]
  sConfig.Rank = 1;
 80010b8:	4b0b      	ldr	r3, [pc, #44]	; (80010e8 <MX_ADC1_Init+0x98>)
 80010ba:	2201      	movs	r2, #1
 80010bc:	605a      	str	r2, [r3, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80010be:	4b0a      	ldr	r3, [pc, #40]	; (80010e8 <MX_ADC1_Init+0x98>)
 80010c0:	2200      	movs	r2, #0
 80010c2:	609a      	str	r2, [r3, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80010c4:	4908      	ldr	r1, [pc, #32]	; (80010e8 <MX_ADC1_Init+0x98>)
 80010c6:	4805      	ldr	r0, [pc, #20]	; (80010dc <MX_ADC1_Init+0x8c>)
 80010c8:	f000 fd1e 	bl	8001b08 <HAL_ADC_ConfigChannel>
 80010cc:	4603      	mov	r3, r0
 80010ce:	2b00      	cmp	r3, #0
 80010d0:	d001      	beq.n	80010d6 <MX_ADC1_Init+0x86>
  {
    Error_Handler();
 80010d2:	f000 f8e9 	bl	80012a8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80010d6:	bf00      	nop
 80010d8:	bd80      	pop	{r7, pc}
 80010da:	bf00      	nop
 80010dc:	2000010c 	.word	0x2000010c
 80010e0:	40012000 	.word	0x40012000
 80010e4:	0f000001 	.word	0x0f000001
 80010e8:	2000008c 	.word	0x2000008c

080010ec <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80010ec:	b580      	push	{r7, lr}
 80010ee:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80010f0:	4b11      	ldr	r3, [pc, #68]	; (8001138 <MX_USART2_UART_Init+0x4c>)
 80010f2:	4a12      	ldr	r2, [pc, #72]	; (800113c <MX_USART2_UART_Init+0x50>)
 80010f4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80010f6:	4b10      	ldr	r3, [pc, #64]	; (8001138 <MX_USART2_UART_Init+0x4c>)
 80010f8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80010fc:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80010fe:	4b0e      	ldr	r3, [pc, #56]	; (8001138 <MX_USART2_UART_Init+0x4c>)
 8001100:	2200      	movs	r2, #0
 8001102:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001104:	4b0c      	ldr	r3, [pc, #48]	; (8001138 <MX_USART2_UART_Init+0x4c>)
 8001106:	2200      	movs	r2, #0
 8001108:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800110a:	4b0b      	ldr	r3, [pc, #44]	; (8001138 <MX_USART2_UART_Init+0x4c>)
 800110c:	2200      	movs	r2, #0
 800110e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001110:	4b09      	ldr	r3, [pc, #36]	; (8001138 <MX_USART2_UART_Init+0x4c>)
 8001112:	220c      	movs	r2, #12
 8001114:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001116:	4b08      	ldr	r3, [pc, #32]	; (8001138 <MX_USART2_UART_Init+0x4c>)
 8001118:	2200      	movs	r2, #0
 800111a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800111c:	4b06      	ldr	r3, [pc, #24]	; (8001138 <MX_USART2_UART_Init+0x4c>)
 800111e:	2200      	movs	r2, #0
 8001120:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001122:	4805      	ldr	r0, [pc, #20]	; (8001138 <MX_USART2_UART_Init+0x4c>)
 8001124:	f002 fa90 	bl	8003648 <HAL_UART_Init>
 8001128:	4603      	mov	r3, r0
 800112a:	2b00      	cmp	r3, #0
 800112c:	d001      	beq.n	8001132 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800112e:	f000 f8bb 	bl	80012a8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001132:	bf00      	nop
 8001134:	bd80      	pop	{r7, pc}
 8001136:	bf00      	nop
 8001138:	20000168 	.word	0x20000168
 800113c:	40004400 	.word	0x40004400

08001140 <MX_DMA_Init>:

/** 
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void) 
{
 8001140:	b580      	push	{r7, lr}
 8001142:	b082      	sub	sp, #8
 8001144:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001146:	2300      	movs	r3, #0
 8001148:	607b      	str	r3, [r7, #4]
 800114a:	4b0c      	ldr	r3, [pc, #48]	; (800117c <MX_DMA_Init+0x3c>)
 800114c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800114e:	4a0b      	ldr	r2, [pc, #44]	; (800117c <MX_DMA_Init+0x3c>)
 8001150:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001154:	6313      	str	r3, [r2, #48]	; 0x30
 8001156:	4b09      	ldr	r3, [pc, #36]	; (800117c <MX_DMA_Init+0x3c>)
 8001158:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800115a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800115e:	607b      	str	r3, [r7, #4]
 8001160:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 8001162:	2200      	movs	r2, #0
 8001164:	2100      	movs	r1, #0
 8001166:	2010      	movs	r0, #16
 8001168:	f000 ffd7 	bl	800211a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 800116c:	2010      	movs	r0, #16
 800116e:	f000 fff0 	bl	8002152 <HAL_NVIC_EnableIRQ>

}
 8001172:	bf00      	nop
 8001174:	3708      	adds	r7, #8
 8001176:	46bd      	mov	sp, r7
 8001178:	bd80      	pop	{r7, pc}
 800117a:	bf00      	nop
 800117c:	40023800 	.word	0x40023800

08001180 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001180:	b580      	push	{r7, lr}
 8001182:	b08a      	sub	sp, #40	; 0x28
 8001184:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001186:	f107 0314 	add.w	r3, r7, #20
 800118a:	2200      	movs	r2, #0
 800118c:	601a      	str	r2, [r3, #0]
 800118e:	605a      	str	r2, [r3, #4]
 8001190:	609a      	str	r2, [r3, #8]
 8001192:	60da      	str	r2, [r3, #12]
 8001194:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001196:	2300      	movs	r3, #0
 8001198:	613b      	str	r3, [r7, #16]
 800119a:	4b2d      	ldr	r3, [pc, #180]	; (8001250 <MX_GPIO_Init+0xd0>)
 800119c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800119e:	4a2c      	ldr	r2, [pc, #176]	; (8001250 <MX_GPIO_Init+0xd0>)
 80011a0:	f043 0304 	orr.w	r3, r3, #4
 80011a4:	6313      	str	r3, [r2, #48]	; 0x30
 80011a6:	4b2a      	ldr	r3, [pc, #168]	; (8001250 <MX_GPIO_Init+0xd0>)
 80011a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011aa:	f003 0304 	and.w	r3, r3, #4
 80011ae:	613b      	str	r3, [r7, #16]
 80011b0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80011b2:	2300      	movs	r3, #0
 80011b4:	60fb      	str	r3, [r7, #12]
 80011b6:	4b26      	ldr	r3, [pc, #152]	; (8001250 <MX_GPIO_Init+0xd0>)
 80011b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011ba:	4a25      	ldr	r2, [pc, #148]	; (8001250 <MX_GPIO_Init+0xd0>)
 80011bc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80011c0:	6313      	str	r3, [r2, #48]	; 0x30
 80011c2:	4b23      	ldr	r3, [pc, #140]	; (8001250 <MX_GPIO_Init+0xd0>)
 80011c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011c6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80011ca:	60fb      	str	r3, [r7, #12]
 80011cc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80011ce:	2300      	movs	r3, #0
 80011d0:	60bb      	str	r3, [r7, #8]
 80011d2:	4b1f      	ldr	r3, [pc, #124]	; (8001250 <MX_GPIO_Init+0xd0>)
 80011d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011d6:	4a1e      	ldr	r2, [pc, #120]	; (8001250 <MX_GPIO_Init+0xd0>)
 80011d8:	f043 0301 	orr.w	r3, r3, #1
 80011dc:	6313      	str	r3, [r2, #48]	; 0x30
 80011de:	4b1c      	ldr	r3, [pc, #112]	; (8001250 <MX_GPIO_Init+0xd0>)
 80011e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011e2:	f003 0301 	and.w	r3, r3, #1
 80011e6:	60bb      	str	r3, [r7, #8]
 80011e8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80011ea:	2300      	movs	r3, #0
 80011ec:	607b      	str	r3, [r7, #4]
 80011ee:	4b18      	ldr	r3, [pc, #96]	; (8001250 <MX_GPIO_Init+0xd0>)
 80011f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011f2:	4a17      	ldr	r2, [pc, #92]	; (8001250 <MX_GPIO_Init+0xd0>)
 80011f4:	f043 0302 	orr.w	r3, r3, #2
 80011f8:	6313      	str	r3, [r2, #48]	; 0x30
 80011fa:	4b15      	ldr	r3, [pc, #84]	; (8001250 <MX_GPIO_Init+0xd0>)
 80011fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011fe:	f003 0302 	and.w	r3, r3, #2
 8001202:	607b      	str	r3, [r7, #4]
 8001204:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8001206:	2200      	movs	r2, #0
 8001208:	2120      	movs	r1, #32
 800120a:	4812      	ldr	r0, [pc, #72]	; (8001254 <MX_GPIO_Init+0xd4>)
 800120c:	f001 fcd4 	bl	8002bb8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001210:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001214:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001216:	4b10      	ldr	r3, [pc, #64]	; (8001258 <MX_GPIO_Init+0xd8>)
 8001218:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800121a:	2300      	movs	r3, #0
 800121c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800121e:	f107 0314 	add.w	r3, r7, #20
 8001222:	4619      	mov	r1, r3
 8001224:	480d      	ldr	r0, [pc, #52]	; (800125c <MX_GPIO_Init+0xdc>)
 8001226:	f001 fb1d 	bl	8002864 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 800122a:	2320      	movs	r3, #32
 800122c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800122e:	2301      	movs	r3, #1
 8001230:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001232:	2300      	movs	r3, #0
 8001234:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001236:	2300      	movs	r3, #0
 8001238:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 800123a:	f107 0314 	add.w	r3, r7, #20
 800123e:	4619      	mov	r1, r3
 8001240:	4804      	ldr	r0, [pc, #16]	; (8001254 <MX_GPIO_Init+0xd4>)
 8001242:	f001 fb0f 	bl	8002864 <HAL_GPIO_Init>

}
 8001246:	bf00      	nop
 8001248:	3728      	adds	r7, #40	; 0x28
 800124a:	46bd      	mov	sp, r7
 800124c:	bd80      	pop	{r7, pc}
 800124e:	bf00      	nop
 8001250:	40023800 	.word	0x40023800
 8001254:	40020000 	.word	0x40020000
 8001258:	10210000 	.word	0x10210000
 800125c:	40020800 	.word	0x40020800

08001260 <__io_putchar>:
/* USER CODE BEGIN 4 */
/**
 * The below code is added to use printf functionality.
 */
PUTCHAR_PROTOTYPE
{
 8001260:	b580      	push	{r7, lr}
 8001262:	b082      	sub	sp, #8
 8001264:	af00      	add	r7, sp, #0
 8001266:	6078      	str	r0, [r7, #4]
  /* Place your implementation of fputc here */
  /* e.g. write a character to the EVAL_COM1 and Loop until the end of transmission */
  HAL_UART_Transmit(&huart2, (uint8_t *)&ch, 1, 0xFFFF);
 8001268:	1d39      	adds	r1, r7, #4
 800126a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800126e:	2201      	movs	r2, #1
 8001270:	4803      	ldr	r0, [pc, #12]	; (8001280 <__io_putchar+0x20>)
 8001272:	f002 fa36 	bl	80036e2 <HAL_UART_Transmit>

  return ch;
 8001276:	687b      	ldr	r3, [r7, #4]
}
 8001278:	4618      	mov	r0, r3
 800127a:	3708      	adds	r7, #8
 800127c:	46bd      	mov	sp, r7
 800127e:	bd80      	pop	{r7, pc}
 8001280:	20000168 	.word	0x20000168

08001284 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback (UART_HandleTypeDef *huart)
{
 8001284:	b580      	push	{r7, lr}
 8001286:	b082      	sub	sp, #8
 8001288:	af00      	add	r7, sp, #0
 800128a:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart2,RxBuffer,10,20);
 800128c:	2314      	movs	r3, #20
 800128e:	220a      	movs	r2, #10
 8001290:	4903      	ldr	r1, [pc, #12]	; (80012a0 <HAL_UART_RxCpltCallback+0x1c>)
 8001292:	4804      	ldr	r0, [pc, #16]	; (80012a4 <HAL_UART_RxCpltCallback+0x20>)
 8001294:	f002 fa25 	bl	80036e2 <HAL_UART_Transmit>
}
 8001298:	bf00      	nop
 800129a:	3708      	adds	r7, #8
 800129c:	46bd      	mov	sp, r7
 800129e:	bd80      	pop	{r7, pc}
 80012a0:	20000158 	.word	0x20000158
 80012a4:	20000168 	.word	0x20000168

080012a8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80012a8:	b480      	push	{r7}
 80012aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80012ac:	bf00      	nop
 80012ae:	46bd      	mov	sp, r7
 80012b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012b4:	4770      	bx	lr
	...

080012b8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80012b8:	b580      	push	{r7, lr}
 80012ba:	b082      	sub	sp, #8
 80012bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80012be:	2300      	movs	r3, #0
 80012c0:	607b      	str	r3, [r7, #4]
 80012c2:	4b10      	ldr	r3, [pc, #64]	; (8001304 <HAL_MspInit+0x4c>)
 80012c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012c6:	4a0f      	ldr	r2, [pc, #60]	; (8001304 <HAL_MspInit+0x4c>)
 80012c8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80012cc:	6453      	str	r3, [r2, #68]	; 0x44
 80012ce:	4b0d      	ldr	r3, [pc, #52]	; (8001304 <HAL_MspInit+0x4c>)
 80012d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012d2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80012d6:	607b      	str	r3, [r7, #4]
 80012d8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80012da:	2300      	movs	r3, #0
 80012dc:	603b      	str	r3, [r7, #0]
 80012de:	4b09      	ldr	r3, [pc, #36]	; (8001304 <HAL_MspInit+0x4c>)
 80012e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012e2:	4a08      	ldr	r2, [pc, #32]	; (8001304 <HAL_MspInit+0x4c>)
 80012e4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80012e8:	6413      	str	r3, [r2, #64]	; 0x40
 80012ea:	4b06      	ldr	r3, [pc, #24]	; (8001304 <HAL_MspInit+0x4c>)
 80012ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012ee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80012f2:	603b      	str	r3, [r7, #0]
 80012f4:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80012f6:	2007      	movs	r0, #7
 80012f8:	f000 ff04 	bl	8002104 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80012fc:	bf00      	nop
 80012fe:	3708      	adds	r7, #8
 8001300:	46bd      	mov	sp, r7
 8001302:	bd80      	pop	{r7, pc}
 8001304:	40023800 	.word	0x40023800

08001308 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001308:	b580      	push	{r7, lr}
 800130a:	b08a      	sub	sp, #40	; 0x28
 800130c:	af00      	add	r7, sp, #0
 800130e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001310:	f107 0314 	add.w	r3, r7, #20
 8001314:	2200      	movs	r2, #0
 8001316:	601a      	str	r2, [r3, #0]
 8001318:	605a      	str	r2, [r3, #4]
 800131a:	609a      	str	r2, [r3, #8]
 800131c:	60da      	str	r2, [r3, #12]
 800131e:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	681b      	ldr	r3, [r3, #0]
 8001324:	4a17      	ldr	r2, [pc, #92]	; (8001384 <HAL_ADC_MspInit+0x7c>)
 8001326:	4293      	cmp	r3, r2
 8001328:	d127      	bne.n	800137a <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800132a:	2300      	movs	r3, #0
 800132c:	613b      	str	r3, [r7, #16]
 800132e:	4b16      	ldr	r3, [pc, #88]	; (8001388 <HAL_ADC_MspInit+0x80>)
 8001330:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001332:	4a15      	ldr	r2, [pc, #84]	; (8001388 <HAL_ADC_MspInit+0x80>)
 8001334:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001338:	6453      	str	r3, [r2, #68]	; 0x44
 800133a:	4b13      	ldr	r3, [pc, #76]	; (8001388 <HAL_ADC_MspInit+0x80>)
 800133c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800133e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001342:	613b      	str	r3, [r7, #16]
 8001344:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001346:	2300      	movs	r3, #0
 8001348:	60fb      	str	r3, [r7, #12]
 800134a:	4b0f      	ldr	r3, [pc, #60]	; (8001388 <HAL_ADC_MspInit+0x80>)
 800134c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800134e:	4a0e      	ldr	r2, [pc, #56]	; (8001388 <HAL_ADC_MspInit+0x80>)
 8001350:	f043 0301 	orr.w	r3, r3, #1
 8001354:	6313      	str	r3, [r2, #48]	; 0x30
 8001356:	4b0c      	ldr	r3, [pc, #48]	; (8001388 <HAL_ADC_MspInit+0x80>)
 8001358:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800135a:	f003 0301 	and.w	r3, r3, #1
 800135e:	60fb      	str	r3, [r7, #12]
 8001360:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration    
    PA0-WKUP     ------> ADC1_IN0
    PA1     ------> ADC1_IN1 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001362:	2303      	movs	r3, #3
 8001364:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001366:	2303      	movs	r3, #3
 8001368:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800136a:	2300      	movs	r3, #0
 800136c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800136e:	f107 0314 	add.w	r3, r7, #20
 8001372:	4619      	mov	r1, r3
 8001374:	4805      	ldr	r0, [pc, #20]	; (800138c <HAL_ADC_MspInit+0x84>)
 8001376:	f001 fa75 	bl	8002864 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 800137a:	bf00      	nop
 800137c:	3728      	adds	r7, #40	; 0x28
 800137e:	46bd      	mov	sp, r7
 8001380:	bd80      	pop	{r7, pc}
 8001382:	bf00      	nop
 8001384:	40012000 	.word	0x40012000
 8001388:	40023800 	.word	0x40023800
 800138c:	40020000 	.word	0x40020000

08001390 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001390:	b580      	push	{r7, lr}
 8001392:	b08a      	sub	sp, #40	; 0x28
 8001394:	af00      	add	r7, sp, #0
 8001396:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001398:	f107 0314 	add.w	r3, r7, #20
 800139c:	2200      	movs	r2, #0
 800139e:	601a      	str	r2, [r3, #0]
 80013a0:	605a      	str	r2, [r3, #4]
 80013a2:	609a      	str	r2, [r3, #8]
 80013a4:	60da      	str	r2, [r3, #12]
 80013a6:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	681b      	ldr	r3, [r3, #0]
 80013ac:	4a30      	ldr	r2, [pc, #192]	; (8001470 <HAL_UART_MspInit+0xe0>)
 80013ae:	4293      	cmp	r3, r2
 80013b0:	d15a      	bne.n	8001468 <HAL_UART_MspInit+0xd8>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80013b2:	2300      	movs	r3, #0
 80013b4:	613b      	str	r3, [r7, #16]
 80013b6:	4b2f      	ldr	r3, [pc, #188]	; (8001474 <HAL_UART_MspInit+0xe4>)
 80013b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013ba:	4a2e      	ldr	r2, [pc, #184]	; (8001474 <HAL_UART_MspInit+0xe4>)
 80013bc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80013c0:	6413      	str	r3, [r2, #64]	; 0x40
 80013c2:	4b2c      	ldr	r3, [pc, #176]	; (8001474 <HAL_UART_MspInit+0xe4>)
 80013c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80013ca:	613b      	str	r3, [r7, #16]
 80013cc:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80013ce:	2300      	movs	r3, #0
 80013d0:	60fb      	str	r3, [r7, #12]
 80013d2:	4b28      	ldr	r3, [pc, #160]	; (8001474 <HAL_UART_MspInit+0xe4>)
 80013d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013d6:	4a27      	ldr	r2, [pc, #156]	; (8001474 <HAL_UART_MspInit+0xe4>)
 80013d8:	f043 0301 	orr.w	r3, r3, #1
 80013dc:	6313      	str	r3, [r2, #48]	; 0x30
 80013de:	4b25      	ldr	r3, [pc, #148]	; (8001474 <HAL_UART_MspInit+0xe4>)
 80013e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013e2:	f003 0301 	and.w	r3, r3, #1
 80013e6:	60fb      	str	r3, [r7, #12]
 80013e8:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration    
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX 
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80013ea:	230c      	movs	r3, #12
 80013ec:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013ee:	2302      	movs	r3, #2
 80013f0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013f2:	2300      	movs	r3, #0
 80013f4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80013f6:	2303      	movs	r3, #3
 80013f8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80013fa:	2307      	movs	r3, #7
 80013fc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013fe:	f107 0314 	add.w	r3, r7, #20
 8001402:	4619      	mov	r1, r3
 8001404:	481c      	ldr	r0, [pc, #112]	; (8001478 <HAL_UART_MspInit+0xe8>)
 8001406:	f001 fa2d 	bl	8002864 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Stream5;
 800140a:	4b1c      	ldr	r3, [pc, #112]	; (800147c <HAL_UART_MspInit+0xec>)
 800140c:	4a1c      	ldr	r2, [pc, #112]	; (8001480 <HAL_UART_MspInit+0xf0>)
 800140e:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Channel = DMA_CHANNEL_4;
 8001410:	4b1a      	ldr	r3, [pc, #104]	; (800147c <HAL_UART_MspInit+0xec>)
 8001412:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001416:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001418:	4b18      	ldr	r3, [pc, #96]	; (800147c <HAL_UART_MspInit+0xec>)
 800141a:	2200      	movs	r2, #0
 800141c:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800141e:	4b17      	ldr	r3, [pc, #92]	; (800147c <HAL_UART_MspInit+0xec>)
 8001420:	2200      	movs	r2, #0
 8001422:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001424:	4b15      	ldr	r3, [pc, #84]	; (800147c <HAL_UART_MspInit+0xec>)
 8001426:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800142a:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800142c:	4b13      	ldr	r3, [pc, #76]	; (800147c <HAL_UART_MspInit+0xec>)
 800142e:	2200      	movs	r2, #0
 8001430:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001432:	4b12      	ldr	r3, [pc, #72]	; (800147c <HAL_UART_MspInit+0xec>)
 8001434:	2200      	movs	r2, #0
 8001436:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_CIRCULAR;
 8001438:	4b10      	ldr	r3, [pc, #64]	; (800147c <HAL_UART_MspInit+0xec>)
 800143a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800143e:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001440:	4b0e      	ldr	r3, [pc, #56]	; (800147c <HAL_UART_MspInit+0xec>)
 8001442:	2200      	movs	r2, #0
 8001444:	621a      	str	r2, [r3, #32]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001446:	4b0d      	ldr	r3, [pc, #52]	; (800147c <HAL_UART_MspInit+0xec>)
 8001448:	2200      	movs	r2, #0
 800144a:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 800144c:	480b      	ldr	r0, [pc, #44]	; (800147c <HAL_UART_MspInit+0xec>)
 800144e:	f000 fe9b 	bl	8002188 <HAL_DMA_Init>
 8001452:	4603      	mov	r3, r0
 8001454:	2b00      	cmp	r3, #0
 8001456:	d001      	beq.n	800145c <HAL_UART_MspInit+0xcc>
    {
      Error_Handler();
 8001458:	f7ff ff26 	bl	80012a8 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	4a07      	ldr	r2, [pc, #28]	; (800147c <HAL_UART_MspInit+0xec>)
 8001460:	635a      	str	r2, [r3, #52]	; 0x34
 8001462:	4a06      	ldr	r2, [pc, #24]	; (800147c <HAL_UART_MspInit+0xec>)
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001468:	bf00      	nop
 800146a:	3728      	adds	r7, #40	; 0x28
 800146c:	46bd      	mov	sp, r7
 800146e:	bd80      	pop	{r7, pc}
 8001470:	40004400 	.word	0x40004400
 8001474:	40023800 	.word	0x40023800
 8001478:	40020000 	.word	0x40020000
 800147c:	200000a8 	.word	0x200000a8
 8001480:	40026088 	.word	0x40026088

08001484 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001484:	b480      	push	{r7}
 8001486:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8001488:	bf00      	nop
 800148a:	46bd      	mov	sp, r7
 800148c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001490:	4770      	bx	lr

08001492 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001492:	b480      	push	{r7}
 8001494:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001496:	e7fe      	b.n	8001496 <HardFault_Handler+0x4>

08001498 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001498:	b480      	push	{r7}
 800149a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800149c:	e7fe      	b.n	800149c <MemManage_Handler+0x4>

0800149e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800149e:	b480      	push	{r7}
 80014a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80014a2:	e7fe      	b.n	80014a2 <BusFault_Handler+0x4>

080014a4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80014a4:	b480      	push	{r7}
 80014a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80014a8:	e7fe      	b.n	80014a8 <UsageFault_Handler+0x4>

080014aa <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80014aa:	b480      	push	{r7}
 80014ac:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80014ae:	bf00      	nop
 80014b0:	46bd      	mov	sp, r7
 80014b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014b6:	4770      	bx	lr

080014b8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80014b8:	b480      	push	{r7}
 80014ba:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80014bc:	bf00      	nop
 80014be:	46bd      	mov	sp, r7
 80014c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014c4:	4770      	bx	lr

080014c6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80014c6:	b480      	push	{r7}
 80014c8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80014ca:	bf00      	nop
 80014cc:	46bd      	mov	sp, r7
 80014ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014d2:	4770      	bx	lr

080014d4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80014d4:	b580      	push	{r7, lr}
 80014d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80014d8:	f000 f938 	bl	800174c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80014dc:	bf00      	nop
 80014de:	bd80      	pop	{r7, pc}

080014e0 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 80014e0:	b580      	push	{r7, lr}
 80014e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 80014e4:	4802      	ldr	r0, [pc, #8]	; (80014f0 <DMA1_Stream5_IRQHandler+0x10>)
 80014e6:	f000 ff55 	bl	8002394 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 80014ea:	bf00      	nop
 80014ec:	bd80      	pop	{r7, pc}
 80014ee:	bf00      	nop
 80014f0:	200000a8 	.word	0x200000a8

080014f4 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80014f4:	b580      	push	{r7, lr}
 80014f6:	b086      	sub	sp, #24
 80014f8:	af00      	add	r7, sp, #0
 80014fa:	60f8      	str	r0, [r7, #12]
 80014fc:	60b9      	str	r1, [r7, #8]
 80014fe:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001500:	2300      	movs	r3, #0
 8001502:	617b      	str	r3, [r7, #20]
 8001504:	e00a      	b.n	800151c <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001506:	f3af 8000 	nop.w
 800150a:	4601      	mov	r1, r0
 800150c:	68bb      	ldr	r3, [r7, #8]
 800150e:	1c5a      	adds	r2, r3, #1
 8001510:	60ba      	str	r2, [r7, #8]
 8001512:	b2ca      	uxtb	r2, r1
 8001514:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001516:	697b      	ldr	r3, [r7, #20]
 8001518:	3301      	adds	r3, #1
 800151a:	617b      	str	r3, [r7, #20]
 800151c:	697a      	ldr	r2, [r7, #20]
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	429a      	cmp	r2, r3
 8001522:	dbf0      	blt.n	8001506 <_read+0x12>
	}

return len;
 8001524:	687b      	ldr	r3, [r7, #4]
}
 8001526:	4618      	mov	r0, r3
 8001528:	3718      	adds	r7, #24
 800152a:	46bd      	mov	sp, r7
 800152c:	bd80      	pop	{r7, pc}

0800152e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800152e:	b580      	push	{r7, lr}
 8001530:	b086      	sub	sp, #24
 8001532:	af00      	add	r7, sp, #0
 8001534:	60f8      	str	r0, [r7, #12]
 8001536:	60b9      	str	r1, [r7, #8]
 8001538:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800153a:	2300      	movs	r3, #0
 800153c:	617b      	str	r3, [r7, #20]
 800153e:	e009      	b.n	8001554 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001540:	68bb      	ldr	r3, [r7, #8]
 8001542:	1c5a      	adds	r2, r3, #1
 8001544:	60ba      	str	r2, [r7, #8]
 8001546:	781b      	ldrb	r3, [r3, #0]
 8001548:	4618      	mov	r0, r3
 800154a:	f7ff fe89 	bl	8001260 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800154e:	697b      	ldr	r3, [r7, #20]
 8001550:	3301      	adds	r3, #1
 8001552:	617b      	str	r3, [r7, #20]
 8001554:	697a      	ldr	r2, [r7, #20]
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	429a      	cmp	r2, r3
 800155a:	dbf1      	blt.n	8001540 <_write+0x12>
	}
	return len;
 800155c:	687b      	ldr	r3, [r7, #4]
}
 800155e:	4618      	mov	r0, r3
 8001560:	3718      	adds	r7, #24
 8001562:	46bd      	mov	sp, r7
 8001564:	bd80      	pop	{r7, pc}

08001566 <_close>:

int _close(int file)
{
 8001566:	b480      	push	{r7}
 8001568:	b083      	sub	sp, #12
 800156a:	af00      	add	r7, sp, #0
 800156c:	6078      	str	r0, [r7, #4]
	return -1;
 800156e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8001572:	4618      	mov	r0, r3
 8001574:	370c      	adds	r7, #12
 8001576:	46bd      	mov	sp, r7
 8001578:	f85d 7b04 	ldr.w	r7, [sp], #4
 800157c:	4770      	bx	lr

0800157e <_fstat>:


int _fstat(int file, struct stat *st)
{
 800157e:	b480      	push	{r7}
 8001580:	b083      	sub	sp, #12
 8001582:	af00      	add	r7, sp, #0
 8001584:	6078      	str	r0, [r7, #4]
 8001586:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001588:	683b      	ldr	r3, [r7, #0]
 800158a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800158e:	605a      	str	r2, [r3, #4]
	return 0;
 8001590:	2300      	movs	r3, #0
}
 8001592:	4618      	mov	r0, r3
 8001594:	370c      	adds	r7, #12
 8001596:	46bd      	mov	sp, r7
 8001598:	f85d 7b04 	ldr.w	r7, [sp], #4
 800159c:	4770      	bx	lr

0800159e <_isatty>:

int _isatty(int file)
{
 800159e:	b480      	push	{r7}
 80015a0:	b083      	sub	sp, #12
 80015a2:	af00      	add	r7, sp, #0
 80015a4:	6078      	str	r0, [r7, #4]
	return 1;
 80015a6:	2301      	movs	r3, #1
}
 80015a8:	4618      	mov	r0, r3
 80015aa:	370c      	adds	r7, #12
 80015ac:	46bd      	mov	sp, r7
 80015ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015b2:	4770      	bx	lr

080015b4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80015b4:	b480      	push	{r7}
 80015b6:	b085      	sub	sp, #20
 80015b8:	af00      	add	r7, sp, #0
 80015ba:	60f8      	str	r0, [r7, #12]
 80015bc:	60b9      	str	r1, [r7, #8]
 80015be:	607a      	str	r2, [r7, #4]
	return 0;
 80015c0:	2300      	movs	r3, #0
}
 80015c2:	4618      	mov	r0, r3
 80015c4:	3714      	adds	r7, #20
 80015c6:	46bd      	mov	sp, r7
 80015c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015cc:	4770      	bx	lr
	...

080015d0 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 80015d0:	b580      	push	{r7, lr}
 80015d2:	b084      	sub	sp, #16
 80015d4:	af00      	add	r7, sp, #0
 80015d6:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 80015d8:	4b11      	ldr	r3, [pc, #68]	; (8001620 <_sbrk+0x50>)
 80015da:	681b      	ldr	r3, [r3, #0]
 80015dc:	2b00      	cmp	r3, #0
 80015de:	d102      	bne.n	80015e6 <_sbrk+0x16>
		heap_end = &end;
 80015e0:	4b0f      	ldr	r3, [pc, #60]	; (8001620 <_sbrk+0x50>)
 80015e2:	4a10      	ldr	r2, [pc, #64]	; (8001624 <_sbrk+0x54>)
 80015e4:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 80015e6:	4b0e      	ldr	r3, [pc, #56]	; (8001620 <_sbrk+0x50>)
 80015e8:	681b      	ldr	r3, [r3, #0]
 80015ea:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 80015ec:	4b0c      	ldr	r3, [pc, #48]	; (8001620 <_sbrk+0x50>)
 80015ee:	681a      	ldr	r2, [r3, #0]
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	4413      	add	r3, r2
 80015f4:	466a      	mov	r2, sp
 80015f6:	4293      	cmp	r3, r2
 80015f8:	d907      	bls.n	800160a <_sbrk+0x3a>
	{
		errno = ENOMEM;
 80015fa:	f002 fe25 	bl	8004248 <__errno>
 80015fe:	4602      	mov	r2, r0
 8001600:	230c      	movs	r3, #12
 8001602:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8001604:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001608:	e006      	b.n	8001618 <_sbrk+0x48>
	}

	heap_end += incr;
 800160a:	4b05      	ldr	r3, [pc, #20]	; (8001620 <_sbrk+0x50>)
 800160c:	681a      	ldr	r2, [r3, #0]
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	4413      	add	r3, r2
 8001612:	4a03      	ldr	r2, [pc, #12]	; (8001620 <_sbrk+0x50>)
 8001614:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8001616:	68fb      	ldr	r3, [r7, #12]
}
 8001618:	4618      	mov	r0, r3
 800161a:	3710      	adds	r7, #16
 800161c:	46bd      	mov	sp, r7
 800161e:	bd80      	pop	{r7, pc}
 8001620:	2000009c 	.word	0x2000009c
 8001624:	200001b8 	.word	0x200001b8

08001628 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001628:	b480      	push	{r7}
 800162a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800162c:	4b08      	ldr	r3, [pc, #32]	; (8001650 <SystemInit+0x28>)
 800162e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001632:	4a07      	ldr	r2, [pc, #28]	; (8001650 <SystemInit+0x28>)
 8001634:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001638:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800163c:	4b04      	ldr	r3, [pc, #16]	; (8001650 <SystemInit+0x28>)
 800163e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001642:	609a      	str	r2, [r3, #8]
#endif
}
 8001644:	bf00      	nop
 8001646:	46bd      	mov	sp, r7
 8001648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800164c:	4770      	bx	lr
 800164e:	bf00      	nop
 8001650:	e000ed00 	.word	0xe000ed00

08001654 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001654:	f8df d034 	ldr.w	sp, [pc, #52]	; 800168c <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8001658:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800165a:	e003      	b.n	8001664 <LoopCopyDataInit>

0800165c <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 800165c:	4b0c      	ldr	r3, [pc, #48]	; (8001690 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800165e:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8001660:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8001662:	3104      	adds	r1, #4

08001664 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8001664:	480b      	ldr	r0, [pc, #44]	; (8001694 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8001666:	4b0c      	ldr	r3, [pc, #48]	; (8001698 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8001668:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800166a:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 800166c:	d3f6      	bcc.n	800165c <CopyDataInit>
  ldr  r2, =_sbss
 800166e:	4a0b      	ldr	r2, [pc, #44]	; (800169c <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8001670:	e002      	b.n	8001678 <LoopFillZerobss>

08001672 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8001672:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8001674:	f842 3b04 	str.w	r3, [r2], #4

08001678 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8001678:	4b09      	ldr	r3, [pc, #36]	; (80016a0 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 800167a:	429a      	cmp	r2, r3
  bcc  FillZerobss
 800167c:	d3f9      	bcc.n	8001672 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800167e:	f7ff ffd3 	bl	8001628 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001682:	f002 fde7 	bl	8004254 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001686:	f7ff fbb3 	bl	8000df0 <main>
  bx  lr    
 800168a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800168c:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8001690:	0800516c 	.word	0x0800516c
  ldr  r0, =_sdata
 8001694:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8001698:	20000070 	.word	0x20000070
  ldr  r2, =_sbss
 800169c:	20000070 	.word	0x20000070
  ldr  r3, = _ebss
 80016a0:	200001b4 	.word	0x200001b4

080016a4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80016a4:	e7fe      	b.n	80016a4 <ADC_IRQHandler>
	...

080016a8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80016a8:	b580      	push	{r7, lr}
 80016aa:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80016ac:	4b0e      	ldr	r3, [pc, #56]	; (80016e8 <HAL_Init+0x40>)
 80016ae:	681b      	ldr	r3, [r3, #0]
 80016b0:	4a0d      	ldr	r2, [pc, #52]	; (80016e8 <HAL_Init+0x40>)
 80016b2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80016b6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80016b8:	4b0b      	ldr	r3, [pc, #44]	; (80016e8 <HAL_Init+0x40>)
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	4a0a      	ldr	r2, [pc, #40]	; (80016e8 <HAL_Init+0x40>)
 80016be:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80016c2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80016c4:	4b08      	ldr	r3, [pc, #32]	; (80016e8 <HAL_Init+0x40>)
 80016c6:	681b      	ldr	r3, [r3, #0]
 80016c8:	4a07      	ldr	r2, [pc, #28]	; (80016e8 <HAL_Init+0x40>)
 80016ca:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80016ce:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80016d0:	2003      	movs	r0, #3
 80016d2:	f000 fd17 	bl	8002104 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80016d6:	2000      	movs	r0, #0
 80016d8:	f000 f808 	bl	80016ec <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80016dc:	f7ff fdec 	bl	80012b8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80016e0:	2300      	movs	r3, #0
}
 80016e2:	4618      	mov	r0, r3
 80016e4:	bd80      	pop	{r7, pc}
 80016e6:	bf00      	nop
 80016e8:	40023c00 	.word	0x40023c00

080016ec <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80016ec:	b580      	push	{r7, lr}
 80016ee:	b082      	sub	sp, #8
 80016f0:	af00      	add	r7, sp, #0
 80016f2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80016f4:	4b12      	ldr	r3, [pc, #72]	; (8001740 <HAL_InitTick+0x54>)
 80016f6:	681a      	ldr	r2, [r3, #0]
 80016f8:	4b12      	ldr	r3, [pc, #72]	; (8001744 <HAL_InitTick+0x58>)
 80016fa:	781b      	ldrb	r3, [r3, #0]
 80016fc:	4619      	mov	r1, r3
 80016fe:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001702:	fbb3 f3f1 	udiv	r3, r3, r1
 8001706:	fbb2 f3f3 	udiv	r3, r2, r3
 800170a:	4618      	mov	r0, r3
 800170c:	f000 fd2f 	bl	800216e <HAL_SYSTICK_Config>
 8001710:	4603      	mov	r3, r0
 8001712:	2b00      	cmp	r3, #0
 8001714:	d001      	beq.n	800171a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001716:	2301      	movs	r3, #1
 8001718:	e00e      	b.n	8001738 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	2b0f      	cmp	r3, #15
 800171e:	d80a      	bhi.n	8001736 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001720:	2200      	movs	r2, #0
 8001722:	6879      	ldr	r1, [r7, #4]
 8001724:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001728:	f000 fcf7 	bl	800211a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800172c:	4a06      	ldr	r2, [pc, #24]	; (8001748 <HAL_InitTick+0x5c>)
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001732:	2300      	movs	r3, #0
 8001734:	e000      	b.n	8001738 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001736:	2301      	movs	r3, #1
}
 8001738:	4618      	mov	r0, r3
 800173a:	3708      	adds	r7, #8
 800173c:	46bd      	mov	sp, r7
 800173e:	bd80      	pop	{r7, pc}
 8001740:	20000000 	.word	0x20000000
 8001744:	20000008 	.word	0x20000008
 8001748:	20000004 	.word	0x20000004

0800174c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800174c:	b480      	push	{r7}
 800174e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001750:	4b06      	ldr	r3, [pc, #24]	; (800176c <HAL_IncTick+0x20>)
 8001752:	781b      	ldrb	r3, [r3, #0]
 8001754:	461a      	mov	r2, r3
 8001756:	4b06      	ldr	r3, [pc, #24]	; (8001770 <HAL_IncTick+0x24>)
 8001758:	681b      	ldr	r3, [r3, #0]
 800175a:	4413      	add	r3, r2
 800175c:	4a04      	ldr	r2, [pc, #16]	; (8001770 <HAL_IncTick+0x24>)
 800175e:	6013      	str	r3, [r2, #0]
}
 8001760:	bf00      	nop
 8001762:	46bd      	mov	sp, r7
 8001764:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001768:	4770      	bx	lr
 800176a:	bf00      	nop
 800176c:	20000008 	.word	0x20000008
 8001770:	200001ac 	.word	0x200001ac

08001774 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001774:	b480      	push	{r7}
 8001776:	af00      	add	r7, sp, #0
  return uwTick;
 8001778:	4b03      	ldr	r3, [pc, #12]	; (8001788 <HAL_GetTick+0x14>)
 800177a:	681b      	ldr	r3, [r3, #0]
}
 800177c:	4618      	mov	r0, r3
 800177e:	46bd      	mov	sp, r7
 8001780:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001784:	4770      	bx	lr
 8001786:	bf00      	nop
 8001788:	200001ac 	.word	0x200001ac

0800178c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800178c:	b580      	push	{r7, lr}
 800178e:	b084      	sub	sp, #16
 8001790:	af00      	add	r7, sp, #0
 8001792:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001794:	f7ff ffee 	bl	8001774 <HAL_GetTick>
 8001798:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800179e:	68fb      	ldr	r3, [r7, #12]
 80017a0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80017a4:	d005      	beq.n	80017b2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80017a6:	4b09      	ldr	r3, [pc, #36]	; (80017cc <HAL_Delay+0x40>)
 80017a8:	781b      	ldrb	r3, [r3, #0]
 80017aa:	461a      	mov	r2, r3
 80017ac:	68fb      	ldr	r3, [r7, #12]
 80017ae:	4413      	add	r3, r2
 80017b0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80017b2:	bf00      	nop
 80017b4:	f7ff ffde 	bl	8001774 <HAL_GetTick>
 80017b8:	4602      	mov	r2, r0
 80017ba:	68bb      	ldr	r3, [r7, #8]
 80017bc:	1ad3      	subs	r3, r2, r3
 80017be:	68fa      	ldr	r2, [r7, #12]
 80017c0:	429a      	cmp	r2, r3
 80017c2:	d8f7      	bhi.n	80017b4 <HAL_Delay+0x28>
  {
  }
}
 80017c4:	bf00      	nop
 80017c6:	3710      	adds	r7, #16
 80017c8:	46bd      	mov	sp, r7
 80017ca:	bd80      	pop	{r7, pc}
 80017cc:	20000008 	.word	0x20000008

080017d0 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80017d0:	b580      	push	{r7, lr}
 80017d2:	b084      	sub	sp, #16
 80017d4:	af00      	add	r7, sp, #0
 80017d6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80017d8:	2300      	movs	r3, #0
 80017da:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	2b00      	cmp	r3, #0
 80017e0:	d101      	bne.n	80017e6 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80017e2:	2301      	movs	r3, #1
 80017e4:	e033      	b.n	800184e <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017ea:	2b00      	cmp	r3, #0
 80017ec:	d109      	bne.n	8001802 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80017ee:	6878      	ldr	r0, [r7, #4]
 80017f0:	f7ff fd8a 	bl	8001308 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	2200      	movs	r2, #0
 80017f8:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	2200      	movs	r2, #0
 80017fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001806:	f003 0310 	and.w	r3, r3, #16
 800180a:	2b00      	cmp	r3, #0
 800180c:	d118      	bne.n	8001840 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001812:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001816:	f023 0302 	bic.w	r3, r3, #2
 800181a:	f043 0202 	orr.w	r2, r3, #2
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8001822:	6878      	ldr	r0, [r7, #4]
 8001824:	f000 faa2 	bl	8001d6c <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	2200      	movs	r2, #0
 800182c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001832:	f023 0303 	bic.w	r3, r3, #3
 8001836:	f043 0201 	orr.w	r2, r3, #1
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	641a      	str	r2, [r3, #64]	; 0x40
 800183e:	e001      	b.n	8001844 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001840:	2301      	movs	r3, #1
 8001842:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	2200      	movs	r2, #0
 8001848:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 800184c:	7bfb      	ldrb	r3, [r7, #15]
}
 800184e:	4618      	mov	r0, r3
 8001850:	3710      	adds	r7, #16
 8001852:	46bd      	mov	sp, r7
 8001854:	bd80      	pop	{r7, pc}
	...

08001858 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8001858:	b480      	push	{r7}
 800185a:	b085      	sub	sp, #20
 800185c:	af00      	add	r7, sp, #0
 800185e:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8001860:	2300      	movs	r3, #0
 8001862:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800186a:	2b01      	cmp	r3, #1
 800186c:	d101      	bne.n	8001872 <HAL_ADC_Start+0x1a>
 800186e:	2302      	movs	r3, #2
 8001870:	e0a5      	b.n	80019be <HAL_ADC_Start+0x166>
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	2201      	movs	r2, #1
 8001876:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	681b      	ldr	r3, [r3, #0]
 800187e:	689b      	ldr	r3, [r3, #8]
 8001880:	f003 0301 	and.w	r3, r3, #1
 8001884:	2b01      	cmp	r3, #1
 8001886:	d018      	beq.n	80018ba <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	681b      	ldr	r3, [r3, #0]
 800188c:	689a      	ldr	r2, [r3, #8]
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	681b      	ldr	r3, [r3, #0]
 8001892:	f042 0201 	orr.w	r2, r2, #1
 8001896:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001898:	4b4c      	ldr	r3, [pc, #304]	; (80019cc <HAL_ADC_Start+0x174>)
 800189a:	681b      	ldr	r3, [r3, #0]
 800189c:	4a4c      	ldr	r2, [pc, #304]	; (80019d0 <HAL_ADC_Start+0x178>)
 800189e:	fba2 2303 	umull	r2, r3, r2, r3
 80018a2:	0c9a      	lsrs	r2, r3, #18
 80018a4:	4613      	mov	r3, r2
 80018a6:	005b      	lsls	r3, r3, #1
 80018a8:	4413      	add	r3, r2
 80018aa:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 80018ac:	e002      	b.n	80018b4 <HAL_ADC_Start+0x5c>
    {
      counter--;
 80018ae:	68bb      	ldr	r3, [r7, #8]
 80018b0:	3b01      	subs	r3, #1
 80018b2:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 80018b4:	68bb      	ldr	r3, [r7, #8]
 80018b6:	2b00      	cmp	r3, #0
 80018b8:	d1f9      	bne.n	80018ae <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	681b      	ldr	r3, [r3, #0]
 80018be:	689b      	ldr	r3, [r3, #8]
 80018c0:	f003 0301 	and.w	r3, r3, #1
 80018c4:	2b01      	cmp	r3, #1
 80018c6:	d179      	bne.n	80019bc <HAL_ADC_Start+0x164>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018cc:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80018d0:	f023 0301 	bic.w	r3, r3, #1
 80018d4:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	685b      	ldr	r3, [r3, #4]
 80018e2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80018e6:	2b00      	cmp	r3, #0
 80018e8:	d007      	beq.n	80018fa <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018ee:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80018f2:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018fe:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001902:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001906:	d106      	bne.n	8001916 <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800190c:	f023 0206 	bic.w	r2, r3, #6
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	645a      	str	r2, [r3, #68]	; 0x44
 8001914:	e002      	b.n	800191c <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	2200      	movs	r2, #0
 800191a:	645a      	str	r2, [r3, #68]	; 0x44
    } 

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	2200      	movs	r2, #0
 8001920:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001924:	4b2b      	ldr	r3, [pc, #172]	; (80019d4 <HAL_ADC_Start+0x17c>)
 8001926:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8001930:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8001932:	68fb      	ldr	r3, [r7, #12]
 8001934:	685b      	ldr	r3, [r3, #4]
 8001936:	f003 031f 	and.w	r3, r3, #31
 800193a:	2b00      	cmp	r3, #0
 800193c:	d12a      	bne.n	8001994 <HAL_ADC_Start+0x13c>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	4a25      	ldr	r2, [pc, #148]	; (80019d8 <HAL_ADC_Start+0x180>)
 8001944:	4293      	cmp	r3, r2
 8001946:	d015      	beq.n	8001974 <HAL_ADC_Start+0x11c>
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	4a23      	ldr	r2, [pc, #140]	; (80019dc <HAL_ADC_Start+0x184>)
 800194e:	4293      	cmp	r3, r2
 8001950:	d105      	bne.n	800195e <HAL_ADC_Start+0x106>
 8001952:	4b20      	ldr	r3, [pc, #128]	; (80019d4 <HAL_ADC_Start+0x17c>)
 8001954:	685b      	ldr	r3, [r3, #4]
 8001956:	f003 031f 	and.w	r3, r3, #31
 800195a:	2b00      	cmp	r3, #0
 800195c:	d00a      	beq.n	8001974 <HAL_ADC_Start+0x11c>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	4a1f      	ldr	r2, [pc, #124]	; (80019e0 <HAL_ADC_Start+0x188>)
 8001964:	4293      	cmp	r3, r2
 8001966:	d129      	bne.n	80019bc <HAL_ADC_Start+0x164>
 8001968:	4b1a      	ldr	r3, [pc, #104]	; (80019d4 <HAL_ADC_Start+0x17c>)
 800196a:	685b      	ldr	r3, [r3, #4]
 800196c:	f003 031f 	and.w	r3, r3, #31
 8001970:	2b0f      	cmp	r3, #15
 8001972:	d823      	bhi.n	80019bc <HAL_ADC_Start+0x164>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	681b      	ldr	r3, [r3, #0]
 8001978:	689b      	ldr	r3, [r3, #8]
 800197a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800197e:	2b00      	cmp	r3, #0
 8001980:	d11c      	bne.n	80019bc <HAL_ADC_Start+0x164>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	681b      	ldr	r3, [r3, #0]
 8001986:	689a      	ldr	r2, [r3, #8]
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001990:	609a      	str	r2, [r3, #8]
 8001992:	e013      	b.n	80019bc <HAL_ADC_Start+0x164>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	4a0f      	ldr	r2, [pc, #60]	; (80019d8 <HAL_ADC_Start+0x180>)
 800199a:	4293      	cmp	r3, r2
 800199c:	d10e      	bne.n	80019bc <HAL_ADC_Start+0x164>
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	681b      	ldr	r3, [r3, #0]
 80019a2:	689b      	ldr	r3, [r3, #8]
 80019a4:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80019a8:	2b00      	cmp	r3, #0
 80019aa:	d107      	bne.n	80019bc <HAL_ADC_Start+0x164>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	689a      	ldr	r2, [r3, #8]
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80019ba:	609a      	str	r2, [r3, #8]
      }
    }
  }
  
  /* Return function status */
  return HAL_OK;
 80019bc:	2300      	movs	r3, #0
}
 80019be:	4618      	mov	r0, r3
 80019c0:	3714      	adds	r7, #20
 80019c2:	46bd      	mov	sp, r7
 80019c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019c8:	4770      	bx	lr
 80019ca:	bf00      	nop
 80019cc:	20000000 	.word	0x20000000
 80019d0:	431bde83 	.word	0x431bde83
 80019d4:	40012300 	.word	0x40012300
 80019d8:	40012000 	.word	0x40012000
 80019dc:	40012100 	.word	0x40012100
 80019e0:	40012200 	.word	0x40012200

080019e4 <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 80019e4:	b580      	push	{r7, lr}
 80019e6:	b084      	sub	sp, #16
 80019e8:	af00      	add	r7, sp, #0
 80019ea:	6078      	str	r0, [r7, #4]
 80019ec:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 80019ee:	2300      	movs	r3, #0
 80019f0:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	689b      	ldr	r3, [r3, #8]
 80019f8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80019fc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001a00:	d113      	bne.n	8001a2a <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	681b      	ldr	r3, [r3, #0]
 8001a06:	689b      	ldr	r3, [r3, #8]
 8001a08:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8001a0c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001a10:	d10b      	bne.n	8001a2a <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a16:	f043 0220 	orr.w	r2, r3, #32
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	2200      	movs	r2, #0
 8001a22:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    return HAL_ERROR;
 8001a26:	2301      	movs	r3, #1
 8001a28:	e05c      	b.n	8001ae4 <HAL_ADC_PollForConversion+0x100>
  }

  /* Get tick */ 
  tickstart = HAL_GetTick();
 8001a2a:	f7ff fea3 	bl	8001774 <HAL_GetTick>
 8001a2e:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8001a30:	e01a      	b.n	8001a68 <HAL_ADC_PollForConversion+0x84>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 8001a32:	683b      	ldr	r3, [r7, #0]
 8001a34:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001a38:	d016      	beq.n	8001a68 <HAL_ADC_PollForConversion+0x84>
    {
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 8001a3a:	683b      	ldr	r3, [r7, #0]
 8001a3c:	2b00      	cmp	r3, #0
 8001a3e:	d007      	beq.n	8001a50 <HAL_ADC_PollForConversion+0x6c>
 8001a40:	f7ff fe98 	bl	8001774 <HAL_GetTick>
 8001a44:	4602      	mov	r2, r0
 8001a46:	68fb      	ldr	r3, [r7, #12]
 8001a48:	1ad3      	subs	r3, r2, r3
 8001a4a:	683a      	ldr	r2, [r7, #0]
 8001a4c:	429a      	cmp	r2, r3
 8001a4e:	d20b      	bcs.n	8001a68 <HAL_ADC_PollForConversion+0x84>
      {
        /* Update ADC state machine to timeout */
        SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a54:	f043 0204 	orr.w	r2, r3, #4
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	2200      	movs	r2, #0
 8001a60:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        
        return HAL_TIMEOUT;
 8001a64:	2303      	movs	r3, #3
 8001a66:	e03d      	b.n	8001ae4 <HAL_ADC_PollForConversion+0x100>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	681b      	ldr	r3, [r3, #0]
 8001a6e:	f003 0302 	and.w	r3, r3, #2
 8001a72:	2b02      	cmp	r3, #2
 8001a74:	d1dd      	bne.n	8001a32 <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	f06f 0212 	mvn.w	r2, #18
 8001a7e:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a84:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	641a      	str	r2, [r3, #64]	; 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	689b      	ldr	r3, [r3, #8]
 8001a92:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001a96:	2b00      	cmp	r3, #0
 8001a98:	d123      	bne.n	8001ae2 <HAL_ADC_PollForConversion+0xfe>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	7e1b      	ldrb	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001a9e:	2b00      	cmp	r3, #0
 8001aa0:	d11f      	bne.n	8001ae2 <HAL_ADC_PollForConversion+0xfe>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001aa8:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001aac:	2b00      	cmp	r3, #0
 8001aae:	d006      	beq.n	8001abe <HAL_ADC_PollForConversion+0xda>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	689b      	ldr	r3, [r3, #8]
 8001ab6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8001aba:	2b00      	cmp	r3, #0
 8001abc:	d111      	bne.n	8001ae2 <HAL_ADC_PollForConversion+0xfe>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ac2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	641a      	str	r2, [r3, #64]	; 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ace:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001ad2:	2b00      	cmp	r3, #0
 8001ad4:	d105      	bne.n	8001ae2 <HAL_ADC_PollForConversion+0xfe>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ada:	f043 0201 	orr.w	r2, r3, #1
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8001ae2:	2300      	movs	r3, #0
}
 8001ae4:	4618      	mov	r0, r3
 8001ae6:	3710      	adds	r7, #16
 8001ae8:	46bd      	mov	sp, r7
 8001aea:	bd80      	pop	{r7, pc}

08001aec <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 8001aec:	b480      	push	{r7}
 8001aee:	b083      	sub	sp, #12
 8001af0:	af00      	add	r7, sp, #0
 8001af2:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8001afa:	4618      	mov	r0, r3
 8001afc:	370c      	adds	r7, #12
 8001afe:	46bd      	mov	sp, r7
 8001b00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b04:	4770      	bx	lr
	...

08001b08 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8001b08:	b480      	push	{r7}
 8001b0a:	b085      	sub	sp, #20
 8001b0c:	af00      	add	r7, sp, #0
 8001b0e:	6078      	str	r0, [r7, #4]
 8001b10:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8001b12:	2300      	movs	r3, #0
 8001b14:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001b1c:	2b01      	cmp	r3, #1
 8001b1e:	d101      	bne.n	8001b24 <HAL_ADC_ConfigChannel+0x1c>
 8001b20:	2302      	movs	r3, #2
 8001b22:	e113      	b.n	8001d4c <HAL_ADC_ConfigChannel+0x244>
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	2201      	movs	r2, #1
 8001b28:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8001b2c:	683b      	ldr	r3, [r7, #0]
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	2b09      	cmp	r3, #9
 8001b32:	d925      	bls.n	8001b80 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	68d9      	ldr	r1, [r3, #12]
 8001b3a:	683b      	ldr	r3, [r7, #0]
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	b29b      	uxth	r3, r3
 8001b40:	461a      	mov	r2, r3
 8001b42:	4613      	mov	r3, r2
 8001b44:	005b      	lsls	r3, r3, #1
 8001b46:	4413      	add	r3, r2
 8001b48:	3b1e      	subs	r3, #30
 8001b4a:	2207      	movs	r2, #7
 8001b4c:	fa02 f303 	lsl.w	r3, r2, r3
 8001b50:	43da      	mvns	r2, r3
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	400a      	ands	r2, r1
 8001b58:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	68d9      	ldr	r1, [r3, #12]
 8001b60:	683b      	ldr	r3, [r7, #0]
 8001b62:	689a      	ldr	r2, [r3, #8]
 8001b64:	683b      	ldr	r3, [r7, #0]
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	b29b      	uxth	r3, r3
 8001b6a:	4618      	mov	r0, r3
 8001b6c:	4603      	mov	r3, r0
 8001b6e:	005b      	lsls	r3, r3, #1
 8001b70:	4403      	add	r3, r0
 8001b72:	3b1e      	subs	r3, #30
 8001b74:	409a      	lsls	r2, r3
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	430a      	orrs	r2, r1
 8001b7c:	60da      	str	r2, [r3, #12]
 8001b7e:	e022      	b.n	8001bc6 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	6919      	ldr	r1, [r3, #16]
 8001b86:	683b      	ldr	r3, [r7, #0]
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	b29b      	uxth	r3, r3
 8001b8c:	461a      	mov	r2, r3
 8001b8e:	4613      	mov	r3, r2
 8001b90:	005b      	lsls	r3, r3, #1
 8001b92:	4413      	add	r3, r2
 8001b94:	2207      	movs	r2, #7
 8001b96:	fa02 f303 	lsl.w	r3, r2, r3
 8001b9a:	43da      	mvns	r2, r3
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	400a      	ands	r2, r1
 8001ba2:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	6919      	ldr	r1, [r3, #16]
 8001baa:	683b      	ldr	r3, [r7, #0]
 8001bac:	689a      	ldr	r2, [r3, #8]
 8001bae:	683b      	ldr	r3, [r7, #0]
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	b29b      	uxth	r3, r3
 8001bb4:	4618      	mov	r0, r3
 8001bb6:	4603      	mov	r3, r0
 8001bb8:	005b      	lsls	r3, r3, #1
 8001bba:	4403      	add	r3, r0
 8001bbc:	409a      	lsls	r2, r3
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	430a      	orrs	r2, r1
 8001bc4:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001bc6:	683b      	ldr	r3, [r7, #0]
 8001bc8:	685b      	ldr	r3, [r3, #4]
 8001bca:	2b06      	cmp	r3, #6
 8001bcc:	d824      	bhi.n	8001c18 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001bd4:	683b      	ldr	r3, [r7, #0]
 8001bd6:	685a      	ldr	r2, [r3, #4]
 8001bd8:	4613      	mov	r3, r2
 8001bda:	009b      	lsls	r3, r3, #2
 8001bdc:	4413      	add	r3, r2
 8001bde:	3b05      	subs	r3, #5
 8001be0:	221f      	movs	r2, #31
 8001be2:	fa02 f303 	lsl.w	r3, r2, r3
 8001be6:	43da      	mvns	r2, r3
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	400a      	ands	r2, r1
 8001bee:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001bf6:	683b      	ldr	r3, [r7, #0]
 8001bf8:	681b      	ldr	r3, [r3, #0]
 8001bfa:	b29b      	uxth	r3, r3
 8001bfc:	4618      	mov	r0, r3
 8001bfe:	683b      	ldr	r3, [r7, #0]
 8001c00:	685a      	ldr	r2, [r3, #4]
 8001c02:	4613      	mov	r3, r2
 8001c04:	009b      	lsls	r3, r3, #2
 8001c06:	4413      	add	r3, r2
 8001c08:	3b05      	subs	r3, #5
 8001c0a:	fa00 f203 	lsl.w	r2, r0, r3
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	430a      	orrs	r2, r1
 8001c14:	635a      	str	r2, [r3, #52]	; 0x34
 8001c16:	e04c      	b.n	8001cb2 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001c18:	683b      	ldr	r3, [r7, #0]
 8001c1a:	685b      	ldr	r3, [r3, #4]
 8001c1c:	2b0c      	cmp	r3, #12
 8001c1e:	d824      	bhi.n	8001c6a <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001c26:	683b      	ldr	r3, [r7, #0]
 8001c28:	685a      	ldr	r2, [r3, #4]
 8001c2a:	4613      	mov	r3, r2
 8001c2c:	009b      	lsls	r3, r3, #2
 8001c2e:	4413      	add	r3, r2
 8001c30:	3b23      	subs	r3, #35	; 0x23
 8001c32:	221f      	movs	r2, #31
 8001c34:	fa02 f303 	lsl.w	r3, r2, r3
 8001c38:	43da      	mvns	r2, r3
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	400a      	ands	r2, r1
 8001c40:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001c48:	683b      	ldr	r3, [r7, #0]
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	b29b      	uxth	r3, r3
 8001c4e:	4618      	mov	r0, r3
 8001c50:	683b      	ldr	r3, [r7, #0]
 8001c52:	685a      	ldr	r2, [r3, #4]
 8001c54:	4613      	mov	r3, r2
 8001c56:	009b      	lsls	r3, r3, #2
 8001c58:	4413      	add	r3, r2
 8001c5a:	3b23      	subs	r3, #35	; 0x23
 8001c5c:	fa00 f203 	lsl.w	r2, r0, r3
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	430a      	orrs	r2, r1
 8001c66:	631a      	str	r2, [r3, #48]	; 0x30
 8001c68:	e023      	b.n	8001cb2 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001c70:	683b      	ldr	r3, [r7, #0]
 8001c72:	685a      	ldr	r2, [r3, #4]
 8001c74:	4613      	mov	r3, r2
 8001c76:	009b      	lsls	r3, r3, #2
 8001c78:	4413      	add	r3, r2
 8001c7a:	3b41      	subs	r3, #65	; 0x41
 8001c7c:	221f      	movs	r2, #31
 8001c7e:	fa02 f303 	lsl.w	r3, r2, r3
 8001c82:	43da      	mvns	r2, r3
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	400a      	ands	r2, r1
 8001c8a:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001c92:	683b      	ldr	r3, [r7, #0]
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	b29b      	uxth	r3, r3
 8001c98:	4618      	mov	r0, r3
 8001c9a:	683b      	ldr	r3, [r7, #0]
 8001c9c:	685a      	ldr	r2, [r3, #4]
 8001c9e:	4613      	mov	r3, r2
 8001ca0:	009b      	lsls	r3, r3, #2
 8001ca2:	4413      	add	r3, r2
 8001ca4:	3b41      	subs	r3, #65	; 0x41
 8001ca6:	fa00 f203 	lsl.w	r2, r0, r3
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	430a      	orrs	r2, r1
 8001cb0:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001cb2:	4b29      	ldr	r3, [pc, #164]	; (8001d58 <HAL_ADC_ConfigChannel+0x250>)
 8001cb4:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	4a28      	ldr	r2, [pc, #160]	; (8001d5c <HAL_ADC_ConfigChannel+0x254>)
 8001cbc:	4293      	cmp	r3, r2
 8001cbe:	d10f      	bne.n	8001ce0 <HAL_ADC_ConfigChannel+0x1d8>
 8001cc0:	683b      	ldr	r3, [r7, #0]
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	2b12      	cmp	r3, #18
 8001cc6:	d10b      	bne.n	8001ce0 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8001cc8:	68fb      	ldr	r3, [r7, #12]
 8001cca:	685b      	ldr	r3, [r3, #4]
 8001ccc:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8001cd0:	68fb      	ldr	r3, [r7, #12]
 8001cd2:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8001cd4:	68fb      	ldr	r3, [r7, #12]
 8001cd6:	685b      	ldr	r3, [r3, #4]
 8001cd8:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8001cdc:	68fb      	ldr	r3, [r7, #12]
 8001cde:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	4a1d      	ldr	r2, [pc, #116]	; (8001d5c <HAL_ADC_ConfigChannel+0x254>)
 8001ce6:	4293      	cmp	r3, r2
 8001ce8:	d12b      	bne.n	8001d42 <HAL_ADC_ConfigChannel+0x23a>
 8001cea:	683b      	ldr	r3, [r7, #0]
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	4a1c      	ldr	r2, [pc, #112]	; (8001d60 <HAL_ADC_ConfigChannel+0x258>)
 8001cf0:	4293      	cmp	r3, r2
 8001cf2:	d003      	beq.n	8001cfc <HAL_ADC_ConfigChannel+0x1f4>
 8001cf4:	683b      	ldr	r3, [r7, #0]
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	2b11      	cmp	r3, #17
 8001cfa:	d122      	bne.n	8001d42 <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8001cfc:	68fb      	ldr	r3, [r7, #12]
 8001cfe:	685b      	ldr	r3, [r3, #4]
 8001d00:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8001d04:	68fb      	ldr	r3, [r7, #12]
 8001d06:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8001d08:	68fb      	ldr	r3, [r7, #12]
 8001d0a:	685b      	ldr	r3, [r3, #4]
 8001d0c:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8001d10:	68fb      	ldr	r3, [r7, #12]
 8001d12:	605a      	str	r2, [r3, #4]
    
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 8001d14:	683b      	ldr	r3, [r7, #0]
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	4a11      	ldr	r2, [pc, #68]	; (8001d60 <HAL_ADC_ConfigChannel+0x258>)
 8001d1a:	4293      	cmp	r3, r2
 8001d1c:	d111      	bne.n	8001d42 <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001d1e:	4b11      	ldr	r3, [pc, #68]	; (8001d64 <HAL_ADC_ConfigChannel+0x25c>)
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	4a11      	ldr	r2, [pc, #68]	; (8001d68 <HAL_ADC_ConfigChannel+0x260>)
 8001d24:	fba2 2303 	umull	r2, r3, r2, r3
 8001d28:	0c9a      	lsrs	r2, r3, #18
 8001d2a:	4613      	mov	r3, r2
 8001d2c:	009b      	lsls	r3, r3, #2
 8001d2e:	4413      	add	r3, r2
 8001d30:	005b      	lsls	r3, r3, #1
 8001d32:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8001d34:	e002      	b.n	8001d3c <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8001d36:	68bb      	ldr	r3, [r7, #8]
 8001d38:	3b01      	subs	r3, #1
 8001d3a:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8001d3c:	68bb      	ldr	r3, [r7, #8]
 8001d3e:	2b00      	cmp	r3, #0
 8001d40:	d1f9      	bne.n	8001d36 <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	2200      	movs	r2, #0
 8001d46:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8001d4a:	2300      	movs	r3, #0
}
 8001d4c:	4618      	mov	r0, r3
 8001d4e:	3714      	adds	r7, #20
 8001d50:	46bd      	mov	sp, r7
 8001d52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d56:	4770      	bx	lr
 8001d58:	40012300 	.word	0x40012300
 8001d5c:	40012000 	.word	0x40012000
 8001d60:	10000012 	.word	0x10000012
 8001d64:	20000000 	.word	0x20000000
 8001d68:	431bde83 	.word	0x431bde83

08001d6c <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001d6c:	b480      	push	{r7}
 8001d6e:	b085      	sub	sp, #20
 8001d70:	af00      	add	r7, sp, #0
 8001d72:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001d74:	4b79      	ldr	r3, [pc, #484]	; (8001f5c <ADC_Init+0x1f0>)
 8001d76:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8001d78:	68fb      	ldr	r3, [r7, #12]
 8001d7a:	685b      	ldr	r3, [r3, #4]
 8001d7c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8001d80:	68fb      	ldr	r3, [r7, #12]
 8001d82:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8001d84:	68fb      	ldr	r3, [r7, #12]
 8001d86:	685a      	ldr	r2, [r3, #4]
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	685b      	ldr	r3, [r3, #4]
 8001d8c:	431a      	orrs	r2, r3
 8001d8e:	68fb      	ldr	r3, [r7, #12]
 8001d90:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	685a      	ldr	r2, [r3, #4]
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001da0:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	6859      	ldr	r1, [r3, #4]
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	691b      	ldr	r3, [r3, #16]
 8001dac:	021a      	lsls	r2, r3, #8
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	430a      	orrs	r2, r1
 8001db4:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	685a      	ldr	r2, [r3, #4]
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8001dc4:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	6859      	ldr	r1, [r3, #4]
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	689a      	ldr	r2, [r3, #8]
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	430a      	orrs	r2, r1
 8001dd6:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	689a      	ldr	r2, [r3, #8]
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001de6:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	6899      	ldr	r1, [r3, #8]
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	68da      	ldr	r2, [r3, #12]
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	430a      	orrs	r2, r1
 8001df8:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001dfe:	4a58      	ldr	r2, [pc, #352]	; (8001f60 <ADC_Init+0x1f4>)
 8001e00:	4293      	cmp	r3, r2
 8001e02:	d022      	beq.n	8001e4a <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	689a      	ldr	r2, [r3, #8]
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001e12:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	6899      	ldr	r1, [r3, #8]
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	430a      	orrs	r2, r1
 8001e24:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	689a      	ldr	r2, [r3, #8]
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001e34:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	6899      	ldr	r1, [r3, #8]
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	430a      	orrs	r2, r1
 8001e46:	609a      	str	r2, [r3, #8]
 8001e48:	e00f      	b.n	8001e6a <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	689a      	ldr	r2, [r3, #8]
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001e58:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	689a      	ldr	r2, [r3, #8]
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001e68:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	689a      	ldr	r2, [r3, #8]
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	f022 0202 	bic.w	r2, r2, #2
 8001e78:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	6899      	ldr	r1, [r3, #8]
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	7e1b      	ldrb	r3, [r3, #24]
 8001e84:	005a      	lsls	r2, r3, #1
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	430a      	orrs	r2, r1
 8001e8c:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001e94:	2b00      	cmp	r3, #0
 8001e96:	d01b      	beq.n	8001ed0 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	685a      	ldr	r2, [r3, #4]
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001ea6:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	685a      	ldr	r2, [r3, #4]
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8001eb6:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	6859      	ldr	r1, [r3, #4]
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ec2:	3b01      	subs	r3, #1
 8001ec4:	035a      	lsls	r2, r3, #13
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	430a      	orrs	r2, r1
 8001ecc:	605a      	str	r2, [r3, #4]
 8001ece:	e007      	b.n	8001ee0 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	685a      	ldr	r2, [r3, #4]
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001ede:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8001eee:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	69db      	ldr	r3, [r3, #28]
 8001efa:	3b01      	subs	r3, #1
 8001efc:	051a      	lsls	r2, r3, #20
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	430a      	orrs	r2, r1
 8001f04:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	689a      	ldr	r2, [r3, #8]
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8001f14:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	6899      	ldr	r1, [r3, #8]
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001f22:	025a      	lsls	r2, r3, #9
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	430a      	orrs	r2, r1
 8001f2a:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	689a      	ldr	r2, [r3, #8]
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001f3a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	6899      	ldr	r1, [r3, #8]
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	695b      	ldr	r3, [r3, #20]
 8001f46:	029a      	lsls	r2, r3, #10
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	430a      	orrs	r2, r1
 8001f4e:	609a      	str	r2, [r3, #8]
}
 8001f50:	bf00      	nop
 8001f52:	3714      	adds	r7, #20
 8001f54:	46bd      	mov	sp, r7
 8001f56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f5a:	4770      	bx	lr
 8001f5c:	40012300 	.word	0x40012300
 8001f60:	0f000001 	.word	0x0f000001

08001f64 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001f64:	b480      	push	{r7}
 8001f66:	b085      	sub	sp, #20
 8001f68:	af00      	add	r7, sp, #0
 8001f6a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	f003 0307 	and.w	r3, r3, #7
 8001f72:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001f74:	4b0c      	ldr	r3, [pc, #48]	; (8001fa8 <__NVIC_SetPriorityGrouping+0x44>)
 8001f76:	68db      	ldr	r3, [r3, #12]
 8001f78:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001f7a:	68ba      	ldr	r2, [r7, #8]
 8001f7c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001f80:	4013      	ands	r3, r2
 8001f82:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001f84:	68fb      	ldr	r3, [r7, #12]
 8001f86:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001f88:	68bb      	ldr	r3, [r7, #8]
 8001f8a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001f8c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001f90:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001f94:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001f96:	4a04      	ldr	r2, [pc, #16]	; (8001fa8 <__NVIC_SetPriorityGrouping+0x44>)
 8001f98:	68bb      	ldr	r3, [r7, #8]
 8001f9a:	60d3      	str	r3, [r2, #12]
}
 8001f9c:	bf00      	nop
 8001f9e:	3714      	adds	r7, #20
 8001fa0:	46bd      	mov	sp, r7
 8001fa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fa6:	4770      	bx	lr
 8001fa8:	e000ed00 	.word	0xe000ed00

08001fac <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001fac:	b480      	push	{r7}
 8001fae:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001fb0:	4b04      	ldr	r3, [pc, #16]	; (8001fc4 <__NVIC_GetPriorityGrouping+0x18>)
 8001fb2:	68db      	ldr	r3, [r3, #12]
 8001fb4:	0a1b      	lsrs	r3, r3, #8
 8001fb6:	f003 0307 	and.w	r3, r3, #7
}
 8001fba:	4618      	mov	r0, r3
 8001fbc:	46bd      	mov	sp, r7
 8001fbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fc2:	4770      	bx	lr
 8001fc4:	e000ed00 	.word	0xe000ed00

08001fc8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001fc8:	b480      	push	{r7}
 8001fca:	b083      	sub	sp, #12
 8001fcc:	af00      	add	r7, sp, #0
 8001fce:	4603      	mov	r3, r0
 8001fd0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001fd2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001fd6:	2b00      	cmp	r3, #0
 8001fd8:	db0b      	blt.n	8001ff2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001fda:	79fb      	ldrb	r3, [r7, #7]
 8001fdc:	f003 021f 	and.w	r2, r3, #31
 8001fe0:	4907      	ldr	r1, [pc, #28]	; (8002000 <__NVIC_EnableIRQ+0x38>)
 8001fe2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001fe6:	095b      	lsrs	r3, r3, #5
 8001fe8:	2001      	movs	r0, #1
 8001fea:	fa00 f202 	lsl.w	r2, r0, r2
 8001fee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001ff2:	bf00      	nop
 8001ff4:	370c      	adds	r7, #12
 8001ff6:	46bd      	mov	sp, r7
 8001ff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ffc:	4770      	bx	lr
 8001ffe:	bf00      	nop
 8002000:	e000e100 	.word	0xe000e100

08002004 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002004:	b480      	push	{r7}
 8002006:	b083      	sub	sp, #12
 8002008:	af00      	add	r7, sp, #0
 800200a:	4603      	mov	r3, r0
 800200c:	6039      	str	r1, [r7, #0]
 800200e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002010:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002014:	2b00      	cmp	r3, #0
 8002016:	db0a      	blt.n	800202e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002018:	683b      	ldr	r3, [r7, #0]
 800201a:	b2da      	uxtb	r2, r3
 800201c:	490c      	ldr	r1, [pc, #48]	; (8002050 <__NVIC_SetPriority+0x4c>)
 800201e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002022:	0112      	lsls	r2, r2, #4
 8002024:	b2d2      	uxtb	r2, r2
 8002026:	440b      	add	r3, r1
 8002028:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800202c:	e00a      	b.n	8002044 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800202e:	683b      	ldr	r3, [r7, #0]
 8002030:	b2da      	uxtb	r2, r3
 8002032:	4908      	ldr	r1, [pc, #32]	; (8002054 <__NVIC_SetPriority+0x50>)
 8002034:	79fb      	ldrb	r3, [r7, #7]
 8002036:	f003 030f 	and.w	r3, r3, #15
 800203a:	3b04      	subs	r3, #4
 800203c:	0112      	lsls	r2, r2, #4
 800203e:	b2d2      	uxtb	r2, r2
 8002040:	440b      	add	r3, r1
 8002042:	761a      	strb	r2, [r3, #24]
}
 8002044:	bf00      	nop
 8002046:	370c      	adds	r7, #12
 8002048:	46bd      	mov	sp, r7
 800204a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800204e:	4770      	bx	lr
 8002050:	e000e100 	.word	0xe000e100
 8002054:	e000ed00 	.word	0xe000ed00

08002058 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002058:	b480      	push	{r7}
 800205a:	b089      	sub	sp, #36	; 0x24
 800205c:	af00      	add	r7, sp, #0
 800205e:	60f8      	str	r0, [r7, #12]
 8002060:	60b9      	str	r1, [r7, #8]
 8002062:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002064:	68fb      	ldr	r3, [r7, #12]
 8002066:	f003 0307 	and.w	r3, r3, #7
 800206a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800206c:	69fb      	ldr	r3, [r7, #28]
 800206e:	f1c3 0307 	rsb	r3, r3, #7
 8002072:	2b04      	cmp	r3, #4
 8002074:	bf28      	it	cs
 8002076:	2304      	movcs	r3, #4
 8002078:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800207a:	69fb      	ldr	r3, [r7, #28]
 800207c:	3304      	adds	r3, #4
 800207e:	2b06      	cmp	r3, #6
 8002080:	d902      	bls.n	8002088 <NVIC_EncodePriority+0x30>
 8002082:	69fb      	ldr	r3, [r7, #28]
 8002084:	3b03      	subs	r3, #3
 8002086:	e000      	b.n	800208a <NVIC_EncodePriority+0x32>
 8002088:	2300      	movs	r3, #0
 800208a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800208c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002090:	69bb      	ldr	r3, [r7, #24]
 8002092:	fa02 f303 	lsl.w	r3, r2, r3
 8002096:	43da      	mvns	r2, r3
 8002098:	68bb      	ldr	r3, [r7, #8]
 800209a:	401a      	ands	r2, r3
 800209c:	697b      	ldr	r3, [r7, #20]
 800209e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80020a0:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80020a4:	697b      	ldr	r3, [r7, #20]
 80020a6:	fa01 f303 	lsl.w	r3, r1, r3
 80020aa:	43d9      	mvns	r1, r3
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80020b0:	4313      	orrs	r3, r2
         );
}
 80020b2:	4618      	mov	r0, r3
 80020b4:	3724      	adds	r7, #36	; 0x24
 80020b6:	46bd      	mov	sp, r7
 80020b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020bc:	4770      	bx	lr
	...

080020c0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80020c0:	b580      	push	{r7, lr}
 80020c2:	b082      	sub	sp, #8
 80020c4:	af00      	add	r7, sp, #0
 80020c6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	3b01      	subs	r3, #1
 80020cc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80020d0:	d301      	bcc.n	80020d6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80020d2:	2301      	movs	r3, #1
 80020d4:	e00f      	b.n	80020f6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80020d6:	4a0a      	ldr	r2, [pc, #40]	; (8002100 <SysTick_Config+0x40>)
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	3b01      	subs	r3, #1
 80020dc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80020de:	210f      	movs	r1, #15
 80020e0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80020e4:	f7ff ff8e 	bl	8002004 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80020e8:	4b05      	ldr	r3, [pc, #20]	; (8002100 <SysTick_Config+0x40>)
 80020ea:	2200      	movs	r2, #0
 80020ec:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80020ee:	4b04      	ldr	r3, [pc, #16]	; (8002100 <SysTick_Config+0x40>)
 80020f0:	2207      	movs	r2, #7
 80020f2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80020f4:	2300      	movs	r3, #0
}
 80020f6:	4618      	mov	r0, r3
 80020f8:	3708      	adds	r7, #8
 80020fa:	46bd      	mov	sp, r7
 80020fc:	bd80      	pop	{r7, pc}
 80020fe:	bf00      	nop
 8002100:	e000e010 	.word	0xe000e010

08002104 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002104:	b580      	push	{r7, lr}
 8002106:	b082      	sub	sp, #8
 8002108:	af00      	add	r7, sp, #0
 800210a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800210c:	6878      	ldr	r0, [r7, #4]
 800210e:	f7ff ff29 	bl	8001f64 <__NVIC_SetPriorityGrouping>
}
 8002112:	bf00      	nop
 8002114:	3708      	adds	r7, #8
 8002116:	46bd      	mov	sp, r7
 8002118:	bd80      	pop	{r7, pc}

0800211a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800211a:	b580      	push	{r7, lr}
 800211c:	b086      	sub	sp, #24
 800211e:	af00      	add	r7, sp, #0
 8002120:	4603      	mov	r3, r0
 8002122:	60b9      	str	r1, [r7, #8]
 8002124:	607a      	str	r2, [r7, #4]
 8002126:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002128:	2300      	movs	r3, #0
 800212a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800212c:	f7ff ff3e 	bl	8001fac <__NVIC_GetPriorityGrouping>
 8002130:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002132:	687a      	ldr	r2, [r7, #4]
 8002134:	68b9      	ldr	r1, [r7, #8]
 8002136:	6978      	ldr	r0, [r7, #20]
 8002138:	f7ff ff8e 	bl	8002058 <NVIC_EncodePriority>
 800213c:	4602      	mov	r2, r0
 800213e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002142:	4611      	mov	r1, r2
 8002144:	4618      	mov	r0, r3
 8002146:	f7ff ff5d 	bl	8002004 <__NVIC_SetPriority>
}
 800214a:	bf00      	nop
 800214c:	3718      	adds	r7, #24
 800214e:	46bd      	mov	sp, r7
 8002150:	bd80      	pop	{r7, pc}

08002152 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002152:	b580      	push	{r7, lr}
 8002154:	b082      	sub	sp, #8
 8002156:	af00      	add	r7, sp, #0
 8002158:	4603      	mov	r3, r0
 800215a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800215c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002160:	4618      	mov	r0, r3
 8002162:	f7ff ff31 	bl	8001fc8 <__NVIC_EnableIRQ>
}
 8002166:	bf00      	nop
 8002168:	3708      	adds	r7, #8
 800216a:	46bd      	mov	sp, r7
 800216c:	bd80      	pop	{r7, pc}

0800216e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800216e:	b580      	push	{r7, lr}
 8002170:	b082      	sub	sp, #8
 8002172:	af00      	add	r7, sp, #0
 8002174:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002176:	6878      	ldr	r0, [r7, #4]
 8002178:	f7ff ffa2 	bl	80020c0 <SysTick_Config>
 800217c:	4603      	mov	r3, r0
}
 800217e:	4618      	mov	r0, r3
 8002180:	3708      	adds	r7, #8
 8002182:	46bd      	mov	sp, r7
 8002184:	bd80      	pop	{r7, pc}
	...

08002188 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002188:	b580      	push	{r7, lr}
 800218a:	b086      	sub	sp, #24
 800218c:	af00      	add	r7, sp, #0
 800218e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002190:	2300      	movs	r3, #0
 8002192:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8002194:	f7ff faee 	bl	8001774 <HAL_GetTick>
 8002198:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	2b00      	cmp	r3, #0
 800219e:	d101      	bne.n	80021a4 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80021a0:	2301      	movs	r3, #1
 80021a2:	e099      	b.n	80022d8 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	2200      	movs	r2, #0
 80021a8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	2202      	movs	r2, #2
 80021b0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	681a      	ldr	r2, [r3, #0]
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	f022 0201 	bic.w	r2, r2, #1
 80021c2:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80021c4:	e00f      	b.n	80021e6 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80021c6:	f7ff fad5 	bl	8001774 <HAL_GetTick>
 80021ca:	4602      	mov	r2, r0
 80021cc:	693b      	ldr	r3, [r7, #16]
 80021ce:	1ad3      	subs	r3, r2, r3
 80021d0:	2b05      	cmp	r3, #5
 80021d2:	d908      	bls.n	80021e6 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	2220      	movs	r2, #32
 80021d8:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	2203      	movs	r2, #3
 80021de:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 80021e2:	2303      	movs	r3, #3
 80021e4:	e078      	b.n	80022d8 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	f003 0301 	and.w	r3, r3, #1
 80021f0:	2b00      	cmp	r3, #0
 80021f2:	d1e8      	bne.n	80021c6 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80021fc:	697a      	ldr	r2, [r7, #20]
 80021fe:	4b38      	ldr	r3, [pc, #224]	; (80022e0 <HAL_DMA_Init+0x158>)
 8002200:	4013      	ands	r3, r2
 8002202:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	685a      	ldr	r2, [r3, #4]
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	689b      	ldr	r3, [r3, #8]
 800220c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002212:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	691b      	ldr	r3, [r3, #16]
 8002218:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800221e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	699b      	ldr	r3, [r3, #24]
 8002224:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800222a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	6a1b      	ldr	r3, [r3, #32]
 8002230:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002232:	697a      	ldr	r2, [r7, #20]
 8002234:	4313      	orrs	r3, r2
 8002236:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800223c:	2b04      	cmp	r3, #4
 800223e:	d107      	bne.n	8002250 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002248:	4313      	orrs	r3, r2
 800224a:	697a      	ldr	r2, [r7, #20]
 800224c:	4313      	orrs	r3, r2
 800224e:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	697a      	ldr	r2, [r7, #20]
 8002256:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	695b      	ldr	r3, [r3, #20]
 800225e:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002260:	697b      	ldr	r3, [r7, #20]
 8002262:	f023 0307 	bic.w	r3, r3, #7
 8002266:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800226c:	697a      	ldr	r2, [r7, #20]
 800226e:	4313      	orrs	r3, r2
 8002270:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002276:	2b04      	cmp	r3, #4
 8002278:	d117      	bne.n	80022aa <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800227e:	697a      	ldr	r2, [r7, #20]
 8002280:	4313      	orrs	r3, r2
 8002282:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002288:	2b00      	cmp	r3, #0
 800228a:	d00e      	beq.n	80022aa <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 800228c:	6878      	ldr	r0, [r7, #4]
 800228e:	f000 fa6f 	bl	8002770 <DMA_CheckFifoParam>
 8002292:	4603      	mov	r3, r0
 8002294:	2b00      	cmp	r3, #0
 8002296:	d008      	beq.n	80022aa <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	2240      	movs	r2, #64	; 0x40
 800229c:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	2201      	movs	r2, #1
 80022a2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 80022a6:	2301      	movs	r3, #1
 80022a8:	e016      	b.n	80022d8 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	697a      	ldr	r2, [r7, #20]
 80022b0:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80022b2:	6878      	ldr	r0, [r7, #4]
 80022b4:	f000 fa26 	bl	8002704 <DMA_CalcBaseAndBitshift>
 80022b8:	4603      	mov	r3, r0
 80022ba:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80022c0:	223f      	movs	r2, #63	; 0x3f
 80022c2:	409a      	lsls	r2, r3
 80022c4:	68fb      	ldr	r3, [r7, #12]
 80022c6:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	2200      	movs	r2, #0
 80022cc:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	2201      	movs	r2, #1
 80022d2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80022d6:	2300      	movs	r3, #0
}
 80022d8:	4618      	mov	r0, r3
 80022da:	3718      	adds	r7, #24
 80022dc:	46bd      	mov	sp, r7
 80022de:	bd80      	pop	{r7, pc}
 80022e0:	f010803f 	.word	0xf010803f

080022e4 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80022e4:	b580      	push	{r7, lr}
 80022e6:	b086      	sub	sp, #24
 80022e8:	af00      	add	r7, sp, #0
 80022ea:	60f8      	str	r0, [r7, #12]
 80022ec:	60b9      	str	r1, [r7, #8]
 80022ee:	607a      	str	r2, [r7, #4]
 80022f0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80022f2:	2300      	movs	r3, #0
 80022f4:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80022f6:	68fb      	ldr	r3, [r7, #12]
 80022f8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80022fa:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80022fc:	68fb      	ldr	r3, [r7, #12]
 80022fe:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8002302:	2b01      	cmp	r3, #1
 8002304:	d101      	bne.n	800230a <HAL_DMA_Start_IT+0x26>
 8002306:	2302      	movs	r3, #2
 8002308:	e040      	b.n	800238c <HAL_DMA_Start_IT+0xa8>
 800230a:	68fb      	ldr	r3, [r7, #12]
 800230c:	2201      	movs	r2, #1
 800230e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8002312:	68fb      	ldr	r3, [r7, #12]
 8002314:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002318:	b2db      	uxtb	r3, r3
 800231a:	2b01      	cmp	r3, #1
 800231c:	d12f      	bne.n	800237e <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800231e:	68fb      	ldr	r3, [r7, #12]
 8002320:	2202      	movs	r2, #2
 8002322:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002326:	68fb      	ldr	r3, [r7, #12]
 8002328:	2200      	movs	r2, #0
 800232a:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800232c:	683b      	ldr	r3, [r7, #0]
 800232e:	687a      	ldr	r2, [r7, #4]
 8002330:	68b9      	ldr	r1, [r7, #8]
 8002332:	68f8      	ldr	r0, [r7, #12]
 8002334:	f000 f9b8 	bl	80026a8 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002338:	68fb      	ldr	r3, [r7, #12]
 800233a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800233c:	223f      	movs	r2, #63	; 0x3f
 800233e:	409a      	lsls	r2, r3
 8002340:	693b      	ldr	r3, [r7, #16]
 8002342:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8002344:	68fb      	ldr	r3, [r7, #12]
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	681a      	ldr	r2, [r3, #0]
 800234a:	68fb      	ldr	r3, [r7, #12]
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	f042 0216 	orr.w	r2, r2, #22
 8002352:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8002354:	68fb      	ldr	r3, [r7, #12]
 8002356:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002358:	2b00      	cmp	r3, #0
 800235a:	d007      	beq.n	800236c <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 800235c:	68fb      	ldr	r3, [r7, #12]
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	681a      	ldr	r2, [r3, #0]
 8002362:	68fb      	ldr	r3, [r7, #12]
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	f042 0208 	orr.w	r2, r2, #8
 800236a:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800236c:	68fb      	ldr	r3, [r7, #12]
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	681a      	ldr	r2, [r3, #0]
 8002372:	68fb      	ldr	r3, [r7, #12]
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	f042 0201 	orr.w	r2, r2, #1
 800237a:	601a      	str	r2, [r3, #0]
 800237c:	e005      	b.n	800238a <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800237e:	68fb      	ldr	r3, [r7, #12]
 8002380:	2200      	movs	r2, #0
 8002382:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8002386:	2302      	movs	r3, #2
 8002388:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800238a:	7dfb      	ldrb	r3, [r7, #23]
}
 800238c:	4618      	mov	r0, r3
 800238e:	3718      	adds	r7, #24
 8002390:	46bd      	mov	sp, r7
 8002392:	bd80      	pop	{r7, pc}

08002394 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002394:	b580      	push	{r7, lr}
 8002396:	b086      	sub	sp, #24
 8002398:	af00      	add	r7, sp, #0
 800239a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 800239c:	2300      	movs	r3, #0
 800239e:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80023a0:	4b92      	ldr	r3, [pc, #584]	; (80025ec <HAL_DMA_IRQHandler+0x258>)
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	4a92      	ldr	r2, [pc, #584]	; (80025f0 <HAL_DMA_IRQHandler+0x25c>)
 80023a6:	fba2 2303 	umull	r2, r3, r2, r3
 80023aa:	0a9b      	lsrs	r3, r3, #10
 80023ac:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80023b2:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80023b4:	693b      	ldr	r3, [r7, #16]
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80023be:	2208      	movs	r2, #8
 80023c0:	409a      	lsls	r2, r3
 80023c2:	68fb      	ldr	r3, [r7, #12]
 80023c4:	4013      	ands	r3, r2
 80023c6:	2b00      	cmp	r3, #0
 80023c8:	d01a      	beq.n	8002400 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	f003 0304 	and.w	r3, r3, #4
 80023d4:	2b00      	cmp	r3, #0
 80023d6:	d013      	beq.n	8002400 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	681a      	ldr	r2, [r3, #0]
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	f022 0204 	bic.w	r2, r2, #4
 80023e6:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80023ec:	2208      	movs	r2, #8
 80023ee:	409a      	lsls	r2, r3
 80023f0:	693b      	ldr	r3, [r7, #16]
 80023f2:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80023f8:	f043 0201 	orr.w	r2, r3, #1
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002404:	2201      	movs	r2, #1
 8002406:	409a      	lsls	r2, r3
 8002408:	68fb      	ldr	r3, [r7, #12]
 800240a:	4013      	ands	r3, r2
 800240c:	2b00      	cmp	r3, #0
 800240e:	d012      	beq.n	8002436 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	695b      	ldr	r3, [r3, #20]
 8002416:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800241a:	2b00      	cmp	r3, #0
 800241c:	d00b      	beq.n	8002436 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002422:	2201      	movs	r2, #1
 8002424:	409a      	lsls	r2, r3
 8002426:	693b      	ldr	r3, [r7, #16]
 8002428:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800242e:	f043 0202 	orr.w	r2, r3, #2
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800243a:	2204      	movs	r2, #4
 800243c:	409a      	lsls	r2, r3
 800243e:	68fb      	ldr	r3, [r7, #12]
 8002440:	4013      	ands	r3, r2
 8002442:	2b00      	cmp	r3, #0
 8002444:	d012      	beq.n	800246c <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	f003 0302 	and.w	r3, r3, #2
 8002450:	2b00      	cmp	r3, #0
 8002452:	d00b      	beq.n	800246c <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002458:	2204      	movs	r2, #4
 800245a:	409a      	lsls	r2, r3
 800245c:	693b      	ldr	r3, [r7, #16]
 800245e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002464:	f043 0204 	orr.w	r2, r3, #4
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002470:	2210      	movs	r2, #16
 8002472:	409a      	lsls	r2, r3
 8002474:	68fb      	ldr	r3, [r7, #12]
 8002476:	4013      	ands	r3, r2
 8002478:	2b00      	cmp	r3, #0
 800247a:	d043      	beq.n	8002504 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	f003 0308 	and.w	r3, r3, #8
 8002486:	2b00      	cmp	r3, #0
 8002488:	d03c      	beq.n	8002504 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800248e:	2210      	movs	r2, #16
 8002490:	409a      	lsls	r2, r3
 8002492:	693b      	ldr	r3, [r7, #16]
 8002494:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80024a0:	2b00      	cmp	r3, #0
 80024a2:	d018      	beq.n	80024d6 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80024ae:	2b00      	cmp	r3, #0
 80024b0:	d108      	bne.n	80024c4 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024b6:	2b00      	cmp	r3, #0
 80024b8:	d024      	beq.n	8002504 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024be:	6878      	ldr	r0, [r7, #4]
 80024c0:	4798      	blx	r3
 80024c2:	e01f      	b.n	8002504 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80024c8:	2b00      	cmp	r3, #0
 80024ca:	d01b      	beq.n	8002504 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80024d0:	6878      	ldr	r0, [r7, #4]
 80024d2:	4798      	blx	r3
 80024d4:	e016      	b.n	8002504 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80024e0:	2b00      	cmp	r3, #0
 80024e2:	d107      	bne.n	80024f4 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	681a      	ldr	r2, [r3, #0]
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	f022 0208 	bic.w	r2, r2, #8
 80024f2:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024f8:	2b00      	cmp	r3, #0
 80024fa:	d003      	beq.n	8002504 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002500:	6878      	ldr	r0, [r7, #4]
 8002502:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002508:	2220      	movs	r2, #32
 800250a:	409a      	lsls	r2, r3
 800250c:	68fb      	ldr	r3, [r7, #12]
 800250e:	4013      	ands	r3, r2
 8002510:	2b00      	cmp	r3, #0
 8002512:	f000 808e 	beq.w	8002632 <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	f003 0310 	and.w	r3, r3, #16
 8002520:	2b00      	cmp	r3, #0
 8002522:	f000 8086 	beq.w	8002632 <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800252a:	2220      	movs	r2, #32
 800252c:	409a      	lsls	r2, r3
 800252e:	693b      	ldr	r3, [r7, #16]
 8002530:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002538:	b2db      	uxtb	r3, r3
 800253a:	2b05      	cmp	r3, #5
 800253c:	d136      	bne.n	80025ac <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	681a      	ldr	r2, [r3, #0]
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	f022 0216 	bic.w	r2, r2, #22
 800254c:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	695a      	ldr	r2, [r3, #20]
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800255c:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002562:	2b00      	cmp	r3, #0
 8002564:	d103      	bne.n	800256e <HAL_DMA_IRQHandler+0x1da>
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800256a:	2b00      	cmp	r3, #0
 800256c:	d007      	beq.n	800257e <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	681a      	ldr	r2, [r3, #0]
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	f022 0208 	bic.w	r2, r2, #8
 800257c:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002582:	223f      	movs	r2, #63	; 0x3f
 8002584:	409a      	lsls	r2, r3
 8002586:	693b      	ldr	r3, [r7, #16]
 8002588:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	2200      	movs	r2, #0
 800258e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	2201      	movs	r2, #1
 8002596:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800259e:	2b00      	cmp	r3, #0
 80025a0:	d07d      	beq.n	800269e <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80025a6:	6878      	ldr	r0, [r7, #4]
 80025a8:	4798      	blx	r3
        }
        return;
 80025aa:	e078      	b.n	800269e <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80025b6:	2b00      	cmp	r3, #0
 80025b8:	d01c      	beq.n	80025f4 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80025c4:	2b00      	cmp	r3, #0
 80025c6:	d108      	bne.n	80025da <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025cc:	2b00      	cmp	r3, #0
 80025ce:	d030      	beq.n	8002632 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025d4:	6878      	ldr	r0, [r7, #4]
 80025d6:	4798      	blx	r3
 80025d8:	e02b      	b.n	8002632 <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80025de:	2b00      	cmp	r3, #0
 80025e0:	d027      	beq.n	8002632 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80025e6:	6878      	ldr	r0, [r7, #4]
 80025e8:	4798      	blx	r3
 80025ea:	e022      	b.n	8002632 <HAL_DMA_IRQHandler+0x29e>
 80025ec:	20000000 	.word	0x20000000
 80025f0:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80025fe:	2b00      	cmp	r3, #0
 8002600:	d10f      	bne.n	8002622 <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	681a      	ldr	r2, [r3, #0]
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	f022 0210 	bic.w	r2, r2, #16
 8002610:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	2200      	movs	r2, #0
 8002616:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	2201      	movs	r2, #1
 800261e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002626:	2b00      	cmp	r3, #0
 8002628:	d003      	beq.n	8002632 <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800262e:	6878      	ldr	r0, [r7, #4]
 8002630:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002636:	2b00      	cmp	r3, #0
 8002638:	d032      	beq.n	80026a0 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800263e:	f003 0301 	and.w	r3, r3, #1
 8002642:	2b00      	cmp	r3, #0
 8002644:	d022      	beq.n	800268c <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	2205      	movs	r2, #5
 800264a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	681a      	ldr	r2, [r3, #0]
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	f022 0201 	bic.w	r2, r2, #1
 800265c:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 800265e:	68bb      	ldr	r3, [r7, #8]
 8002660:	3301      	adds	r3, #1
 8002662:	60bb      	str	r3, [r7, #8]
 8002664:	697a      	ldr	r2, [r7, #20]
 8002666:	429a      	cmp	r2, r3
 8002668:	d307      	bcc.n	800267a <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	f003 0301 	and.w	r3, r3, #1
 8002674:	2b00      	cmp	r3, #0
 8002676:	d1f2      	bne.n	800265e <HAL_DMA_IRQHandler+0x2ca>
 8002678:	e000      	b.n	800267c <HAL_DMA_IRQHandler+0x2e8>
          break;
 800267a:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	2200      	movs	r2, #0
 8002680:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	2201      	movs	r2, #1
 8002688:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002690:	2b00      	cmp	r3, #0
 8002692:	d005      	beq.n	80026a0 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002698:	6878      	ldr	r0, [r7, #4]
 800269a:	4798      	blx	r3
 800269c:	e000      	b.n	80026a0 <HAL_DMA_IRQHandler+0x30c>
        return;
 800269e:	bf00      	nop
    }
  }
}
 80026a0:	3718      	adds	r7, #24
 80026a2:	46bd      	mov	sp, r7
 80026a4:	bd80      	pop	{r7, pc}
 80026a6:	bf00      	nop

080026a8 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80026a8:	b480      	push	{r7}
 80026aa:	b085      	sub	sp, #20
 80026ac:	af00      	add	r7, sp, #0
 80026ae:	60f8      	str	r0, [r7, #12]
 80026b0:	60b9      	str	r1, [r7, #8]
 80026b2:	607a      	str	r2, [r7, #4]
 80026b4:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80026b6:	68fb      	ldr	r3, [r7, #12]
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	681a      	ldr	r2, [r3, #0]
 80026bc:	68fb      	ldr	r3, [r7, #12]
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80026c4:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80026c6:	68fb      	ldr	r3, [r7, #12]
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	683a      	ldr	r2, [r7, #0]
 80026cc:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80026ce:	68fb      	ldr	r3, [r7, #12]
 80026d0:	689b      	ldr	r3, [r3, #8]
 80026d2:	2b40      	cmp	r3, #64	; 0x40
 80026d4:	d108      	bne.n	80026e8 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80026d6:	68fb      	ldr	r3, [r7, #12]
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	687a      	ldr	r2, [r7, #4]
 80026dc:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80026de:	68fb      	ldr	r3, [r7, #12]
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	68ba      	ldr	r2, [r7, #8]
 80026e4:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80026e6:	e007      	b.n	80026f8 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80026e8:	68fb      	ldr	r3, [r7, #12]
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	68ba      	ldr	r2, [r7, #8]
 80026ee:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80026f0:	68fb      	ldr	r3, [r7, #12]
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	687a      	ldr	r2, [r7, #4]
 80026f6:	60da      	str	r2, [r3, #12]
}
 80026f8:	bf00      	nop
 80026fa:	3714      	adds	r7, #20
 80026fc:	46bd      	mov	sp, r7
 80026fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002702:	4770      	bx	lr

08002704 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002704:	b480      	push	{r7}
 8002706:	b085      	sub	sp, #20
 8002708:	af00      	add	r7, sp, #0
 800270a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	b2db      	uxtb	r3, r3
 8002712:	3b10      	subs	r3, #16
 8002714:	4a14      	ldr	r2, [pc, #80]	; (8002768 <DMA_CalcBaseAndBitshift+0x64>)
 8002716:	fba2 2303 	umull	r2, r3, r2, r3
 800271a:	091b      	lsrs	r3, r3, #4
 800271c:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800271e:	4a13      	ldr	r2, [pc, #76]	; (800276c <DMA_CalcBaseAndBitshift+0x68>)
 8002720:	68fb      	ldr	r3, [r7, #12]
 8002722:	4413      	add	r3, r2
 8002724:	781b      	ldrb	r3, [r3, #0]
 8002726:	461a      	mov	r2, r3
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 800272c:	68fb      	ldr	r3, [r7, #12]
 800272e:	2b03      	cmp	r3, #3
 8002730:	d909      	bls.n	8002746 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800273a:	f023 0303 	bic.w	r3, r3, #3
 800273e:	1d1a      	adds	r2, r3, #4
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	659a      	str	r2, [r3, #88]	; 0x58
 8002744:	e007      	b.n	8002756 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800274e:	f023 0303 	bic.w	r3, r3, #3
 8002752:	687a      	ldr	r2, [r7, #4]
 8002754:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800275a:	4618      	mov	r0, r3
 800275c:	3714      	adds	r7, #20
 800275e:	46bd      	mov	sp, r7
 8002760:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002764:	4770      	bx	lr
 8002766:	bf00      	nop
 8002768:	aaaaaaab 	.word	0xaaaaaaab
 800276c:	080050bc 	.word	0x080050bc

08002770 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002770:	b480      	push	{r7}
 8002772:	b085      	sub	sp, #20
 8002774:	af00      	add	r7, sp, #0
 8002776:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002778:	2300      	movs	r3, #0
 800277a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002780:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	699b      	ldr	r3, [r3, #24]
 8002786:	2b00      	cmp	r3, #0
 8002788:	d11f      	bne.n	80027ca <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800278a:	68bb      	ldr	r3, [r7, #8]
 800278c:	2b03      	cmp	r3, #3
 800278e:	d855      	bhi.n	800283c <DMA_CheckFifoParam+0xcc>
 8002790:	a201      	add	r2, pc, #4	; (adr r2, 8002798 <DMA_CheckFifoParam+0x28>)
 8002792:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002796:	bf00      	nop
 8002798:	080027a9 	.word	0x080027a9
 800279c:	080027bb 	.word	0x080027bb
 80027a0:	080027a9 	.word	0x080027a9
 80027a4:	0800283d 	.word	0x0800283d
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80027ac:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80027b0:	2b00      	cmp	r3, #0
 80027b2:	d045      	beq.n	8002840 <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 80027b4:	2301      	movs	r3, #1
 80027b6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80027b8:	e042      	b.n	8002840 <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80027be:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80027c2:	d13f      	bne.n	8002844 <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 80027c4:	2301      	movs	r3, #1
 80027c6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80027c8:	e03c      	b.n	8002844 <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	699b      	ldr	r3, [r3, #24]
 80027ce:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80027d2:	d121      	bne.n	8002818 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80027d4:	68bb      	ldr	r3, [r7, #8]
 80027d6:	2b03      	cmp	r3, #3
 80027d8:	d836      	bhi.n	8002848 <DMA_CheckFifoParam+0xd8>
 80027da:	a201      	add	r2, pc, #4	; (adr r2, 80027e0 <DMA_CheckFifoParam+0x70>)
 80027dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80027e0:	080027f1 	.word	0x080027f1
 80027e4:	080027f7 	.word	0x080027f7
 80027e8:	080027f1 	.word	0x080027f1
 80027ec:	08002809 	.word	0x08002809
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80027f0:	2301      	movs	r3, #1
 80027f2:	73fb      	strb	r3, [r7, #15]
      break;
 80027f4:	e02f      	b.n	8002856 <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80027fa:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80027fe:	2b00      	cmp	r3, #0
 8002800:	d024      	beq.n	800284c <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 8002802:	2301      	movs	r3, #1
 8002804:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002806:	e021      	b.n	800284c <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800280c:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002810:	d11e      	bne.n	8002850 <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 8002812:	2301      	movs	r3, #1
 8002814:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8002816:	e01b      	b.n	8002850 <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002818:	68bb      	ldr	r3, [r7, #8]
 800281a:	2b02      	cmp	r3, #2
 800281c:	d902      	bls.n	8002824 <DMA_CheckFifoParam+0xb4>
 800281e:	2b03      	cmp	r3, #3
 8002820:	d003      	beq.n	800282a <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002822:	e018      	b.n	8002856 <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 8002824:	2301      	movs	r3, #1
 8002826:	73fb      	strb	r3, [r7, #15]
      break;
 8002828:	e015      	b.n	8002856 <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800282e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002832:	2b00      	cmp	r3, #0
 8002834:	d00e      	beq.n	8002854 <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 8002836:	2301      	movs	r3, #1
 8002838:	73fb      	strb	r3, [r7, #15]
      break;
 800283a:	e00b      	b.n	8002854 <DMA_CheckFifoParam+0xe4>
      break;
 800283c:	bf00      	nop
 800283e:	e00a      	b.n	8002856 <DMA_CheckFifoParam+0xe6>
      break;
 8002840:	bf00      	nop
 8002842:	e008      	b.n	8002856 <DMA_CheckFifoParam+0xe6>
      break;
 8002844:	bf00      	nop
 8002846:	e006      	b.n	8002856 <DMA_CheckFifoParam+0xe6>
      break;
 8002848:	bf00      	nop
 800284a:	e004      	b.n	8002856 <DMA_CheckFifoParam+0xe6>
      break;
 800284c:	bf00      	nop
 800284e:	e002      	b.n	8002856 <DMA_CheckFifoParam+0xe6>
      break;   
 8002850:	bf00      	nop
 8002852:	e000      	b.n	8002856 <DMA_CheckFifoParam+0xe6>
      break;
 8002854:	bf00      	nop
    }
  } 
  
  return status; 
 8002856:	7bfb      	ldrb	r3, [r7, #15]
}
 8002858:	4618      	mov	r0, r3
 800285a:	3714      	adds	r7, #20
 800285c:	46bd      	mov	sp, r7
 800285e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002862:	4770      	bx	lr

08002864 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002864:	b480      	push	{r7}
 8002866:	b089      	sub	sp, #36	; 0x24
 8002868:	af00      	add	r7, sp, #0
 800286a:	6078      	str	r0, [r7, #4]
 800286c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800286e:	2300      	movs	r3, #0
 8002870:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002872:	2300      	movs	r3, #0
 8002874:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002876:	2300      	movs	r3, #0
 8002878:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800287a:	2300      	movs	r3, #0
 800287c:	61fb      	str	r3, [r7, #28]
 800287e:	e165      	b.n	8002b4c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002880:	2201      	movs	r2, #1
 8002882:	69fb      	ldr	r3, [r7, #28]
 8002884:	fa02 f303 	lsl.w	r3, r2, r3
 8002888:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800288a:	683b      	ldr	r3, [r7, #0]
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	697a      	ldr	r2, [r7, #20]
 8002890:	4013      	ands	r3, r2
 8002892:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002894:	693a      	ldr	r2, [r7, #16]
 8002896:	697b      	ldr	r3, [r7, #20]
 8002898:	429a      	cmp	r2, r3
 800289a:	f040 8154 	bne.w	8002b46 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800289e:	683b      	ldr	r3, [r7, #0]
 80028a0:	685b      	ldr	r3, [r3, #4]
 80028a2:	2b01      	cmp	r3, #1
 80028a4:	d00b      	beq.n	80028be <HAL_GPIO_Init+0x5a>
 80028a6:	683b      	ldr	r3, [r7, #0]
 80028a8:	685b      	ldr	r3, [r3, #4]
 80028aa:	2b02      	cmp	r3, #2
 80028ac:	d007      	beq.n	80028be <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80028ae:	683b      	ldr	r3, [r7, #0]
 80028b0:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80028b2:	2b11      	cmp	r3, #17
 80028b4:	d003      	beq.n	80028be <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80028b6:	683b      	ldr	r3, [r7, #0]
 80028b8:	685b      	ldr	r3, [r3, #4]
 80028ba:	2b12      	cmp	r3, #18
 80028bc:	d130      	bne.n	8002920 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	689b      	ldr	r3, [r3, #8]
 80028c2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80028c4:	69fb      	ldr	r3, [r7, #28]
 80028c6:	005b      	lsls	r3, r3, #1
 80028c8:	2203      	movs	r2, #3
 80028ca:	fa02 f303 	lsl.w	r3, r2, r3
 80028ce:	43db      	mvns	r3, r3
 80028d0:	69ba      	ldr	r2, [r7, #24]
 80028d2:	4013      	ands	r3, r2
 80028d4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80028d6:	683b      	ldr	r3, [r7, #0]
 80028d8:	68da      	ldr	r2, [r3, #12]
 80028da:	69fb      	ldr	r3, [r7, #28]
 80028dc:	005b      	lsls	r3, r3, #1
 80028de:	fa02 f303 	lsl.w	r3, r2, r3
 80028e2:	69ba      	ldr	r2, [r7, #24]
 80028e4:	4313      	orrs	r3, r2
 80028e6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	69ba      	ldr	r2, [r7, #24]
 80028ec:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	685b      	ldr	r3, [r3, #4]
 80028f2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80028f4:	2201      	movs	r2, #1
 80028f6:	69fb      	ldr	r3, [r7, #28]
 80028f8:	fa02 f303 	lsl.w	r3, r2, r3
 80028fc:	43db      	mvns	r3, r3
 80028fe:	69ba      	ldr	r2, [r7, #24]
 8002900:	4013      	ands	r3, r2
 8002902:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8002904:	683b      	ldr	r3, [r7, #0]
 8002906:	685b      	ldr	r3, [r3, #4]
 8002908:	091b      	lsrs	r3, r3, #4
 800290a:	f003 0201 	and.w	r2, r3, #1
 800290e:	69fb      	ldr	r3, [r7, #28]
 8002910:	fa02 f303 	lsl.w	r3, r2, r3
 8002914:	69ba      	ldr	r2, [r7, #24]
 8002916:	4313      	orrs	r3, r2
 8002918:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	69ba      	ldr	r2, [r7, #24]
 800291e:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	68db      	ldr	r3, [r3, #12]
 8002924:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002926:	69fb      	ldr	r3, [r7, #28]
 8002928:	005b      	lsls	r3, r3, #1
 800292a:	2203      	movs	r2, #3
 800292c:	fa02 f303 	lsl.w	r3, r2, r3
 8002930:	43db      	mvns	r3, r3
 8002932:	69ba      	ldr	r2, [r7, #24]
 8002934:	4013      	ands	r3, r2
 8002936:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002938:	683b      	ldr	r3, [r7, #0]
 800293a:	689a      	ldr	r2, [r3, #8]
 800293c:	69fb      	ldr	r3, [r7, #28]
 800293e:	005b      	lsls	r3, r3, #1
 8002940:	fa02 f303 	lsl.w	r3, r2, r3
 8002944:	69ba      	ldr	r2, [r7, #24]
 8002946:	4313      	orrs	r3, r2
 8002948:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	69ba      	ldr	r2, [r7, #24]
 800294e:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002950:	683b      	ldr	r3, [r7, #0]
 8002952:	685b      	ldr	r3, [r3, #4]
 8002954:	2b02      	cmp	r3, #2
 8002956:	d003      	beq.n	8002960 <HAL_GPIO_Init+0xfc>
 8002958:	683b      	ldr	r3, [r7, #0]
 800295a:	685b      	ldr	r3, [r3, #4]
 800295c:	2b12      	cmp	r3, #18
 800295e:	d123      	bne.n	80029a8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002960:	69fb      	ldr	r3, [r7, #28]
 8002962:	08da      	lsrs	r2, r3, #3
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	3208      	adds	r2, #8
 8002968:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800296c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800296e:	69fb      	ldr	r3, [r7, #28]
 8002970:	f003 0307 	and.w	r3, r3, #7
 8002974:	009b      	lsls	r3, r3, #2
 8002976:	220f      	movs	r2, #15
 8002978:	fa02 f303 	lsl.w	r3, r2, r3
 800297c:	43db      	mvns	r3, r3
 800297e:	69ba      	ldr	r2, [r7, #24]
 8002980:	4013      	ands	r3, r2
 8002982:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002984:	683b      	ldr	r3, [r7, #0]
 8002986:	691a      	ldr	r2, [r3, #16]
 8002988:	69fb      	ldr	r3, [r7, #28]
 800298a:	f003 0307 	and.w	r3, r3, #7
 800298e:	009b      	lsls	r3, r3, #2
 8002990:	fa02 f303 	lsl.w	r3, r2, r3
 8002994:	69ba      	ldr	r2, [r7, #24]
 8002996:	4313      	orrs	r3, r2
 8002998:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800299a:	69fb      	ldr	r3, [r7, #28]
 800299c:	08da      	lsrs	r2, r3, #3
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	3208      	adds	r2, #8
 80029a2:	69b9      	ldr	r1, [r7, #24]
 80029a4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80029ae:	69fb      	ldr	r3, [r7, #28]
 80029b0:	005b      	lsls	r3, r3, #1
 80029b2:	2203      	movs	r2, #3
 80029b4:	fa02 f303 	lsl.w	r3, r2, r3
 80029b8:	43db      	mvns	r3, r3
 80029ba:	69ba      	ldr	r2, [r7, #24]
 80029bc:	4013      	ands	r3, r2
 80029be:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80029c0:	683b      	ldr	r3, [r7, #0]
 80029c2:	685b      	ldr	r3, [r3, #4]
 80029c4:	f003 0203 	and.w	r2, r3, #3
 80029c8:	69fb      	ldr	r3, [r7, #28]
 80029ca:	005b      	lsls	r3, r3, #1
 80029cc:	fa02 f303 	lsl.w	r3, r2, r3
 80029d0:	69ba      	ldr	r2, [r7, #24]
 80029d2:	4313      	orrs	r3, r2
 80029d4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	69ba      	ldr	r2, [r7, #24]
 80029da:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80029dc:	683b      	ldr	r3, [r7, #0]
 80029de:	685b      	ldr	r3, [r3, #4]
 80029e0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80029e4:	2b00      	cmp	r3, #0
 80029e6:	f000 80ae 	beq.w	8002b46 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80029ea:	2300      	movs	r3, #0
 80029ec:	60fb      	str	r3, [r7, #12]
 80029ee:	4b5c      	ldr	r3, [pc, #368]	; (8002b60 <HAL_GPIO_Init+0x2fc>)
 80029f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80029f2:	4a5b      	ldr	r2, [pc, #364]	; (8002b60 <HAL_GPIO_Init+0x2fc>)
 80029f4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80029f8:	6453      	str	r3, [r2, #68]	; 0x44
 80029fa:	4b59      	ldr	r3, [pc, #356]	; (8002b60 <HAL_GPIO_Init+0x2fc>)
 80029fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80029fe:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002a02:	60fb      	str	r3, [r7, #12]
 8002a04:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002a06:	4a57      	ldr	r2, [pc, #348]	; (8002b64 <HAL_GPIO_Init+0x300>)
 8002a08:	69fb      	ldr	r3, [r7, #28]
 8002a0a:	089b      	lsrs	r3, r3, #2
 8002a0c:	3302      	adds	r3, #2
 8002a0e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002a12:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002a14:	69fb      	ldr	r3, [r7, #28]
 8002a16:	f003 0303 	and.w	r3, r3, #3
 8002a1a:	009b      	lsls	r3, r3, #2
 8002a1c:	220f      	movs	r2, #15
 8002a1e:	fa02 f303 	lsl.w	r3, r2, r3
 8002a22:	43db      	mvns	r3, r3
 8002a24:	69ba      	ldr	r2, [r7, #24]
 8002a26:	4013      	ands	r3, r2
 8002a28:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	4a4e      	ldr	r2, [pc, #312]	; (8002b68 <HAL_GPIO_Init+0x304>)
 8002a2e:	4293      	cmp	r3, r2
 8002a30:	d025      	beq.n	8002a7e <HAL_GPIO_Init+0x21a>
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	4a4d      	ldr	r2, [pc, #308]	; (8002b6c <HAL_GPIO_Init+0x308>)
 8002a36:	4293      	cmp	r3, r2
 8002a38:	d01f      	beq.n	8002a7a <HAL_GPIO_Init+0x216>
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	4a4c      	ldr	r2, [pc, #304]	; (8002b70 <HAL_GPIO_Init+0x30c>)
 8002a3e:	4293      	cmp	r3, r2
 8002a40:	d019      	beq.n	8002a76 <HAL_GPIO_Init+0x212>
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	4a4b      	ldr	r2, [pc, #300]	; (8002b74 <HAL_GPIO_Init+0x310>)
 8002a46:	4293      	cmp	r3, r2
 8002a48:	d013      	beq.n	8002a72 <HAL_GPIO_Init+0x20e>
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	4a4a      	ldr	r2, [pc, #296]	; (8002b78 <HAL_GPIO_Init+0x314>)
 8002a4e:	4293      	cmp	r3, r2
 8002a50:	d00d      	beq.n	8002a6e <HAL_GPIO_Init+0x20a>
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	4a49      	ldr	r2, [pc, #292]	; (8002b7c <HAL_GPIO_Init+0x318>)
 8002a56:	4293      	cmp	r3, r2
 8002a58:	d007      	beq.n	8002a6a <HAL_GPIO_Init+0x206>
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	4a48      	ldr	r2, [pc, #288]	; (8002b80 <HAL_GPIO_Init+0x31c>)
 8002a5e:	4293      	cmp	r3, r2
 8002a60:	d101      	bne.n	8002a66 <HAL_GPIO_Init+0x202>
 8002a62:	2306      	movs	r3, #6
 8002a64:	e00c      	b.n	8002a80 <HAL_GPIO_Init+0x21c>
 8002a66:	2307      	movs	r3, #7
 8002a68:	e00a      	b.n	8002a80 <HAL_GPIO_Init+0x21c>
 8002a6a:	2305      	movs	r3, #5
 8002a6c:	e008      	b.n	8002a80 <HAL_GPIO_Init+0x21c>
 8002a6e:	2304      	movs	r3, #4
 8002a70:	e006      	b.n	8002a80 <HAL_GPIO_Init+0x21c>
 8002a72:	2303      	movs	r3, #3
 8002a74:	e004      	b.n	8002a80 <HAL_GPIO_Init+0x21c>
 8002a76:	2302      	movs	r3, #2
 8002a78:	e002      	b.n	8002a80 <HAL_GPIO_Init+0x21c>
 8002a7a:	2301      	movs	r3, #1
 8002a7c:	e000      	b.n	8002a80 <HAL_GPIO_Init+0x21c>
 8002a7e:	2300      	movs	r3, #0
 8002a80:	69fa      	ldr	r2, [r7, #28]
 8002a82:	f002 0203 	and.w	r2, r2, #3
 8002a86:	0092      	lsls	r2, r2, #2
 8002a88:	4093      	lsls	r3, r2
 8002a8a:	69ba      	ldr	r2, [r7, #24]
 8002a8c:	4313      	orrs	r3, r2
 8002a8e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002a90:	4934      	ldr	r1, [pc, #208]	; (8002b64 <HAL_GPIO_Init+0x300>)
 8002a92:	69fb      	ldr	r3, [r7, #28]
 8002a94:	089b      	lsrs	r3, r3, #2
 8002a96:	3302      	adds	r3, #2
 8002a98:	69ba      	ldr	r2, [r7, #24]
 8002a9a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002a9e:	4b39      	ldr	r3, [pc, #228]	; (8002b84 <HAL_GPIO_Init+0x320>)
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002aa4:	693b      	ldr	r3, [r7, #16]
 8002aa6:	43db      	mvns	r3, r3
 8002aa8:	69ba      	ldr	r2, [r7, #24]
 8002aaa:	4013      	ands	r3, r2
 8002aac:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002aae:	683b      	ldr	r3, [r7, #0]
 8002ab0:	685b      	ldr	r3, [r3, #4]
 8002ab2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002ab6:	2b00      	cmp	r3, #0
 8002ab8:	d003      	beq.n	8002ac2 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8002aba:	69ba      	ldr	r2, [r7, #24]
 8002abc:	693b      	ldr	r3, [r7, #16]
 8002abe:	4313      	orrs	r3, r2
 8002ac0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002ac2:	4a30      	ldr	r2, [pc, #192]	; (8002b84 <HAL_GPIO_Init+0x320>)
 8002ac4:	69bb      	ldr	r3, [r7, #24]
 8002ac6:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8002ac8:	4b2e      	ldr	r3, [pc, #184]	; (8002b84 <HAL_GPIO_Init+0x320>)
 8002aca:	685b      	ldr	r3, [r3, #4]
 8002acc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002ace:	693b      	ldr	r3, [r7, #16]
 8002ad0:	43db      	mvns	r3, r3
 8002ad2:	69ba      	ldr	r2, [r7, #24]
 8002ad4:	4013      	ands	r3, r2
 8002ad6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002ad8:	683b      	ldr	r3, [r7, #0]
 8002ada:	685b      	ldr	r3, [r3, #4]
 8002adc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ae0:	2b00      	cmp	r3, #0
 8002ae2:	d003      	beq.n	8002aec <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8002ae4:	69ba      	ldr	r2, [r7, #24]
 8002ae6:	693b      	ldr	r3, [r7, #16]
 8002ae8:	4313      	orrs	r3, r2
 8002aea:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002aec:	4a25      	ldr	r2, [pc, #148]	; (8002b84 <HAL_GPIO_Init+0x320>)
 8002aee:	69bb      	ldr	r3, [r7, #24]
 8002af0:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002af2:	4b24      	ldr	r3, [pc, #144]	; (8002b84 <HAL_GPIO_Init+0x320>)
 8002af4:	689b      	ldr	r3, [r3, #8]
 8002af6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002af8:	693b      	ldr	r3, [r7, #16]
 8002afa:	43db      	mvns	r3, r3
 8002afc:	69ba      	ldr	r2, [r7, #24]
 8002afe:	4013      	ands	r3, r2
 8002b00:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002b02:	683b      	ldr	r3, [r7, #0]
 8002b04:	685b      	ldr	r3, [r3, #4]
 8002b06:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002b0a:	2b00      	cmp	r3, #0
 8002b0c:	d003      	beq.n	8002b16 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8002b0e:	69ba      	ldr	r2, [r7, #24]
 8002b10:	693b      	ldr	r3, [r7, #16]
 8002b12:	4313      	orrs	r3, r2
 8002b14:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002b16:	4a1b      	ldr	r2, [pc, #108]	; (8002b84 <HAL_GPIO_Init+0x320>)
 8002b18:	69bb      	ldr	r3, [r7, #24]
 8002b1a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002b1c:	4b19      	ldr	r3, [pc, #100]	; (8002b84 <HAL_GPIO_Init+0x320>)
 8002b1e:	68db      	ldr	r3, [r3, #12]
 8002b20:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002b22:	693b      	ldr	r3, [r7, #16]
 8002b24:	43db      	mvns	r3, r3
 8002b26:	69ba      	ldr	r2, [r7, #24]
 8002b28:	4013      	ands	r3, r2
 8002b2a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002b2c:	683b      	ldr	r3, [r7, #0]
 8002b2e:	685b      	ldr	r3, [r3, #4]
 8002b30:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002b34:	2b00      	cmp	r3, #0
 8002b36:	d003      	beq.n	8002b40 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8002b38:	69ba      	ldr	r2, [r7, #24]
 8002b3a:	693b      	ldr	r3, [r7, #16]
 8002b3c:	4313      	orrs	r3, r2
 8002b3e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002b40:	4a10      	ldr	r2, [pc, #64]	; (8002b84 <HAL_GPIO_Init+0x320>)
 8002b42:	69bb      	ldr	r3, [r7, #24]
 8002b44:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002b46:	69fb      	ldr	r3, [r7, #28]
 8002b48:	3301      	adds	r3, #1
 8002b4a:	61fb      	str	r3, [r7, #28]
 8002b4c:	69fb      	ldr	r3, [r7, #28]
 8002b4e:	2b0f      	cmp	r3, #15
 8002b50:	f67f ae96 	bls.w	8002880 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002b54:	bf00      	nop
 8002b56:	3724      	adds	r7, #36	; 0x24
 8002b58:	46bd      	mov	sp, r7
 8002b5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b5e:	4770      	bx	lr
 8002b60:	40023800 	.word	0x40023800
 8002b64:	40013800 	.word	0x40013800
 8002b68:	40020000 	.word	0x40020000
 8002b6c:	40020400 	.word	0x40020400
 8002b70:	40020800 	.word	0x40020800
 8002b74:	40020c00 	.word	0x40020c00
 8002b78:	40021000 	.word	0x40021000
 8002b7c:	40021400 	.word	0x40021400
 8002b80:	40021800 	.word	0x40021800
 8002b84:	40013c00 	.word	0x40013c00

08002b88 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002b88:	b480      	push	{r7}
 8002b8a:	b085      	sub	sp, #20
 8002b8c:	af00      	add	r7, sp, #0
 8002b8e:	6078      	str	r0, [r7, #4]
 8002b90:	460b      	mov	r3, r1
 8002b92:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	691a      	ldr	r2, [r3, #16]
 8002b98:	887b      	ldrh	r3, [r7, #2]
 8002b9a:	4013      	ands	r3, r2
 8002b9c:	2b00      	cmp	r3, #0
 8002b9e:	d002      	beq.n	8002ba6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002ba0:	2301      	movs	r3, #1
 8002ba2:	73fb      	strb	r3, [r7, #15]
 8002ba4:	e001      	b.n	8002baa <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002ba6:	2300      	movs	r3, #0
 8002ba8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002baa:	7bfb      	ldrb	r3, [r7, #15]
}
 8002bac:	4618      	mov	r0, r3
 8002bae:	3714      	adds	r7, #20
 8002bb0:	46bd      	mov	sp, r7
 8002bb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bb6:	4770      	bx	lr

08002bb8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002bb8:	b480      	push	{r7}
 8002bba:	b083      	sub	sp, #12
 8002bbc:	af00      	add	r7, sp, #0
 8002bbe:	6078      	str	r0, [r7, #4]
 8002bc0:	460b      	mov	r3, r1
 8002bc2:	807b      	strh	r3, [r7, #2]
 8002bc4:	4613      	mov	r3, r2
 8002bc6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002bc8:	787b      	ldrb	r3, [r7, #1]
 8002bca:	2b00      	cmp	r3, #0
 8002bcc:	d003      	beq.n	8002bd6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002bce:	887a      	ldrh	r2, [r7, #2]
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002bd4:	e003      	b.n	8002bde <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002bd6:	887b      	ldrh	r3, [r7, #2]
 8002bd8:	041a      	lsls	r2, r3, #16
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	619a      	str	r2, [r3, #24]
}
 8002bde:	bf00      	nop
 8002be0:	370c      	adds	r7, #12
 8002be2:	46bd      	mov	sp, r7
 8002be4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002be8:	4770      	bx	lr

08002bea <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002bea:	b480      	push	{r7}
 8002bec:	b083      	sub	sp, #12
 8002bee:	af00      	add	r7, sp, #0
 8002bf0:	6078      	str	r0, [r7, #4]
 8002bf2:	460b      	mov	r3, r1
 8002bf4:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) == GPIO_Pin)
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	695a      	ldr	r2, [r3, #20]
 8002bfa:	887b      	ldrh	r3, [r7, #2]
 8002bfc:	401a      	ands	r2, r3
 8002bfe:	887b      	ldrh	r3, [r7, #2]
 8002c00:	429a      	cmp	r2, r3
 8002c02:	d104      	bne.n	8002c0e <HAL_GPIO_TogglePin+0x24>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8002c04:	887b      	ldrh	r3, [r7, #2]
 8002c06:	041a      	lsls	r2, r3, #16
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = GPIO_Pin;
  }
}
 8002c0c:	e002      	b.n	8002c14 <HAL_GPIO_TogglePin+0x2a>
    GPIOx->BSRR = GPIO_Pin;
 8002c0e:	887a      	ldrh	r2, [r7, #2]
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	619a      	str	r2, [r3, #24]
}
 8002c14:	bf00      	nop
 8002c16:	370c      	adds	r7, #12
 8002c18:	46bd      	mov	sp, r7
 8002c1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c1e:	4770      	bx	lr

08002c20 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002c20:	b580      	push	{r7, lr}
 8002c22:	b084      	sub	sp, #16
 8002c24:	af00      	add	r7, sp, #0
 8002c26:	6078      	str	r0, [r7, #4]
 8002c28:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	2b00      	cmp	r3, #0
 8002c2e:	d101      	bne.n	8002c34 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002c30:	2301      	movs	r3, #1
 8002c32:	e0cc      	b.n	8002dce <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002c34:	4b68      	ldr	r3, [pc, #416]	; (8002dd8 <HAL_RCC_ClockConfig+0x1b8>)
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	f003 030f 	and.w	r3, r3, #15
 8002c3c:	683a      	ldr	r2, [r7, #0]
 8002c3e:	429a      	cmp	r2, r3
 8002c40:	d90c      	bls.n	8002c5c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002c42:	4b65      	ldr	r3, [pc, #404]	; (8002dd8 <HAL_RCC_ClockConfig+0x1b8>)
 8002c44:	683a      	ldr	r2, [r7, #0]
 8002c46:	b2d2      	uxtb	r2, r2
 8002c48:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002c4a:	4b63      	ldr	r3, [pc, #396]	; (8002dd8 <HAL_RCC_ClockConfig+0x1b8>)
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	f003 030f 	and.w	r3, r3, #15
 8002c52:	683a      	ldr	r2, [r7, #0]
 8002c54:	429a      	cmp	r2, r3
 8002c56:	d001      	beq.n	8002c5c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002c58:	2301      	movs	r3, #1
 8002c5a:	e0b8      	b.n	8002dce <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	f003 0302 	and.w	r3, r3, #2
 8002c64:	2b00      	cmp	r3, #0
 8002c66:	d020      	beq.n	8002caa <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	f003 0304 	and.w	r3, r3, #4
 8002c70:	2b00      	cmp	r3, #0
 8002c72:	d005      	beq.n	8002c80 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002c74:	4b59      	ldr	r3, [pc, #356]	; (8002ddc <HAL_RCC_ClockConfig+0x1bc>)
 8002c76:	689b      	ldr	r3, [r3, #8]
 8002c78:	4a58      	ldr	r2, [pc, #352]	; (8002ddc <HAL_RCC_ClockConfig+0x1bc>)
 8002c7a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002c7e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	f003 0308 	and.w	r3, r3, #8
 8002c88:	2b00      	cmp	r3, #0
 8002c8a:	d005      	beq.n	8002c98 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002c8c:	4b53      	ldr	r3, [pc, #332]	; (8002ddc <HAL_RCC_ClockConfig+0x1bc>)
 8002c8e:	689b      	ldr	r3, [r3, #8]
 8002c90:	4a52      	ldr	r2, [pc, #328]	; (8002ddc <HAL_RCC_ClockConfig+0x1bc>)
 8002c92:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002c96:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002c98:	4b50      	ldr	r3, [pc, #320]	; (8002ddc <HAL_RCC_ClockConfig+0x1bc>)
 8002c9a:	689b      	ldr	r3, [r3, #8]
 8002c9c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	689b      	ldr	r3, [r3, #8]
 8002ca4:	494d      	ldr	r1, [pc, #308]	; (8002ddc <HAL_RCC_ClockConfig+0x1bc>)
 8002ca6:	4313      	orrs	r3, r2
 8002ca8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	f003 0301 	and.w	r3, r3, #1
 8002cb2:	2b00      	cmp	r3, #0
 8002cb4:	d044      	beq.n	8002d40 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	685b      	ldr	r3, [r3, #4]
 8002cba:	2b01      	cmp	r3, #1
 8002cbc:	d107      	bne.n	8002cce <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002cbe:	4b47      	ldr	r3, [pc, #284]	; (8002ddc <HAL_RCC_ClockConfig+0x1bc>)
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002cc6:	2b00      	cmp	r3, #0
 8002cc8:	d119      	bne.n	8002cfe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002cca:	2301      	movs	r3, #1
 8002ccc:	e07f      	b.n	8002dce <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	685b      	ldr	r3, [r3, #4]
 8002cd2:	2b02      	cmp	r3, #2
 8002cd4:	d003      	beq.n	8002cde <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002cda:	2b03      	cmp	r3, #3
 8002cdc:	d107      	bne.n	8002cee <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002cde:	4b3f      	ldr	r3, [pc, #252]	; (8002ddc <HAL_RCC_ClockConfig+0x1bc>)
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002ce6:	2b00      	cmp	r3, #0
 8002ce8:	d109      	bne.n	8002cfe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002cea:	2301      	movs	r3, #1
 8002cec:	e06f      	b.n	8002dce <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002cee:	4b3b      	ldr	r3, [pc, #236]	; (8002ddc <HAL_RCC_ClockConfig+0x1bc>)
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	f003 0302 	and.w	r3, r3, #2
 8002cf6:	2b00      	cmp	r3, #0
 8002cf8:	d101      	bne.n	8002cfe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002cfa:	2301      	movs	r3, #1
 8002cfc:	e067      	b.n	8002dce <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002cfe:	4b37      	ldr	r3, [pc, #220]	; (8002ddc <HAL_RCC_ClockConfig+0x1bc>)
 8002d00:	689b      	ldr	r3, [r3, #8]
 8002d02:	f023 0203 	bic.w	r2, r3, #3
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	685b      	ldr	r3, [r3, #4]
 8002d0a:	4934      	ldr	r1, [pc, #208]	; (8002ddc <HAL_RCC_ClockConfig+0x1bc>)
 8002d0c:	4313      	orrs	r3, r2
 8002d0e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002d10:	f7fe fd30 	bl	8001774 <HAL_GetTick>
 8002d14:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002d16:	e00a      	b.n	8002d2e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002d18:	f7fe fd2c 	bl	8001774 <HAL_GetTick>
 8002d1c:	4602      	mov	r2, r0
 8002d1e:	68fb      	ldr	r3, [r7, #12]
 8002d20:	1ad3      	subs	r3, r2, r3
 8002d22:	f241 3288 	movw	r2, #5000	; 0x1388
 8002d26:	4293      	cmp	r3, r2
 8002d28:	d901      	bls.n	8002d2e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002d2a:	2303      	movs	r3, #3
 8002d2c:	e04f      	b.n	8002dce <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002d2e:	4b2b      	ldr	r3, [pc, #172]	; (8002ddc <HAL_RCC_ClockConfig+0x1bc>)
 8002d30:	689b      	ldr	r3, [r3, #8]
 8002d32:	f003 020c 	and.w	r2, r3, #12
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	685b      	ldr	r3, [r3, #4]
 8002d3a:	009b      	lsls	r3, r3, #2
 8002d3c:	429a      	cmp	r2, r3
 8002d3e:	d1eb      	bne.n	8002d18 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002d40:	4b25      	ldr	r3, [pc, #148]	; (8002dd8 <HAL_RCC_ClockConfig+0x1b8>)
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	f003 030f 	and.w	r3, r3, #15
 8002d48:	683a      	ldr	r2, [r7, #0]
 8002d4a:	429a      	cmp	r2, r3
 8002d4c:	d20c      	bcs.n	8002d68 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002d4e:	4b22      	ldr	r3, [pc, #136]	; (8002dd8 <HAL_RCC_ClockConfig+0x1b8>)
 8002d50:	683a      	ldr	r2, [r7, #0]
 8002d52:	b2d2      	uxtb	r2, r2
 8002d54:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002d56:	4b20      	ldr	r3, [pc, #128]	; (8002dd8 <HAL_RCC_ClockConfig+0x1b8>)
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	f003 030f 	and.w	r3, r3, #15
 8002d5e:	683a      	ldr	r2, [r7, #0]
 8002d60:	429a      	cmp	r2, r3
 8002d62:	d001      	beq.n	8002d68 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002d64:	2301      	movs	r3, #1
 8002d66:	e032      	b.n	8002dce <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	f003 0304 	and.w	r3, r3, #4
 8002d70:	2b00      	cmp	r3, #0
 8002d72:	d008      	beq.n	8002d86 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002d74:	4b19      	ldr	r3, [pc, #100]	; (8002ddc <HAL_RCC_ClockConfig+0x1bc>)
 8002d76:	689b      	ldr	r3, [r3, #8]
 8002d78:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	68db      	ldr	r3, [r3, #12]
 8002d80:	4916      	ldr	r1, [pc, #88]	; (8002ddc <HAL_RCC_ClockConfig+0x1bc>)
 8002d82:	4313      	orrs	r3, r2
 8002d84:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	f003 0308 	and.w	r3, r3, #8
 8002d8e:	2b00      	cmp	r3, #0
 8002d90:	d009      	beq.n	8002da6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002d92:	4b12      	ldr	r3, [pc, #72]	; (8002ddc <HAL_RCC_ClockConfig+0x1bc>)
 8002d94:	689b      	ldr	r3, [r3, #8]
 8002d96:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	691b      	ldr	r3, [r3, #16]
 8002d9e:	00db      	lsls	r3, r3, #3
 8002da0:	490e      	ldr	r1, [pc, #56]	; (8002ddc <HAL_RCC_ClockConfig+0x1bc>)
 8002da2:	4313      	orrs	r3, r2
 8002da4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002da6:	f000 f855 	bl	8002e54 <HAL_RCC_GetSysClockFreq>
 8002daa:	4601      	mov	r1, r0
 8002dac:	4b0b      	ldr	r3, [pc, #44]	; (8002ddc <HAL_RCC_ClockConfig+0x1bc>)
 8002dae:	689b      	ldr	r3, [r3, #8]
 8002db0:	091b      	lsrs	r3, r3, #4
 8002db2:	f003 030f 	and.w	r3, r3, #15
 8002db6:	4a0a      	ldr	r2, [pc, #40]	; (8002de0 <HAL_RCC_ClockConfig+0x1c0>)
 8002db8:	5cd3      	ldrb	r3, [r2, r3]
 8002dba:	fa21 f303 	lsr.w	r3, r1, r3
 8002dbe:	4a09      	ldr	r2, [pc, #36]	; (8002de4 <HAL_RCC_ClockConfig+0x1c4>)
 8002dc0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002dc2:	4b09      	ldr	r3, [pc, #36]	; (8002de8 <HAL_RCC_ClockConfig+0x1c8>)
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	4618      	mov	r0, r3
 8002dc8:	f7fe fc90 	bl	80016ec <HAL_InitTick>

  return HAL_OK;
 8002dcc:	2300      	movs	r3, #0
}
 8002dce:	4618      	mov	r0, r3
 8002dd0:	3710      	adds	r7, #16
 8002dd2:	46bd      	mov	sp, r7
 8002dd4:	bd80      	pop	{r7, pc}
 8002dd6:	bf00      	nop
 8002dd8:	40023c00 	.word	0x40023c00
 8002ddc:	40023800 	.word	0x40023800
 8002de0:	080050a4 	.word	0x080050a4
 8002de4:	20000000 	.word	0x20000000
 8002de8:	20000004 	.word	0x20000004

08002dec <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002dec:	b480      	push	{r7}
 8002dee:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002df0:	4b03      	ldr	r3, [pc, #12]	; (8002e00 <HAL_RCC_GetHCLKFreq+0x14>)
 8002df2:	681b      	ldr	r3, [r3, #0]
}
 8002df4:	4618      	mov	r0, r3
 8002df6:	46bd      	mov	sp, r7
 8002df8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dfc:	4770      	bx	lr
 8002dfe:	bf00      	nop
 8002e00:	20000000 	.word	0x20000000

08002e04 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002e04:	b580      	push	{r7, lr}
 8002e06:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002e08:	f7ff fff0 	bl	8002dec <HAL_RCC_GetHCLKFreq>
 8002e0c:	4601      	mov	r1, r0
 8002e0e:	4b05      	ldr	r3, [pc, #20]	; (8002e24 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002e10:	689b      	ldr	r3, [r3, #8]
 8002e12:	0a9b      	lsrs	r3, r3, #10
 8002e14:	f003 0307 	and.w	r3, r3, #7
 8002e18:	4a03      	ldr	r2, [pc, #12]	; (8002e28 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002e1a:	5cd3      	ldrb	r3, [r2, r3]
 8002e1c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002e20:	4618      	mov	r0, r3
 8002e22:	bd80      	pop	{r7, pc}
 8002e24:	40023800 	.word	0x40023800
 8002e28:	080050b4 	.word	0x080050b4

08002e2c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002e2c:	b580      	push	{r7, lr}
 8002e2e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002e30:	f7ff ffdc 	bl	8002dec <HAL_RCC_GetHCLKFreq>
 8002e34:	4601      	mov	r1, r0
 8002e36:	4b05      	ldr	r3, [pc, #20]	; (8002e4c <HAL_RCC_GetPCLK2Freq+0x20>)
 8002e38:	689b      	ldr	r3, [r3, #8]
 8002e3a:	0b5b      	lsrs	r3, r3, #13
 8002e3c:	f003 0307 	and.w	r3, r3, #7
 8002e40:	4a03      	ldr	r2, [pc, #12]	; (8002e50 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002e42:	5cd3      	ldrb	r3, [r2, r3]
 8002e44:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002e48:	4618      	mov	r0, r3
 8002e4a:	bd80      	pop	{r7, pc}
 8002e4c:	40023800 	.word	0x40023800
 8002e50:	080050b4 	.word	0x080050b4

08002e54 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002e54:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002e56:	b087      	sub	sp, #28
 8002e58:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8002e5a:	2300      	movs	r3, #0
 8002e5c:	60fb      	str	r3, [r7, #12]
  uint32_t pllvco = 0U;
 8002e5e:	2300      	movs	r3, #0
 8002e60:	617b      	str	r3, [r7, #20]
  uint32_t pllp = 0U;
 8002e62:	2300      	movs	r3, #0
 8002e64:	60bb      	str	r3, [r7, #8]
  uint32_t pllr = 0U;
 8002e66:	2300      	movs	r3, #0
 8002e68:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8002e6a:	2300      	movs	r3, #0
 8002e6c:	613b      	str	r3, [r7, #16]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002e6e:	4bc6      	ldr	r3, [pc, #792]	; (8003188 <HAL_RCC_GetSysClockFreq+0x334>)
 8002e70:	689b      	ldr	r3, [r3, #8]
 8002e72:	f003 030c 	and.w	r3, r3, #12
 8002e76:	2b0c      	cmp	r3, #12
 8002e78:	f200 817e 	bhi.w	8003178 <HAL_RCC_GetSysClockFreq+0x324>
 8002e7c:	a201      	add	r2, pc, #4	; (adr r2, 8002e84 <HAL_RCC_GetSysClockFreq+0x30>)
 8002e7e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002e82:	bf00      	nop
 8002e84:	08002eb9 	.word	0x08002eb9
 8002e88:	08003179 	.word	0x08003179
 8002e8c:	08003179 	.word	0x08003179
 8002e90:	08003179 	.word	0x08003179
 8002e94:	08002ebf 	.word	0x08002ebf
 8002e98:	08003179 	.word	0x08003179
 8002e9c:	08003179 	.word	0x08003179
 8002ea0:	08003179 	.word	0x08003179
 8002ea4:	08002ec5 	.word	0x08002ec5
 8002ea8:	08003179 	.word	0x08003179
 8002eac:	08003179 	.word	0x08003179
 8002eb0:	08003179 	.word	0x08003179
 8002eb4:	08003021 	.word	0x08003021
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002eb8:	4bb4      	ldr	r3, [pc, #720]	; (800318c <HAL_RCC_GetSysClockFreq+0x338>)
 8002eba:	613b      	str	r3, [r7, #16]
       break;
 8002ebc:	e15f      	b.n	800317e <HAL_RCC_GetSysClockFreq+0x32a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002ebe:	4bb4      	ldr	r3, [pc, #720]	; (8003190 <HAL_RCC_GetSysClockFreq+0x33c>)
 8002ec0:	613b      	str	r3, [r7, #16]
      break;
 8002ec2:	e15c      	b.n	800317e <HAL_RCC_GetSysClockFreq+0x32a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002ec4:	4bb0      	ldr	r3, [pc, #704]	; (8003188 <HAL_RCC_GetSysClockFreq+0x334>)
 8002ec6:	685b      	ldr	r3, [r3, #4]
 8002ec8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002ecc:	60fb      	str	r3, [r7, #12]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002ece:	4bae      	ldr	r3, [pc, #696]	; (8003188 <HAL_RCC_GetSysClockFreq+0x334>)
 8002ed0:	685b      	ldr	r3, [r3, #4]
 8002ed2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002ed6:	2b00      	cmp	r3, #0
 8002ed8:	d04a      	beq.n	8002f70 <HAL_RCC_GetSysClockFreq+0x11c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002eda:	4bab      	ldr	r3, [pc, #684]	; (8003188 <HAL_RCC_GetSysClockFreq+0x334>)
 8002edc:	685b      	ldr	r3, [r3, #4]
 8002ede:	099b      	lsrs	r3, r3, #6
 8002ee0:	f04f 0400 	mov.w	r4, #0
 8002ee4:	f240 11ff 	movw	r1, #511	; 0x1ff
 8002ee8:	f04f 0200 	mov.w	r2, #0
 8002eec:	ea03 0501 	and.w	r5, r3, r1
 8002ef0:	ea04 0602 	and.w	r6, r4, r2
 8002ef4:	4629      	mov	r1, r5
 8002ef6:	4632      	mov	r2, r6
 8002ef8:	f04f 0300 	mov.w	r3, #0
 8002efc:	f04f 0400 	mov.w	r4, #0
 8002f00:	0154      	lsls	r4, r2, #5
 8002f02:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8002f06:	014b      	lsls	r3, r1, #5
 8002f08:	4619      	mov	r1, r3
 8002f0a:	4622      	mov	r2, r4
 8002f0c:	1b49      	subs	r1, r1, r5
 8002f0e:	eb62 0206 	sbc.w	r2, r2, r6
 8002f12:	f04f 0300 	mov.w	r3, #0
 8002f16:	f04f 0400 	mov.w	r4, #0
 8002f1a:	0194      	lsls	r4, r2, #6
 8002f1c:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8002f20:	018b      	lsls	r3, r1, #6
 8002f22:	1a5b      	subs	r3, r3, r1
 8002f24:	eb64 0402 	sbc.w	r4, r4, r2
 8002f28:	f04f 0100 	mov.w	r1, #0
 8002f2c:	f04f 0200 	mov.w	r2, #0
 8002f30:	00e2      	lsls	r2, r4, #3
 8002f32:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8002f36:	00d9      	lsls	r1, r3, #3
 8002f38:	460b      	mov	r3, r1
 8002f3a:	4614      	mov	r4, r2
 8002f3c:	195b      	adds	r3, r3, r5
 8002f3e:	eb44 0406 	adc.w	r4, r4, r6
 8002f42:	f04f 0100 	mov.w	r1, #0
 8002f46:	f04f 0200 	mov.w	r2, #0
 8002f4a:	0262      	lsls	r2, r4, #9
 8002f4c:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8002f50:	0259      	lsls	r1, r3, #9
 8002f52:	460b      	mov	r3, r1
 8002f54:	4614      	mov	r4, r2
 8002f56:	4618      	mov	r0, r3
 8002f58:	4621      	mov	r1, r4
 8002f5a:	68fb      	ldr	r3, [r7, #12]
 8002f5c:	f04f 0400 	mov.w	r4, #0
 8002f60:	461a      	mov	r2, r3
 8002f62:	4623      	mov	r3, r4
 8002f64:	f7fd fdc2 	bl	8000aec <__aeabi_uldivmod>
 8002f68:	4603      	mov	r3, r0
 8002f6a:	460c      	mov	r4, r1
 8002f6c:	617b      	str	r3, [r7, #20]
 8002f6e:	e049      	b.n	8003004 <HAL_RCC_GetSysClockFreq+0x1b0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002f70:	4b85      	ldr	r3, [pc, #532]	; (8003188 <HAL_RCC_GetSysClockFreq+0x334>)
 8002f72:	685b      	ldr	r3, [r3, #4]
 8002f74:	099b      	lsrs	r3, r3, #6
 8002f76:	f04f 0400 	mov.w	r4, #0
 8002f7a:	f240 11ff 	movw	r1, #511	; 0x1ff
 8002f7e:	f04f 0200 	mov.w	r2, #0
 8002f82:	ea03 0501 	and.w	r5, r3, r1
 8002f86:	ea04 0602 	and.w	r6, r4, r2
 8002f8a:	4629      	mov	r1, r5
 8002f8c:	4632      	mov	r2, r6
 8002f8e:	f04f 0300 	mov.w	r3, #0
 8002f92:	f04f 0400 	mov.w	r4, #0
 8002f96:	0154      	lsls	r4, r2, #5
 8002f98:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8002f9c:	014b      	lsls	r3, r1, #5
 8002f9e:	4619      	mov	r1, r3
 8002fa0:	4622      	mov	r2, r4
 8002fa2:	1b49      	subs	r1, r1, r5
 8002fa4:	eb62 0206 	sbc.w	r2, r2, r6
 8002fa8:	f04f 0300 	mov.w	r3, #0
 8002fac:	f04f 0400 	mov.w	r4, #0
 8002fb0:	0194      	lsls	r4, r2, #6
 8002fb2:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8002fb6:	018b      	lsls	r3, r1, #6
 8002fb8:	1a5b      	subs	r3, r3, r1
 8002fba:	eb64 0402 	sbc.w	r4, r4, r2
 8002fbe:	f04f 0100 	mov.w	r1, #0
 8002fc2:	f04f 0200 	mov.w	r2, #0
 8002fc6:	00e2      	lsls	r2, r4, #3
 8002fc8:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8002fcc:	00d9      	lsls	r1, r3, #3
 8002fce:	460b      	mov	r3, r1
 8002fd0:	4614      	mov	r4, r2
 8002fd2:	195b      	adds	r3, r3, r5
 8002fd4:	eb44 0406 	adc.w	r4, r4, r6
 8002fd8:	f04f 0100 	mov.w	r1, #0
 8002fdc:	f04f 0200 	mov.w	r2, #0
 8002fe0:	02a2      	lsls	r2, r4, #10
 8002fe2:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8002fe6:	0299      	lsls	r1, r3, #10
 8002fe8:	460b      	mov	r3, r1
 8002fea:	4614      	mov	r4, r2
 8002fec:	4618      	mov	r0, r3
 8002fee:	4621      	mov	r1, r4
 8002ff0:	68fb      	ldr	r3, [r7, #12]
 8002ff2:	f04f 0400 	mov.w	r4, #0
 8002ff6:	461a      	mov	r2, r3
 8002ff8:	4623      	mov	r3, r4
 8002ffa:	f7fd fd77 	bl	8000aec <__aeabi_uldivmod>
 8002ffe:	4603      	mov	r3, r0
 8003000:	460c      	mov	r4, r1
 8003002:	617b      	str	r3, [r7, #20]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003004:	4b60      	ldr	r3, [pc, #384]	; (8003188 <HAL_RCC_GetSysClockFreq+0x334>)
 8003006:	685b      	ldr	r3, [r3, #4]
 8003008:	0c1b      	lsrs	r3, r3, #16
 800300a:	f003 0303 	and.w	r3, r3, #3
 800300e:	3301      	adds	r3, #1
 8003010:	005b      	lsls	r3, r3, #1
 8003012:	60bb      	str	r3, [r7, #8]

      sysclockfreq = pllvco/pllp;
 8003014:	697a      	ldr	r2, [r7, #20]
 8003016:	68bb      	ldr	r3, [r7, #8]
 8003018:	fbb2 f3f3 	udiv	r3, r2, r3
 800301c:	613b      	str	r3, [r7, #16]
      break;
 800301e:	e0ae      	b.n	800317e <HAL_RCC_GetSysClockFreq+0x32a>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003020:	4b59      	ldr	r3, [pc, #356]	; (8003188 <HAL_RCC_GetSysClockFreq+0x334>)
 8003022:	685b      	ldr	r3, [r3, #4]
 8003024:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003028:	60fb      	str	r3, [r7, #12]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800302a:	4b57      	ldr	r3, [pc, #348]	; (8003188 <HAL_RCC_GetSysClockFreq+0x334>)
 800302c:	685b      	ldr	r3, [r3, #4]
 800302e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003032:	2b00      	cmp	r3, #0
 8003034:	d04a      	beq.n	80030cc <HAL_RCC_GetSysClockFreq+0x278>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003036:	4b54      	ldr	r3, [pc, #336]	; (8003188 <HAL_RCC_GetSysClockFreq+0x334>)
 8003038:	685b      	ldr	r3, [r3, #4]
 800303a:	099b      	lsrs	r3, r3, #6
 800303c:	f04f 0400 	mov.w	r4, #0
 8003040:	f240 11ff 	movw	r1, #511	; 0x1ff
 8003044:	f04f 0200 	mov.w	r2, #0
 8003048:	ea03 0501 	and.w	r5, r3, r1
 800304c:	ea04 0602 	and.w	r6, r4, r2
 8003050:	4629      	mov	r1, r5
 8003052:	4632      	mov	r2, r6
 8003054:	f04f 0300 	mov.w	r3, #0
 8003058:	f04f 0400 	mov.w	r4, #0
 800305c:	0154      	lsls	r4, r2, #5
 800305e:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8003062:	014b      	lsls	r3, r1, #5
 8003064:	4619      	mov	r1, r3
 8003066:	4622      	mov	r2, r4
 8003068:	1b49      	subs	r1, r1, r5
 800306a:	eb62 0206 	sbc.w	r2, r2, r6
 800306e:	f04f 0300 	mov.w	r3, #0
 8003072:	f04f 0400 	mov.w	r4, #0
 8003076:	0194      	lsls	r4, r2, #6
 8003078:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 800307c:	018b      	lsls	r3, r1, #6
 800307e:	1a5b      	subs	r3, r3, r1
 8003080:	eb64 0402 	sbc.w	r4, r4, r2
 8003084:	f04f 0100 	mov.w	r1, #0
 8003088:	f04f 0200 	mov.w	r2, #0
 800308c:	00e2      	lsls	r2, r4, #3
 800308e:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8003092:	00d9      	lsls	r1, r3, #3
 8003094:	460b      	mov	r3, r1
 8003096:	4614      	mov	r4, r2
 8003098:	195b      	adds	r3, r3, r5
 800309a:	eb44 0406 	adc.w	r4, r4, r6
 800309e:	f04f 0100 	mov.w	r1, #0
 80030a2:	f04f 0200 	mov.w	r2, #0
 80030a6:	0262      	lsls	r2, r4, #9
 80030a8:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 80030ac:	0259      	lsls	r1, r3, #9
 80030ae:	460b      	mov	r3, r1
 80030b0:	4614      	mov	r4, r2
 80030b2:	4618      	mov	r0, r3
 80030b4:	4621      	mov	r1, r4
 80030b6:	68fb      	ldr	r3, [r7, #12]
 80030b8:	f04f 0400 	mov.w	r4, #0
 80030bc:	461a      	mov	r2, r3
 80030be:	4623      	mov	r3, r4
 80030c0:	f7fd fd14 	bl	8000aec <__aeabi_uldivmod>
 80030c4:	4603      	mov	r3, r0
 80030c6:	460c      	mov	r4, r1
 80030c8:	617b      	str	r3, [r7, #20]
 80030ca:	e049      	b.n	8003160 <HAL_RCC_GetSysClockFreq+0x30c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80030cc:	4b2e      	ldr	r3, [pc, #184]	; (8003188 <HAL_RCC_GetSysClockFreq+0x334>)
 80030ce:	685b      	ldr	r3, [r3, #4]
 80030d0:	099b      	lsrs	r3, r3, #6
 80030d2:	f04f 0400 	mov.w	r4, #0
 80030d6:	f240 11ff 	movw	r1, #511	; 0x1ff
 80030da:	f04f 0200 	mov.w	r2, #0
 80030de:	ea03 0501 	and.w	r5, r3, r1
 80030e2:	ea04 0602 	and.w	r6, r4, r2
 80030e6:	4629      	mov	r1, r5
 80030e8:	4632      	mov	r2, r6
 80030ea:	f04f 0300 	mov.w	r3, #0
 80030ee:	f04f 0400 	mov.w	r4, #0
 80030f2:	0154      	lsls	r4, r2, #5
 80030f4:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80030f8:	014b      	lsls	r3, r1, #5
 80030fa:	4619      	mov	r1, r3
 80030fc:	4622      	mov	r2, r4
 80030fe:	1b49      	subs	r1, r1, r5
 8003100:	eb62 0206 	sbc.w	r2, r2, r6
 8003104:	f04f 0300 	mov.w	r3, #0
 8003108:	f04f 0400 	mov.w	r4, #0
 800310c:	0194      	lsls	r4, r2, #6
 800310e:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8003112:	018b      	lsls	r3, r1, #6
 8003114:	1a5b      	subs	r3, r3, r1
 8003116:	eb64 0402 	sbc.w	r4, r4, r2
 800311a:	f04f 0100 	mov.w	r1, #0
 800311e:	f04f 0200 	mov.w	r2, #0
 8003122:	00e2      	lsls	r2, r4, #3
 8003124:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8003128:	00d9      	lsls	r1, r3, #3
 800312a:	460b      	mov	r3, r1
 800312c:	4614      	mov	r4, r2
 800312e:	195b      	adds	r3, r3, r5
 8003130:	eb44 0406 	adc.w	r4, r4, r6
 8003134:	f04f 0100 	mov.w	r1, #0
 8003138:	f04f 0200 	mov.w	r2, #0
 800313c:	02a2      	lsls	r2, r4, #10
 800313e:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8003142:	0299      	lsls	r1, r3, #10
 8003144:	460b      	mov	r3, r1
 8003146:	4614      	mov	r4, r2
 8003148:	4618      	mov	r0, r3
 800314a:	4621      	mov	r1, r4
 800314c:	68fb      	ldr	r3, [r7, #12]
 800314e:	f04f 0400 	mov.w	r4, #0
 8003152:	461a      	mov	r2, r3
 8003154:	4623      	mov	r3, r4
 8003156:	f7fd fcc9 	bl	8000aec <__aeabi_uldivmod>
 800315a:	4603      	mov	r3, r0
 800315c:	460c      	mov	r4, r1
 800315e:	617b      	str	r3, [r7, #20]
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8003160:	4b09      	ldr	r3, [pc, #36]	; (8003188 <HAL_RCC_GetSysClockFreq+0x334>)
 8003162:	685b      	ldr	r3, [r3, #4]
 8003164:	0f1b      	lsrs	r3, r3, #28
 8003166:	f003 0307 	and.w	r3, r3, #7
 800316a:	607b      	str	r3, [r7, #4]

      sysclockfreq = pllvco/pllr;
 800316c:	697a      	ldr	r2, [r7, #20]
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	fbb2 f3f3 	udiv	r3, r2, r3
 8003174:	613b      	str	r3, [r7, #16]
      break;
 8003176:	e002      	b.n	800317e <HAL_RCC_GetSysClockFreq+0x32a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003178:	4b04      	ldr	r3, [pc, #16]	; (800318c <HAL_RCC_GetSysClockFreq+0x338>)
 800317a:	613b      	str	r3, [r7, #16]
      break;
 800317c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800317e:	693b      	ldr	r3, [r7, #16]
}
 8003180:	4618      	mov	r0, r3
 8003182:	371c      	adds	r7, #28
 8003184:	46bd      	mov	sp, r7
 8003186:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003188:	40023800 	.word	0x40023800
 800318c:	00f42400 	.word	0x00f42400
 8003190:	007a1200 	.word	0x007a1200

08003194 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003194:	b580      	push	{r7, lr}
 8003196:	b086      	sub	sp, #24
 8003198:	af00      	add	r7, sp, #0
 800319a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800319c:	2300      	movs	r3, #0
 800319e:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	f003 0301 	and.w	r3, r3, #1
 80031a8:	2b00      	cmp	r3, #0
 80031aa:	f000 8083 	beq.w	80032b4 <HAL_RCC_OscConfig+0x120>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80031ae:	4b95      	ldr	r3, [pc, #596]	; (8003404 <HAL_RCC_OscConfig+0x270>)
 80031b0:	689b      	ldr	r3, [r3, #8]
 80031b2:	f003 030c 	and.w	r3, r3, #12
 80031b6:	2b04      	cmp	r3, #4
 80031b8:	d019      	beq.n	80031ee <HAL_RCC_OscConfig+0x5a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80031ba:	4b92      	ldr	r3, [pc, #584]	; (8003404 <HAL_RCC_OscConfig+0x270>)
 80031bc:	689b      	ldr	r3, [r3, #8]
 80031be:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80031c2:	2b08      	cmp	r3, #8
 80031c4:	d106      	bne.n	80031d4 <HAL_RCC_OscConfig+0x40>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80031c6:	4b8f      	ldr	r3, [pc, #572]	; (8003404 <HAL_RCC_OscConfig+0x270>)
 80031c8:	685b      	ldr	r3, [r3, #4]
 80031ca:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80031ce:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80031d2:	d00c      	beq.n	80031ee <HAL_RCC_OscConfig+0x5a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80031d4:	4b8b      	ldr	r3, [pc, #556]	; (8003404 <HAL_RCC_OscConfig+0x270>)
 80031d6:	689b      	ldr	r3, [r3, #8]
 80031d8:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80031dc:	2b0c      	cmp	r3, #12
 80031de:	d112      	bne.n	8003206 <HAL_RCC_OscConfig+0x72>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80031e0:	4b88      	ldr	r3, [pc, #544]	; (8003404 <HAL_RCC_OscConfig+0x270>)
 80031e2:	685b      	ldr	r3, [r3, #4]
 80031e4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80031e8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80031ec:	d10b      	bne.n	8003206 <HAL_RCC_OscConfig+0x72>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80031ee:	4b85      	ldr	r3, [pc, #532]	; (8003404 <HAL_RCC_OscConfig+0x270>)
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80031f6:	2b00      	cmp	r3, #0
 80031f8:	d05b      	beq.n	80032b2 <HAL_RCC_OscConfig+0x11e>
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	685b      	ldr	r3, [r3, #4]
 80031fe:	2b00      	cmp	r3, #0
 8003200:	d157      	bne.n	80032b2 <HAL_RCC_OscConfig+0x11e>
      {
        return HAL_ERROR;
 8003202:	2301      	movs	r3, #1
 8003204:	e216      	b.n	8003634 <HAL_RCC_OscConfig+0x4a0>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	685b      	ldr	r3, [r3, #4]
 800320a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800320e:	d106      	bne.n	800321e <HAL_RCC_OscConfig+0x8a>
 8003210:	4b7c      	ldr	r3, [pc, #496]	; (8003404 <HAL_RCC_OscConfig+0x270>)
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	4a7b      	ldr	r2, [pc, #492]	; (8003404 <HAL_RCC_OscConfig+0x270>)
 8003216:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800321a:	6013      	str	r3, [r2, #0]
 800321c:	e01d      	b.n	800325a <HAL_RCC_OscConfig+0xc6>
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	685b      	ldr	r3, [r3, #4]
 8003222:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003226:	d10c      	bne.n	8003242 <HAL_RCC_OscConfig+0xae>
 8003228:	4b76      	ldr	r3, [pc, #472]	; (8003404 <HAL_RCC_OscConfig+0x270>)
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	4a75      	ldr	r2, [pc, #468]	; (8003404 <HAL_RCC_OscConfig+0x270>)
 800322e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003232:	6013      	str	r3, [r2, #0]
 8003234:	4b73      	ldr	r3, [pc, #460]	; (8003404 <HAL_RCC_OscConfig+0x270>)
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	4a72      	ldr	r2, [pc, #456]	; (8003404 <HAL_RCC_OscConfig+0x270>)
 800323a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800323e:	6013      	str	r3, [r2, #0]
 8003240:	e00b      	b.n	800325a <HAL_RCC_OscConfig+0xc6>
 8003242:	4b70      	ldr	r3, [pc, #448]	; (8003404 <HAL_RCC_OscConfig+0x270>)
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	4a6f      	ldr	r2, [pc, #444]	; (8003404 <HAL_RCC_OscConfig+0x270>)
 8003248:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800324c:	6013      	str	r3, [r2, #0]
 800324e:	4b6d      	ldr	r3, [pc, #436]	; (8003404 <HAL_RCC_OscConfig+0x270>)
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	4a6c      	ldr	r2, [pc, #432]	; (8003404 <HAL_RCC_OscConfig+0x270>)
 8003254:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003258:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	685b      	ldr	r3, [r3, #4]
 800325e:	2b00      	cmp	r3, #0
 8003260:	d013      	beq.n	800328a <HAL_RCC_OscConfig+0xf6>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003262:	f7fe fa87 	bl	8001774 <HAL_GetTick>
 8003266:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003268:	e008      	b.n	800327c <HAL_RCC_OscConfig+0xe8>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800326a:	f7fe fa83 	bl	8001774 <HAL_GetTick>
 800326e:	4602      	mov	r2, r0
 8003270:	693b      	ldr	r3, [r7, #16]
 8003272:	1ad3      	subs	r3, r2, r3
 8003274:	2b64      	cmp	r3, #100	; 0x64
 8003276:	d901      	bls.n	800327c <HAL_RCC_OscConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8003278:	2303      	movs	r3, #3
 800327a:	e1db      	b.n	8003634 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800327c:	4b61      	ldr	r3, [pc, #388]	; (8003404 <HAL_RCC_OscConfig+0x270>)
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003284:	2b00      	cmp	r3, #0
 8003286:	d0f0      	beq.n	800326a <HAL_RCC_OscConfig+0xd6>
 8003288:	e014      	b.n	80032b4 <HAL_RCC_OscConfig+0x120>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800328a:	f7fe fa73 	bl	8001774 <HAL_GetTick>
 800328e:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003290:	e008      	b.n	80032a4 <HAL_RCC_OscConfig+0x110>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003292:	f7fe fa6f 	bl	8001774 <HAL_GetTick>
 8003296:	4602      	mov	r2, r0
 8003298:	693b      	ldr	r3, [r7, #16]
 800329a:	1ad3      	subs	r3, r2, r3
 800329c:	2b64      	cmp	r3, #100	; 0x64
 800329e:	d901      	bls.n	80032a4 <HAL_RCC_OscConfig+0x110>
          {
            return HAL_TIMEOUT;
 80032a0:	2303      	movs	r3, #3
 80032a2:	e1c7      	b.n	8003634 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80032a4:	4b57      	ldr	r3, [pc, #348]	; (8003404 <HAL_RCC_OscConfig+0x270>)
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80032ac:	2b00      	cmp	r3, #0
 80032ae:	d1f0      	bne.n	8003292 <HAL_RCC_OscConfig+0xfe>
 80032b0:	e000      	b.n	80032b4 <HAL_RCC_OscConfig+0x120>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80032b2:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	f003 0302 	and.w	r3, r3, #2
 80032bc:	2b00      	cmp	r3, #0
 80032be:	d06f      	beq.n	80033a0 <HAL_RCC_OscConfig+0x20c>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80032c0:	4b50      	ldr	r3, [pc, #320]	; (8003404 <HAL_RCC_OscConfig+0x270>)
 80032c2:	689b      	ldr	r3, [r3, #8]
 80032c4:	f003 030c 	and.w	r3, r3, #12
 80032c8:	2b00      	cmp	r3, #0
 80032ca:	d017      	beq.n	80032fc <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80032cc:	4b4d      	ldr	r3, [pc, #308]	; (8003404 <HAL_RCC_OscConfig+0x270>)
 80032ce:	689b      	ldr	r3, [r3, #8]
 80032d0:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80032d4:	2b08      	cmp	r3, #8
 80032d6:	d105      	bne.n	80032e4 <HAL_RCC_OscConfig+0x150>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80032d8:	4b4a      	ldr	r3, [pc, #296]	; (8003404 <HAL_RCC_OscConfig+0x270>)
 80032da:	685b      	ldr	r3, [r3, #4]
 80032dc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80032e0:	2b00      	cmp	r3, #0
 80032e2:	d00b      	beq.n	80032fc <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80032e4:	4b47      	ldr	r3, [pc, #284]	; (8003404 <HAL_RCC_OscConfig+0x270>)
 80032e6:	689b      	ldr	r3, [r3, #8]
 80032e8:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80032ec:	2b0c      	cmp	r3, #12
 80032ee:	d11c      	bne.n	800332a <HAL_RCC_OscConfig+0x196>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80032f0:	4b44      	ldr	r3, [pc, #272]	; (8003404 <HAL_RCC_OscConfig+0x270>)
 80032f2:	685b      	ldr	r3, [r3, #4]
 80032f4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80032f8:	2b00      	cmp	r3, #0
 80032fa:	d116      	bne.n	800332a <HAL_RCC_OscConfig+0x196>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80032fc:	4b41      	ldr	r3, [pc, #260]	; (8003404 <HAL_RCC_OscConfig+0x270>)
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	f003 0302 	and.w	r3, r3, #2
 8003304:	2b00      	cmp	r3, #0
 8003306:	d005      	beq.n	8003314 <HAL_RCC_OscConfig+0x180>
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	68db      	ldr	r3, [r3, #12]
 800330c:	2b01      	cmp	r3, #1
 800330e:	d001      	beq.n	8003314 <HAL_RCC_OscConfig+0x180>
      {
        return HAL_ERROR;
 8003310:	2301      	movs	r3, #1
 8003312:	e18f      	b.n	8003634 <HAL_RCC_OscConfig+0x4a0>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003314:	4b3b      	ldr	r3, [pc, #236]	; (8003404 <HAL_RCC_OscConfig+0x270>)
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	691b      	ldr	r3, [r3, #16]
 8003320:	00db      	lsls	r3, r3, #3
 8003322:	4938      	ldr	r1, [pc, #224]	; (8003404 <HAL_RCC_OscConfig+0x270>)
 8003324:	4313      	orrs	r3, r2
 8003326:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003328:	e03a      	b.n	80033a0 <HAL_RCC_OscConfig+0x20c>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	68db      	ldr	r3, [r3, #12]
 800332e:	2b00      	cmp	r3, #0
 8003330:	d020      	beq.n	8003374 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003332:	4b35      	ldr	r3, [pc, #212]	; (8003408 <HAL_RCC_OscConfig+0x274>)
 8003334:	2201      	movs	r2, #1
 8003336:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003338:	f7fe fa1c 	bl	8001774 <HAL_GetTick>
 800333c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800333e:	e008      	b.n	8003352 <HAL_RCC_OscConfig+0x1be>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003340:	f7fe fa18 	bl	8001774 <HAL_GetTick>
 8003344:	4602      	mov	r2, r0
 8003346:	693b      	ldr	r3, [r7, #16]
 8003348:	1ad3      	subs	r3, r2, r3
 800334a:	2b02      	cmp	r3, #2
 800334c:	d901      	bls.n	8003352 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 800334e:	2303      	movs	r3, #3
 8003350:	e170      	b.n	8003634 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003352:	4b2c      	ldr	r3, [pc, #176]	; (8003404 <HAL_RCC_OscConfig+0x270>)
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	f003 0302 	and.w	r3, r3, #2
 800335a:	2b00      	cmp	r3, #0
 800335c:	d0f0      	beq.n	8003340 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800335e:	4b29      	ldr	r3, [pc, #164]	; (8003404 <HAL_RCC_OscConfig+0x270>)
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	691b      	ldr	r3, [r3, #16]
 800336a:	00db      	lsls	r3, r3, #3
 800336c:	4925      	ldr	r1, [pc, #148]	; (8003404 <HAL_RCC_OscConfig+0x270>)
 800336e:	4313      	orrs	r3, r2
 8003370:	600b      	str	r3, [r1, #0]
 8003372:	e015      	b.n	80033a0 <HAL_RCC_OscConfig+0x20c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003374:	4b24      	ldr	r3, [pc, #144]	; (8003408 <HAL_RCC_OscConfig+0x274>)
 8003376:	2200      	movs	r2, #0
 8003378:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800337a:	f7fe f9fb 	bl	8001774 <HAL_GetTick>
 800337e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003380:	e008      	b.n	8003394 <HAL_RCC_OscConfig+0x200>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003382:	f7fe f9f7 	bl	8001774 <HAL_GetTick>
 8003386:	4602      	mov	r2, r0
 8003388:	693b      	ldr	r3, [r7, #16]
 800338a:	1ad3      	subs	r3, r2, r3
 800338c:	2b02      	cmp	r3, #2
 800338e:	d901      	bls.n	8003394 <HAL_RCC_OscConfig+0x200>
          {
            return HAL_TIMEOUT;
 8003390:	2303      	movs	r3, #3
 8003392:	e14f      	b.n	8003634 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003394:	4b1b      	ldr	r3, [pc, #108]	; (8003404 <HAL_RCC_OscConfig+0x270>)
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	f003 0302 	and.w	r3, r3, #2
 800339c:	2b00      	cmp	r3, #0
 800339e:	d1f0      	bne.n	8003382 <HAL_RCC_OscConfig+0x1ee>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	f003 0308 	and.w	r3, r3, #8
 80033a8:	2b00      	cmp	r3, #0
 80033aa:	d037      	beq.n	800341c <HAL_RCC_OscConfig+0x288>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	695b      	ldr	r3, [r3, #20]
 80033b0:	2b00      	cmp	r3, #0
 80033b2:	d016      	beq.n	80033e2 <HAL_RCC_OscConfig+0x24e>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80033b4:	4b15      	ldr	r3, [pc, #84]	; (800340c <HAL_RCC_OscConfig+0x278>)
 80033b6:	2201      	movs	r2, #1
 80033b8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80033ba:	f7fe f9db 	bl	8001774 <HAL_GetTick>
 80033be:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80033c0:	e008      	b.n	80033d4 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80033c2:	f7fe f9d7 	bl	8001774 <HAL_GetTick>
 80033c6:	4602      	mov	r2, r0
 80033c8:	693b      	ldr	r3, [r7, #16]
 80033ca:	1ad3      	subs	r3, r2, r3
 80033cc:	2b02      	cmp	r3, #2
 80033ce:	d901      	bls.n	80033d4 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80033d0:	2303      	movs	r3, #3
 80033d2:	e12f      	b.n	8003634 <HAL_RCC_OscConfig+0x4a0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80033d4:	4b0b      	ldr	r3, [pc, #44]	; (8003404 <HAL_RCC_OscConfig+0x270>)
 80033d6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80033d8:	f003 0302 	and.w	r3, r3, #2
 80033dc:	2b00      	cmp	r3, #0
 80033de:	d0f0      	beq.n	80033c2 <HAL_RCC_OscConfig+0x22e>
 80033e0:	e01c      	b.n	800341c <HAL_RCC_OscConfig+0x288>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80033e2:	4b0a      	ldr	r3, [pc, #40]	; (800340c <HAL_RCC_OscConfig+0x278>)
 80033e4:	2200      	movs	r2, #0
 80033e6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80033e8:	f7fe f9c4 	bl	8001774 <HAL_GetTick>
 80033ec:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80033ee:	e00f      	b.n	8003410 <HAL_RCC_OscConfig+0x27c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80033f0:	f7fe f9c0 	bl	8001774 <HAL_GetTick>
 80033f4:	4602      	mov	r2, r0
 80033f6:	693b      	ldr	r3, [r7, #16]
 80033f8:	1ad3      	subs	r3, r2, r3
 80033fa:	2b02      	cmp	r3, #2
 80033fc:	d908      	bls.n	8003410 <HAL_RCC_OscConfig+0x27c>
        {
          return HAL_TIMEOUT;
 80033fe:	2303      	movs	r3, #3
 8003400:	e118      	b.n	8003634 <HAL_RCC_OscConfig+0x4a0>
 8003402:	bf00      	nop
 8003404:	40023800 	.word	0x40023800
 8003408:	42470000 	.word	0x42470000
 800340c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003410:	4b8a      	ldr	r3, [pc, #552]	; (800363c <HAL_RCC_OscConfig+0x4a8>)
 8003412:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003414:	f003 0302 	and.w	r3, r3, #2
 8003418:	2b00      	cmp	r3, #0
 800341a:	d1e9      	bne.n	80033f0 <HAL_RCC_OscConfig+0x25c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	f003 0304 	and.w	r3, r3, #4
 8003424:	2b00      	cmp	r3, #0
 8003426:	f000 8097 	beq.w	8003558 <HAL_RCC_OscConfig+0x3c4>
  {
    FlagStatus       pwrclkchanged = RESET;
 800342a:	2300      	movs	r3, #0
 800342c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800342e:	4b83      	ldr	r3, [pc, #524]	; (800363c <HAL_RCC_OscConfig+0x4a8>)
 8003430:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003432:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003436:	2b00      	cmp	r3, #0
 8003438:	d10f      	bne.n	800345a <HAL_RCC_OscConfig+0x2c6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800343a:	2300      	movs	r3, #0
 800343c:	60fb      	str	r3, [r7, #12]
 800343e:	4b7f      	ldr	r3, [pc, #508]	; (800363c <HAL_RCC_OscConfig+0x4a8>)
 8003440:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003442:	4a7e      	ldr	r2, [pc, #504]	; (800363c <HAL_RCC_OscConfig+0x4a8>)
 8003444:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003448:	6413      	str	r3, [r2, #64]	; 0x40
 800344a:	4b7c      	ldr	r3, [pc, #496]	; (800363c <HAL_RCC_OscConfig+0x4a8>)
 800344c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800344e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003452:	60fb      	str	r3, [r7, #12]
 8003454:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8003456:	2301      	movs	r3, #1
 8003458:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800345a:	4b79      	ldr	r3, [pc, #484]	; (8003640 <HAL_RCC_OscConfig+0x4ac>)
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003462:	2b00      	cmp	r3, #0
 8003464:	d118      	bne.n	8003498 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003466:	4b76      	ldr	r3, [pc, #472]	; (8003640 <HAL_RCC_OscConfig+0x4ac>)
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	4a75      	ldr	r2, [pc, #468]	; (8003640 <HAL_RCC_OscConfig+0x4ac>)
 800346c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003470:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003472:	f7fe f97f 	bl	8001774 <HAL_GetTick>
 8003476:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003478:	e008      	b.n	800348c <HAL_RCC_OscConfig+0x2f8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800347a:	f7fe f97b 	bl	8001774 <HAL_GetTick>
 800347e:	4602      	mov	r2, r0
 8003480:	693b      	ldr	r3, [r7, #16]
 8003482:	1ad3      	subs	r3, r2, r3
 8003484:	2b02      	cmp	r3, #2
 8003486:	d901      	bls.n	800348c <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8003488:	2303      	movs	r3, #3
 800348a:	e0d3      	b.n	8003634 <HAL_RCC_OscConfig+0x4a0>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800348c:	4b6c      	ldr	r3, [pc, #432]	; (8003640 <HAL_RCC_OscConfig+0x4ac>)
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003494:	2b00      	cmp	r3, #0
 8003496:	d0f0      	beq.n	800347a <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	689b      	ldr	r3, [r3, #8]
 800349c:	2b01      	cmp	r3, #1
 800349e:	d106      	bne.n	80034ae <HAL_RCC_OscConfig+0x31a>
 80034a0:	4b66      	ldr	r3, [pc, #408]	; (800363c <HAL_RCC_OscConfig+0x4a8>)
 80034a2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80034a4:	4a65      	ldr	r2, [pc, #404]	; (800363c <HAL_RCC_OscConfig+0x4a8>)
 80034a6:	f043 0301 	orr.w	r3, r3, #1
 80034aa:	6713      	str	r3, [r2, #112]	; 0x70
 80034ac:	e01c      	b.n	80034e8 <HAL_RCC_OscConfig+0x354>
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	689b      	ldr	r3, [r3, #8]
 80034b2:	2b05      	cmp	r3, #5
 80034b4:	d10c      	bne.n	80034d0 <HAL_RCC_OscConfig+0x33c>
 80034b6:	4b61      	ldr	r3, [pc, #388]	; (800363c <HAL_RCC_OscConfig+0x4a8>)
 80034b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80034ba:	4a60      	ldr	r2, [pc, #384]	; (800363c <HAL_RCC_OscConfig+0x4a8>)
 80034bc:	f043 0304 	orr.w	r3, r3, #4
 80034c0:	6713      	str	r3, [r2, #112]	; 0x70
 80034c2:	4b5e      	ldr	r3, [pc, #376]	; (800363c <HAL_RCC_OscConfig+0x4a8>)
 80034c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80034c6:	4a5d      	ldr	r2, [pc, #372]	; (800363c <HAL_RCC_OscConfig+0x4a8>)
 80034c8:	f043 0301 	orr.w	r3, r3, #1
 80034cc:	6713      	str	r3, [r2, #112]	; 0x70
 80034ce:	e00b      	b.n	80034e8 <HAL_RCC_OscConfig+0x354>
 80034d0:	4b5a      	ldr	r3, [pc, #360]	; (800363c <HAL_RCC_OscConfig+0x4a8>)
 80034d2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80034d4:	4a59      	ldr	r2, [pc, #356]	; (800363c <HAL_RCC_OscConfig+0x4a8>)
 80034d6:	f023 0301 	bic.w	r3, r3, #1
 80034da:	6713      	str	r3, [r2, #112]	; 0x70
 80034dc:	4b57      	ldr	r3, [pc, #348]	; (800363c <HAL_RCC_OscConfig+0x4a8>)
 80034de:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80034e0:	4a56      	ldr	r2, [pc, #344]	; (800363c <HAL_RCC_OscConfig+0x4a8>)
 80034e2:	f023 0304 	bic.w	r3, r3, #4
 80034e6:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	689b      	ldr	r3, [r3, #8]
 80034ec:	2b00      	cmp	r3, #0
 80034ee:	d015      	beq.n	800351c <HAL_RCC_OscConfig+0x388>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80034f0:	f7fe f940 	bl	8001774 <HAL_GetTick>
 80034f4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80034f6:	e00a      	b.n	800350e <HAL_RCC_OscConfig+0x37a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80034f8:	f7fe f93c 	bl	8001774 <HAL_GetTick>
 80034fc:	4602      	mov	r2, r0
 80034fe:	693b      	ldr	r3, [r7, #16]
 8003500:	1ad3      	subs	r3, r2, r3
 8003502:	f241 3288 	movw	r2, #5000	; 0x1388
 8003506:	4293      	cmp	r3, r2
 8003508:	d901      	bls.n	800350e <HAL_RCC_OscConfig+0x37a>
        {
          return HAL_TIMEOUT;
 800350a:	2303      	movs	r3, #3
 800350c:	e092      	b.n	8003634 <HAL_RCC_OscConfig+0x4a0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800350e:	4b4b      	ldr	r3, [pc, #300]	; (800363c <HAL_RCC_OscConfig+0x4a8>)
 8003510:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003512:	f003 0302 	and.w	r3, r3, #2
 8003516:	2b00      	cmp	r3, #0
 8003518:	d0ee      	beq.n	80034f8 <HAL_RCC_OscConfig+0x364>
 800351a:	e014      	b.n	8003546 <HAL_RCC_OscConfig+0x3b2>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800351c:	f7fe f92a 	bl	8001774 <HAL_GetTick>
 8003520:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003522:	e00a      	b.n	800353a <HAL_RCC_OscConfig+0x3a6>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003524:	f7fe f926 	bl	8001774 <HAL_GetTick>
 8003528:	4602      	mov	r2, r0
 800352a:	693b      	ldr	r3, [r7, #16]
 800352c:	1ad3      	subs	r3, r2, r3
 800352e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003532:	4293      	cmp	r3, r2
 8003534:	d901      	bls.n	800353a <HAL_RCC_OscConfig+0x3a6>
        {
          return HAL_TIMEOUT;
 8003536:	2303      	movs	r3, #3
 8003538:	e07c      	b.n	8003634 <HAL_RCC_OscConfig+0x4a0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800353a:	4b40      	ldr	r3, [pc, #256]	; (800363c <HAL_RCC_OscConfig+0x4a8>)
 800353c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800353e:	f003 0302 	and.w	r3, r3, #2
 8003542:	2b00      	cmp	r3, #0
 8003544:	d1ee      	bne.n	8003524 <HAL_RCC_OscConfig+0x390>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003546:	7dfb      	ldrb	r3, [r7, #23]
 8003548:	2b01      	cmp	r3, #1
 800354a:	d105      	bne.n	8003558 <HAL_RCC_OscConfig+0x3c4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800354c:	4b3b      	ldr	r3, [pc, #236]	; (800363c <HAL_RCC_OscConfig+0x4a8>)
 800354e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003550:	4a3a      	ldr	r2, [pc, #232]	; (800363c <HAL_RCC_OscConfig+0x4a8>)
 8003552:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003556:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	699b      	ldr	r3, [r3, #24]
 800355c:	2b00      	cmp	r3, #0
 800355e:	d068      	beq.n	8003632 <HAL_RCC_OscConfig+0x49e>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003560:	4b36      	ldr	r3, [pc, #216]	; (800363c <HAL_RCC_OscConfig+0x4a8>)
 8003562:	689b      	ldr	r3, [r3, #8]
 8003564:	f003 030c 	and.w	r3, r3, #12
 8003568:	2b08      	cmp	r3, #8
 800356a:	d060      	beq.n	800362e <HAL_RCC_OscConfig+0x49a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	699b      	ldr	r3, [r3, #24]
 8003570:	2b02      	cmp	r3, #2
 8003572:	d145      	bne.n	8003600 <HAL_RCC_OscConfig+0x46c>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003574:	4b33      	ldr	r3, [pc, #204]	; (8003644 <HAL_RCC_OscConfig+0x4b0>)
 8003576:	2200      	movs	r2, #0
 8003578:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800357a:	f7fe f8fb 	bl	8001774 <HAL_GetTick>
 800357e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003580:	e008      	b.n	8003594 <HAL_RCC_OscConfig+0x400>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003582:	f7fe f8f7 	bl	8001774 <HAL_GetTick>
 8003586:	4602      	mov	r2, r0
 8003588:	693b      	ldr	r3, [r7, #16]
 800358a:	1ad3      	subs	r3, r2, r3
 800358c:	2b02      	cmp	r3, #2
 800358e:	d901      	bls.n	8003594 <HAL_RCC_OscConfig+0x400>
          {
            return HAL_TIMEOUT;
 8003590:	2303      	movs	r3, #3
 8003592:	e04f      	b.n	8003634 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003594:	4b29      	ldr	r3, [pc, #164]	; (800363c <HAL_RCC_OscConfig+0x4a8>)
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800359c:	2b00      	cmp	r3, #0
 800359e:	d1f0      	bne.n	8003582 <HAL_RCC_OscConfig+0x3ee>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	69da      	ldr	r2, [r3, #28]
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	6a1b      	ldr	r3, [r3, #32]
 80035a8:	431a      	orrs	r2, r3
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035ae:	019b      	lsls	r3, r3, #6
 80035b0:	431a      	orrs	r2, r3
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80035b6:	085b      	lsrs	r3, r3, #1
 80035b8:	3b01      	subs	r3, #1
 80035ba:	041b      	lsls	r3, r3, #16
 80035bc:	431a      	orrs	r2, r3
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035c2:	061b      	lsls	r3, r3, #24
 80035c4:	431a      	orrs	r2, r3
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035ca:	071b      	lsls	r3, r3, #28
 80035cc:	491b      	ldr	r1, [pc, #108]	; (800363c <HAL_RCC_OscConfig+0x4a8>)
 80035ce:	4313      	orrs	r3, r2
 80035d0:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80035d2:	4b1c      	ldr	r3, [pc, #112]	; (8003644 <HAL_RCC_OscConfig+0x4b0>)
 80035d4:	2201      	movs	r2, #1
 80035d6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80035d8:	f7fe f8cc 	bl	8001774 <HAL_GetTick>
 80035dc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80035de:	e008      	b.n	80035f2 <HAL_RCC_OscConfig+0x45e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80035e0:	f7fe f8c8 	bl	8001774 <HAL_GetTick>
 80035e4:	4602      	mov	r2, r0
 80035e6:	693b      	ldr	r3, [r7, #16]
 80035e8:	1ad3      	subs	r3, r2, r3
 80035ea:	2b02      	cmp	r3, #2
 80035ec:	d901      	bls.n	80035f2 <HAL_RCC_OscConfig+0x45e>
          {
            return HAL_TIMEOUT;
 80035ee:	2303      	movs	r3, #3
 80035f0:	e020      	b.n	8003634 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80035f2:	4b12      	ldr	r3, [pc, #72]	; (800363c <HAL_RCC_OscConfig+0x4a8>)
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80035fa:	2b00      	cmp	r3, #0
 80035fc:	d0f0      	beq.n	80035e0 <HAL_RCC_OscConfig+0x44c>
 80035fe:	e018      	b.n	8003632 <HAL_RCC_OscConfig+0x49e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003600:	4b10      	ldr	r3, [pc, #64]	; (8003644 <HAL_RCC_OscConfig+0x4b0>)
 8003602:	2200      	movs	r2, #0
 8003604:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003606:	f7fe f8b5 	bl	8001774 <HAL_GetTick>
 800360a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800360c:	e008      	b.n	8003620 <HAL_RCC_OscConfig+0x48c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800360e:	f7fe f8b1 	bl	8001774 <HAL_GetTick>
 8003612:	4602      	mov	r2, r0
 8003614:	693b      	ldr	r3, [r7, #16]
 8003616:	1ad3      	subs	r3, r2, r3
 8003618:	2b02      	cmp	r3, #2
 800361a:	d901      	bls.n	8003620 <HAL_RCC_OscConfig+0x48c>
          {
            return HAL_TIMEOUT;
 800361c:	2303      	movs	r3, #3
 800361e:	e009      	b.n	8003634 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003620:	4b06      	ldr	r3, [pc, #24]	; (800363c <HAL_RCC_OscConfig+0x4a8>)
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003628:	2b00      	cmp	r3, #0
 800362a:	d1f0      	bne.n	800360e <HAL_RCC_OscConfig+0x47a>
 800362c:	e001      	b.n	8003632 <HAL_RCC_OscConfig+0x49e>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 800362e:	2301      	movs	r3, #1
 8003630:	e000      	b.n	8003634 <HAL_RCC_OscConfig+0x4a0>
    }
  }
  return HAL_OK;
 8003632:	2300      	movs	r3, #0
}
 8003634:	4618      	mov	r0, r3
 8003636:	3718      	adds	r7, #24
 8003638:	46bd      	mov	sp, r7
 800363a:	bd80      	pop	{r7, pc}
 800363c:	40023800 	.word	0x40023800
 8003640:	40007000 	.word	0x40007000
 8003644:	42470060 	.word	0x42470060

08003648 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003648:	b580      	push	{r7, lr}
 800364a:	b082      	sub	sp, #8
 800364c:	af00      	add	r7, sp, #0
 800364e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	2b00      	cmp	r3, #0
 8003654:	d101      	bne.n	800365a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003656:	2301      	movs	r3, #1
 8003658:	e03f      	b.n	80036da <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8003660:	b2db      	uxtb	r3, r3
 8003662:	2b00      	cmp	r3, #0
 8003664:	d106      	bne.n	8003674 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	2200      	movs	r2, #0
 800366a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800366e:	6878      	ldr	r0, [r7, #4]
 8003670:	f7fd fe8e 	bl	8001390 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	2224      	movs	r2, #36	; 0x24
 8003678:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	68da      	ldr	r2, [r3, #12]
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800368a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800368c:	6878      	ldr	r0, [r7, #4]
 800368e:	f000 fa5f 	bl	8003b50 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	691a      	ldr	r2, [r3, #16]
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80036a0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	695a      	ldr	r2, [r3, #20]
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80036b0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	68da      	ldr	r2, [r3, #12]
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80036c0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	2200      	movs	r2, #0
 80036c6:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	2220      	movs	r2, #32
 80036cc:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	2220      	movs	r2, #32
 80036d4:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 80036d8:	2300      	movs	r3, #0
}
 80036da:	4618      	mov	r0, r3
 80036dc:	3708      	adds	r7, #8
 80036de:	46bd      	mov	sp, r7
 80036e0:	bd80      	pop	{r7, pc}

080036e2 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80036e2:	b580      	push	{r7, lr}
 80036e4:	b088      	sub	sp, #32
 80036e6:	af02      	add	r7, sp, #8
 80036e8:	60f8      	str	r0, [r7, #12]
 80036ea:	60b9      	str	r1, [r7, #8]
 80036ec:	603b      	str	r3, [r7, #0]
 80036ee:	4613      	mov	r3, r2
 80036f0:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 80036f2:	2300      	movs	r3, #0
 80036f4:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80036f6:	68fb      	ldr	r3, [r7, #12]
 80036f8:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80036fc:	b2db      	uxtb	r3, r3
 80036fe:	2b20      	cmp	r3, #32
 8003700:	f040 8083 	bne.w	800380a <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 8003704:	68bb      	ldr	r3, [r7, #8]
 8003706:	2b00      	cmp	r3, #0
 8003708:	d002      	beq.n	8003710 <HAL_UART_Transmit+0x2e>
 800370a:	88fb      	ldrh	r3, [r7, #6]
 800370c:	2b00      	cmp	r3, #0
 800370e:	d101      	bne.n	8003714 <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 8003710:	2301      	movs	r3, #1
 8003712:	e07b      	b.n	800380c <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003714:	68fb      	ldr	r3, [r7, #12]
 8003716:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800371a:	2b01      	cmp	r3, #1
 800371c:	d101      	bne.n	8003722 <HAL_UART_Transmit+0x40>
 800371e:	2302      	movs	r3, #2
 8003720:	e074      	b.n	800380c <HAL_UART_Transmit+0x12a>
 8003722:	68fb      	ldr	r3, [r7, #12]
 8003724:	2201      	movs	r2, #1
 8003726:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800372a:	68fb      	ldr	r3, [r7, #12]
 800372c:	2200      	movs	r2, #0
 800372e:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003730:	68fb      	ldr	r3, [r7, #12]
 8003732:	2221      	movs	r2, #33	; 0x21
 8003734:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8003738:	f7fe f81c 	bl	8001774 <HAL_GetTick>
 800373c:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800373e:	68fb      	ldr	r3, [r7, #12]
 8003740:	88fa      	ldrh	r2, [r7, #6]
 8003742:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8003744:	68fb      	ldr	r3, [r7, #12]
 8003746:	88fa      	ldrh	r2, [r7, #6]
 8003748:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800374a:	68fb      	ldr	r3, [r7, #12]
 800374c:	2200      	movs	r2, #0
 800374e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 8003752:	e042      	b.n	80037da <HAL_UART_Transmit+0xf8>
    {
      huart->TxXferCount--;
 8003754:	68fb      	ldr	r3, [r7, #12]
 8003756:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003758:	b29b      	uxth	r3, r3
 800375a:	3b01      	subs	r3, #1
 800375c:	b29a      	uxth	r2, r3
 800375e:	68fb      	ldr	r3, [r7, #12]
 8003760:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8003762:	68fb      	ldr	r3, [r7, #12]
 8003764:	689b      	ldr	r3, [r3, #8]
 8003766:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800376a:	d122      	bne.n	80037b2 <HAL_UART_Transmit+0xd0>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800376c:	683b      	ldr	r3, [r7, #0]
 800376e:	9300      	str	r3, [sp, #0]
 8003770:	697b      	ldr	r3, [r7, #20]
 8003772:	2200      	movs	r2, #0
 8003774:	2180      	movs	r1, #128	; 0x80
 8003776:	68f8      	ldr	r0, [r7, #12]
 8003778:	f000 f96c 	bl	8003a54 <UART_WaitOnFlagUntilTimeout>
 800377c:	4603      	mov	r3, r0
 800377e:	2b00      	cmp	r3, #0
 8003780:	d001      	beq.n	8003786 <HAL_UART_Transmit+0xa4>
        {
          return HAL_TIMEOUT;
 8003782:	2303      	movs	r3, #3
 8003784:	e042      	b.n	800380c <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 8003786:	68bb      	ldr	r3, [r7, #8]
 8003788:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 800378a:	693b      	ldr	r3, [r7, #16]
 800378c:	881b      	ldrh	r3, [r3, #0]
 800378e:	461a      	mov	r2, r3
 8003790:	68fb      	ldr	r3, [r7, #12]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003798:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 800379a:	68fb      	ldr	r3, [r7, #12]
 800379c:	691b      	ldr	r3, [r3, #16]
 800379e:	2b00      	cmp	r3, #0
 80037a0:	d103      	bne.n	80037aa <HAL_UART_Transmit+0xc8>
        {
          pData += 2U;
 80037a2:	68bb      	ldr	r3, [r7, #8]
 80037a4:	3302      	adds	r3, #2
 80037a6:	60bb      	str	r3, [r7, #8]
 80037a8:	e017      	b.n	80037da <HAL_UART_Transmit+0xf8>
        }
        else
        {
          pData += 1U;
 80037aa:	68bb      	ldr	r3, [r7, #8]
 80037ac:	3301      	adds	r3, #1
 80037ae:	60bb      	str	r3, [r7, #8]
 80037b0:	e013      	b.n	80037da <HAL_UART_Transmit+0xf8>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80037b2:	683b      	ldr	r3, [r7, #0]
 80037b4:	9300      	str	r3, [sp, #0]
 80037b6:	697b      	ldr	r3, [r7, #20]
 80037b8:	2200      	movs	r2, #0
 80037ba:	2180      	movs	r1, #128	; 0x80
 80037bc:	68f8      	ldr	r0, [r7, #12]
 80037be:	f000 f949 	bl	8003a54 <UART_WaitOnFlagUntilTimeout>
 80037c2:	4603      	mov	r3, r0
 80037c4:	2b00      	cmp	r3, #0
 80037c6:	d001      	beq.n	80037cc <HAL_UART_Transmit+0xea>
        {
          return HAL_TIMEOUT;
 80037c8:	2303      	movs	r3, #3
 80037ca:	e01f      	b.n	800380c <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 80037cc:	68bb      	ldr	r3, [r7, #8]
 80037ce:	1c5a      	adds	r2, r3, #1
 80037d0:	60ba      	str	r2, [r7, #8]
 80037d2:	781a      	ldrb	r2, [r3, #0]
 80037d4:	68fb      	ldr	r3, [r7, #12]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 80037da:	68fb      	ldr	r3, [r7, #12]
 80037dc:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80037de:	b29b      	uxth	r3, r3
 80037e0:	2b00      	cmp	r3, #0
 80037e2:	d1b7      	bne.n	8003754 <HAL_UART_Transmit+0x72>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80037e4:	683b      	ldr	r3, [r7, #0]
 80037e6:	9300      	str	r3, [sp, #0]
 80037e8:	697b      	ldr	r3, [r7, #20]
 80037ea:	2200      	movs	r2, #0
 80037ec:	2140      	movs	r1, #64	; 0x40
 80037ee:	68f8      	ldr	r0, [r7, #12]
 80037f0:	f000 f930 	bl	8003a54 <UART_WaitOnFlagUntilTimeout>
 80037f4:	4603      	mov	r3, r0
 80037f6:	2b00      	cmp	r3, #0
 80037f8:	d001      	beq.n	80037fe <HAL_UART_Transmit+0x11c>
    {
      return HAL_TIMEOUT;
 80037fa:	2303      	movs	r3, #3
 80037fc:	e006      	b.n	800380c <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80037fe:	68fb      	ldr	r3, [r7, #12]
 8003800:	2220      	movs	r2, #32
 8003802:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 8003806:	2300      	movs	r3, #0
 8003808:	e000      	b.n	800380c <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 800380a:	2302      	movs	r3, #2
  }
}
 800380c:	4618      	mov	r0, r3
 800380e:	3718      	adds	r7, #24
 8003810:	46bd      	mov	sp, r7
 8003812:	bd80      	pop	{r7, pc}

08003814 <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003814:	b580      	push	{r7, lr}
 8003816:	b086      	sub	sp, #24
 8003818:	af00      	add	r7, sp, #0
 800381a:	60f8      	str	r0, [r7, #12]
 800381c:	60b9      	str	r1, [r7, #8]
 800381e:	4613      	mov	r3, r2
 8003820:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003822:	68fb      	ldr	r3, [r7, #12]
 8003824:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8003828:	b2db      	uxtb	r3, r3
 800382a:	2b20      	cmp	r3, #32
 800382c:	d166      	bne.n	80038fc <HAL_UART_Receive_DMA+0xe8>
  {
    if ((pData == NULL) || (Size == 0U))
 800382e:	68bb      	ldr	r3, [r7, #8]
 8003830:	2b00      	cmp	r3, #0
 8003832:	d002      	beq.n	800383a <HAL_UART_Receive_DMA+0x26>
 8003834:	88fb      	ldrh	r3, [r7, #6]
 8003836:	2b00      	cmp	r3, #0
 8003838:	d101      	bne.n	800383e <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 800383a:	2301      	movs	r3, #1
 800383c:	e05f      	b.n	80038fe <HAL_UART_Receive_DMA+0xea>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800383e:	68fb      	ldr	r3, [r7, #12]
 8003840:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8003844:	2b01      	cmp	r3, #1
 8003846:	d101      	bne.n	800384c <HAL_UART_Receive_DMA+0x38>
 8003848:	2302      	movs	r3, #2
 800384a:	e058      	b.n	80038fe <HAL_UART_Receive_DMA+0xea>
 800384c:	68fb      	ldr	r3, [r7, #12]
 800384e:	2201      	movs	r2, #1
 8003850:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pRxBuffPtr = pData;
 8003854:	68ba      	ldr	r2, [r7, #8]
 8003856:	68fb      	ldr	r3, [r7, #12]
 8003858:	629a      	str	r2, [r3, #40]	; 0x28
    huart->RxXferSize = Size;
 800385a:	68fb      	ldr	r3, [r7, #12]
 800385c:	88fa      	ldrh	r2, [r7, #6]
 800385e:	859a      	strh	r2, [r3, #44]	; 0x2c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003860:	68fb      	ldr	r3, [r7, #12]
 8003862:	2200      	movs	r2, #0
 8003864:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003866:	68fb      	ldr	r3, [r7, #12]
 8003868:	2222      	movs	r2, #34	; 0x22
 800386a:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800386e:	68fb      	ldr	r3, [r7, #12]
 8003870:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003872:	4a25      	ldr	r2, [pc, #148]	; (8003908 <HAL_UART_Receive_DMA+0xf4>)
 8003874:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8003876:	68fb      	ldr	r3, [r7, #12]
 8003878:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800387a:	4a24      	ldr	r2, [pc, #144]	; (800390c <HAL_UART_Receive_DMA+0xf8>)
 800387c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 800387e:	68fb      	ldr	r3, [r7, #12]
 8003880:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003882:	4a23      	ldr	r2, [pc, #140]	; (8003910 <HAL_UART_Receive_DMA+0xfc>)
 8003884:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 8003886:	68fb      	ldr	r3, [r7, #12]
 8003888:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800388a:	2200      	movs	r2, #0
 800388c:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the DMA stream */
    tmp = (uint32_t *)&pData;
 800388e:	f107 0308 	add.w	r3, r7, #8
 8003892:	617b      	str	r3, [r7, #20]
    HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8003894:	68fb      	ldr	r3, [r7, #12]
 8003896:	6b58      	ldr	r0, [r3, #52]	; 0x34
 8003898:	68fb      	ldr	r3, [r7, #12]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	3304      	adds	r3, #4
 800389e:	4619      	mov	r1, r3
 80038a0:	697b      	ldr	r3, [r7, #20]
 80038a2:	681a      	ldr	r2, [r3, #0]
 80038a4:	88fb      	ldrh	r3, [r7, #6]
 80038a6:	f7fe fd1d 	bl	80022e4 <HAL_DMA_Start_IT>

    /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
    __HAL_UART_CLEAR_OREFLAG(huart);
 80038aa:	2300      	movs	r3, #0
 80038ac:	613b      	str	r3, [r7, #16]
 80038ae:	68fb      	ldr	r3, [r7, #12]
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	613b      	str	r3, [r7, #16]
 80038b6:	68fb      	ldr	r3, [r7, #12]
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	685b      	ldr	r3, [r3, #4]
 80038bc:	613b      	str	r3, [r7, #16]
 80038be:	693b      	ldr	r3, [r7, #16]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80038c0:	68fb      	ldr	r3, [r7, #12]
 80038c2:	2200      	movs	r2, #0
 80038c4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Parity Error Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80038c8:	68fb      	ldr	r3, [r7, #12]
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	68da      	ldr	r2, [r3, #12]
 80038ce:	68fb      	ldr	r3, [r7, #12]
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80038d6:	60da      	str	r2, [r3, #12]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80038d8:	68fb      	ldr	r3, [r7, #12]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	695a      	ldr	r2, [r3, #20]
 80038de:	68fb      	ldr	r3, [r7, #12]
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	f042 0201 	orr.w	r2, r2, #1
 80038e6:	615a      	str	r2, [r3, #20]

    /* Enable the DMA transfer for the receiver request by setting the DMAR bit
    in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80038e8:	68fb      	ldr	r3, [r7, #12]
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	695a      	ldr	r2, [r3, #20]
 80038ee:	68fb      	ldr	r3, [r7, #12]
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80038f6:	615a      	str	r2, [r3, #20]

    return HAL_OK;
 80038f8:	2300      	movs	r3, #0
 80038fa:	e000      	b.n	80038fe <HAL_UART_Receive_DMA+0xea>
  }
  else
  {
    return HAL_BUSY;
 80038fc:	2302      	movs	r3, #2
  }
}
 80038fe:	4618      	mov	r0, r3
 8003900:	3718      	adds	r7, #24
 8003902:	46bd      	mov	sp, r7
 8003904:	bd80      	pop	{r7, pc}
 8003906:	bf00      	nop
 8003908:	0800393d 	.word	0x0800393d
 800390c:	080039a5 	.word	0x080039a5
 8003910:	080039c1 	.word	0x080039c1

08003914 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8003914:	b480      	push	{r7}
 8003916:	b083      	sub	sp, #12
 8003918:	af00      	add	r7, sp, #0
 800391a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 800391c:	bf00      	nop
 800391e:	370c      	adds	r7, #12
 8003920:	46bd      	mov	sp, r7
 8003922:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003926:	4770      	bx	lr

08003928 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003928:	b480      	push	{r7}
 800392a:	b083      	sub	sp, #12
 800392c:	af00      	add	r7, sp, #0
 800392e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8003930:	bf00      	nop
 8003932:	370c      	adds	r7, #12
 8003934:	46bd      	mov	sp, r7
 8003936:	f85d 7b04 	ldr.w	r7, [sp], #4
 800393a:	4770      	bx	lr

0800393c <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800393c:	b580      	push	{r7, lr}
 800393e:	b084      	sub	sp, #16
 8003940:	af00      	add	r7, sp, #0
 8003942:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003948:	60fb      	str	r3, [r7, #12]
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003954:	2b00      	cmp	r3, #0
 8003956:	d11e      	bne.n	8003996 <UART_DMAReceiveCplt+0x5a>
  {
    huart->RxXferCount = 0U;
 8003958:	68fb      	ldr	r3, [r7, #12]
 800395a:	2200      	movs	r2, #0
 800395c:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800395e:	68fb      	ldr	r3, [r7, #12]
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	68da      	ldr	r2, [r3, #12]
 8003964:	68fb      	ldr	r3, [r7, #12]
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800396c:	60da      	str	r2, [r3, #12]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800396e:	68fb      	ldr	r3, [r7, #12]
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	695a      	ldr	r2, [r3, #20]
 8003974:	68fb      	ldr	r3, [r7, #12]
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	f022 0201 	bic.w	r2, r2, #1
 800397c:	615a      	str	r2, [r3, #20]

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800397e:	68fb      	ldr	r3, [r7, #12]
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	695a      	ldr	r2, [r3, #20]
 8003984:	68fb      	ldr	r3, [r7, #12]
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800398c:	615a      	str	r2, [r3, #20]

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800398e:	68fb      	ldr	r3, [r7, #12]
 8003990:	2220      	movs	r2, #32
 8003992:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx complete callback*/
  huart->RxCpltCallback(huart);
#else
  /*Call legacy weak Rx complete callback*/
  HAL_UART_RxCpltCallback(huart);
 8003996:	68f8      	ldr	r0, [r7, #12]
 8003998:	f7fd fc74 	bl	8001284 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800399c:	bf00      	nop
 800399e:	3710      	adds	r7, #16
 80039a0:	46bd      	mov	sp, r7
 80039a2:	bd80      	pop	{r7, pc}

080039a4 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80039a4:	b580      	push	{r7, lr}
 80039a6:	b084      	sub	sp, #16
 80039a8:	af00      	add	r7, sp, #0
 80039aa:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80039b0:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx Half complete callback*/
  huart->RxHalfCpltCallback(huart);
#else
  /*Call legacy weak Rx Half complete callback*/
  HAL_UART_RxHalfCpltCallback(huart);
 80039b2:	68f8      	ldr	r0, [r7, #12]
 80039b4:	f7ff ffae 	bl	8003914 <HAL_UART_RxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80039b8:	bf00      	nop
 80039ba:	3710      	adds	r7, #16
 80039bc:	46bd      	mov	sp, r7
 80039be:	bd80      	pop	{r7, pc}

080039c0 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 80039c0:	b580      	push	{r7, lr}
 80039c2:	b084      	sub	sp, #16
 80039c4:	af00      	add	r7, sp, #0
 80039c6:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 80039c8:	2300      	movs	r3, #0
 80039ca:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80039d0:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 80039d2:	68bb      	ldr	r3, [r7, #8]
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	695b      	ldr	r3, [r3, #20]
 80039d8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80039dc:	2b80      	cmp	r3, #128	; 0x80
 80039de:	bf0c      	ite	eq
 80039e0:	2301      	moveq	r3, #1
 80039e2:	2300      	movne	r3, #0
 80039e4:	b2db      	uxtb	r3, r3
 80039e6:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 80039e8:	68bb      	ldr	r3, [r7, #8]
 80039ea:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80039ee:	b2db      	uxtb	r3, r3
 80039f0:	2b21      	cmp	r3, #33	; 0x21
 80039f2:	d108      	bne.n	8003a06 <UART_DMAError+0x46>
 80039f4:	68fb      	ldr	r3, [r7, #12]
 80039f6:	2b00      	cmp	r3, #0
 80039f8:	d005      	beq.n	8003a06 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 80039fa:	68bb      	ldr	r3, [r7, #8]
 80039fc:	2200      	movs	r2, #0
 80039fe:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 8003a00:	68b8      	ldr	r0, [r7, #8]
 8003a02:	f000 f871 	bl	8003ae8 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003a06:	68bb      	ldr	r3, [r7, #8]
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	695b      	ldr	r3, [r3, #20]
 8003a0c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003a10:	2b40      	cmp	r3, #64	; 0x40
 8003a12:	bf0c      	ite	eq
 8003a14:	2301      	moveq	r3, #1
 8003a16:	2300      	movne	r3, #0
 8003a18:	b2db      	uxtb	r3, r3
 8003a1a:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8003a1c:	68bb      	ldr	r3, [r7, #8]
 8003a1e:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8003a22:	b2db      	uxtb	r3, r3
 8003a24:	2b22      	cmp	r3, #34	; 0x22
 8003a26:	d108      	bne.n	8003a3a <UART_DMAError+0x7a>
 8003a28:	68fb      	ldr	r3, [r7, #12]
 8003a2a:	2b00      	cmp	r3, #0
 8003a2c:	d005      	beq.n	8003a3a <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8003a2e:	68bb      	ldr	r3, [r7, #8]
 8003a30:	2200      	movs	r2, #0
 8003a32:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 8003a34:	68b8      	ldr	r0, [r7, #8]
 8003a36:	f000 f86d 	bl	8003b14 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8003a3a:	68bb      	ldr	r3, [r7, #8]
 8003a3c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003a3e:	f043 0210 	orr.w	r2, r3, #16
 8003a42:	68bb      	ldr	r3, [r7, #8]
 8003a44:	63da      	str	r2, [r3, #60]	; 0x3c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003a46:	68b8      	ldr	r0, [r7, #8]
 8003a48:	f7ff ff6e 	bl	8003928 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003a4c:	bf00      	nop
 8003a4e:	3710      	adds	r7, #16
 8003a50:	46bd      	mov	sp, r7
 8003a52:	bd80      	pop	{r7, pc}

08003a54 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8003a54:	b580      	push	{r7, lr}
 8003a56:	b084      	sub	sp, #16
 8003a58:	af00      	add	r7, sp, #0
 8003a5a:	60f8      	str	r0, [r7, #12]
 8003a5c:	60b9      	str	r1, [r7, #8]
 8003a5e:	603b      	str	r3, [r7, #0]
 8003a60:	4613      	mov	r3, r2
 8003a62:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003a64:	e02c      	b.n	8003ac0 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003a66:	69bb      	ldr	r3, [r7, #24]
 8003a68:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003a6c:	d028      	beq.n	8003ac0 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8003a6e:	69bb      	ldr	r3, [r7, #24]
 8003a70:	2b00      	cmp	r3, #0
 8003a72:	d007      	beq.n	8003a84 <UART_WaitOnFlagUntilTimeout+0x30>
 8003a74:	f7fd fe7e 	bl	8001774 <HAL_GetTick>
 8003a78:	4602      	mov	r2, r0
 8003a7a:	683b      	ldr	r3, [r7, #0]
 8003a7c:	1ad3      	subs	r3, r2, r3
 8003a7e:	69ba      	ldr	r2, [r7, #24]
 8003a80:	429a      	cmp	r2, r3
 8003a82:	d21d      	bcs.n	8003ac0 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003a84:	68fb      	ldr	r3, [r7, #12]
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	68da      	ldr	r2, [r3, #12]
 8003a8a:	68fb      	ldr	r3, [r7, #12]
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8003a92:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003a94:	68fb      	ldr	r3, [r7, #12]
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	695a      	ldr	r2, [r3, #20]
 8003a9a:	68fb      	ldr	r3, [r7, #12]
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	f022 0201 	bic.w	r2, r2, #1
 8003aa2:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8003aa4:	68fb      	ldr	r3, [r7, #12]
 8003aa6:	2220      	movs	r2, #32
 8003aa8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8003aac:	68fb      	ldr	r3, [r7, #12]
 8003aae:	2220      	movs	r2, #32
 8003ab0:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8003ab4:	68fb      	ldr	r3, [r7, #12]
 8003ab6:	2200      	movs	r2, #0
 8003ab8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 8003abc:	2303      	movs	r3, #3
 8003abe:	e00f      	b.n	8003ae0 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003ac0:	68fb      	ldr	r3, [r7, #12]
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	681a      	ldr	r2, [r3, #0]
 8003ac6:	68bb      	ldr	r3, [r7, #8]
 8003ac8:	4013      	ands	r3, r2
 8003aca:	68ba      	ldr	r2, [r7, #8]
 8003acc:	429a      	cmp	r2, r3
 8003ace:	bf0c      	ite	eq
 8003ad0:	2301      	moveq	r3, #1
 8003ad2:	2300      	movne	r3, #0
 8003ad4:	b2db      	uxtb	r3, r3
 8003ad6:	461a      	mov	r2, r3
 8003ad8:	79fb      	ldrb	r3, [r7, #7]
 8003ada:	429a      	cmp	r2, r3
 8003adc:	d0c3      	beq.n	8003a66 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003ade:	2300      	movs	r3, #0
}
 8003ae0:	4618      	mov	r0, r3
 8003ae2:	3710      	adds	r7, #16
 8003ae4:	46bd      	mov	sp, r7
 8003ae6:	bd80      	pop	{r7, pc}

08003ae8 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8003ae8:	b480      	push	{r7}
 8003aea:	b083      	sub	sp, #12
 8003aec:	af00      	add	r7, sp, #0
 8003aee:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	68da      	ldr	r2, [r3, #12]
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 8003afe:	60da      	str	r2, [r3, #12]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	2220      	movs	r2, #32
 8003b04:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
}
 8003b08:	bf00      	nop
 8003b0a:	370c      	adds	r7, #12
 8003b0c:	46bd      	mov	sp, r7
 8003b0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b12:	4770      	bx	lr

08003b14 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003b14:	b480      	push	{r7}
 8003b16:	b083      	sub	sp, #12
 8003b18:	af00      	add	r7, sp, #0
 8003b1a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	68da      	ldr	r2, [r3, #12]
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8003b2a:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	695a      	ldr	r2, [r3, #20]
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	f022 0201 	bic.w	r2, r2, #1
 8003b3a:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	2220      	movs	r2, #32
 8003b40:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 8003b44:	bf00      	nop
 8003b46:	370c      	adds	r7, #12
 8003b48:	46bd      	mov	sp, r7
 8003b4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b4e:	4770      	bx	lr

08003b50 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003b50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003b54:	b085      	sub	sp, #20
 8003b56:	af00      	add	r7, sp, #0
 8003b58:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	691b      	ldr	r3, [r3, #16]
 8003b60:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	68da      	ldr	r2, [r3, #12]
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	430a      	orrs	r2, r1
 8003b6e:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	689a      	ldr	r2, [r3, #8]
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	691b      	ldr	r3, [r3, #16]
 8003b78:	431a      	orrs	r2, r3
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	695b      	ldr	r3, [r3, #20]
 8003b7e:	431a      	orrs	r2, r3
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	69db      	ldr	r3, [r3, #28]
 8003b84:	4313      	orrs	r3, r2
 8003b86:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	68db      	ldr	r3, [r3, #12]
 8003b8e:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8003b92:	f023 030c 	bic.w	r3, r3, #12
 8003b96:	687a      	ldr	r2, [r7, #4]
 8003b98:	6812      	ldr	r2, [r2, #0]
 8003b9a:	68f9      	ldr	r1, [r7, #12]
 8003b9c:	430b      	orrs	r3, r1
 8003b9e:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	695b      	ldr	r3, [r3, #20]
 8003ba6:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	699a      	ldr	r2, [r3, #24]
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	430a      	orrs	r2, r1
 8003bb4:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	69db      	ldr	r3, [r3, #28]
 8003bba:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003bbe:	f040 818b 	bne.w	8003ed8 <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	4ac1      	ldr	r2, [pc, #772]	; (8003ecc <UART_SetConfig+0x37c>)
 8003bc8:	4293      	cmp	r3, r2
 8003bca:	d005      	beq.n	8003bd8 <UART_SetConfig+0x88>
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	4abf      	ldr	r2, [pc, #764]	; (8003ed0 <UART_SetConfig+0x380>)
 8003bd2:	4293      	cmp	r3, r2
 8003bd4:	f040 80bd 	bne.w	8003d52 <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003bd8:	f7ff f928 	bl	8002e2c <HAL_RCC_GetPCLK2Freq>
 8003bdc:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003bde:	68bb      	ldr	r3, [r7, #8]
 8003be0:	461d      	mov	r5, r3
 8003be2:	f04f 0600 	mov.w	r6, #0
 8003be6:	46a8      	mov	r8, r5
 8003be8:	46b1      	mov	r9, r6
 8003bea:	eb18 0308 	adds.w	r3, r8, r8
 8003bee:	eb49 0409 	adc.w	r4, r9, r9
 8003bf2:	4698      	mov	r8, r3
 8003bf4:	46a1      	mov	r9, r4
 8003bf6:	eb18 0805 	adds.w	r8, r8, r5
 8003bfa:	eb49 0906 	adc.w	r9, r9, r6
 8003bfe:	f04f 0100 	mov.w	r1, #0
 8003c02:	f04f 0200 	mov.w	r2, #0
 8003c06:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8003c0a:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8003c0e:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8003c12:	4688      	mov	r8, r1
 8003c14:	4691      	mov	r9, r2
 8003c16:	eb18 0005 	adds.w	r0, r8, r5
 8003c1a:	eb49 0106 	adc.w	r1, r9, r6
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	685b      	ldr	r3, [r3, #4]
 8003c22:	461d      	mov	r5, r3
 8003c24:	f04f 0600 	mov.w	r6, #0
 8003c28:	196b      	adds	r3, r5, r5
 8003c2a:	eb46 0406 	adc.w	r4, r6, r6
 8003c2e:	461a      	mov	r2, r3
 8003c30:	4623      	mov	r3, r4
 8003c32:	f7fc ff5b 	bl	8000aec <__aeabi_uldivmod>
 8003c36:	4603      	mov	r3, r0
 8003c38:	460c      	mov	r4, r1
 8003c3a:	461a      	mov	r2, r3
 8003c3c:	4ba5      	ldr	r3, [pc, #660]	; (8003ed4 <UART_SetConfig+0x384>)
 8003c3e:	fba3 2302 	umull	r2, r3, r3, r2
 8003c42:	095b      	lsrs	r3, r3, #5
 8003c44:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8003c48:	68bb      	ldr	r3, [r7, #8]
 8003c4a:	461d      	mov	r5, r3
 8003c4c:	f04f 0600 	mov.w	r6, #0
 8003c50:	46a9      	mov	r9, r5
 8003c52:	46b2      	mov	sl, r6
 8003c54:	eb19 0309 	adds.w	r3, r9, r9
 8003c58:	eb4a 040a 	adc.w	r4, sl, sl
 8003c5c:	4699      	mov	r9, r3
 8003c5e:	46a2      	mov	sl, r4
 8003c60:	eb19 0905 	adds.w	r9, r9, r5
 8003c64:	eb4a 0a06 	adc.w	sl, sl, r6
 8003c68:	f04f 0100 	mov.w	r1, #0
 8003c6c:	f04f 0200 	mov.w	r2, #0
 8003c70:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003c74:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003c78:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8003c7c:	4689      	mov	r9, r1
 8003c7e:	4692      	mov	sl, r2
 8003c80:	eb19 0005 	adds.w	r0, r9, r5
 8003c84:	eb4a 0106 	adc.w	r1, sl, r6
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	685b      	ldr	r3, [r3, #4]
 8003c8c:	461d      	mov	r5, r3
 8003c8e:	f04f 0600 	mov.w	r6, #0
 8003c92:	196b      	adds	r3, r5, r5
 8003c94:	eb46 0406 	adc.w	r4, r6, r6
 8003c98:	461a      	mov	r2, r3
 8003c9a:	4623      	mov	r3, r4
 8003c9c:	f7fc ff26 	bl	8000aec <__aeabi_uldivmod>
 8003ca0:	4603      	mov	r3, r0
 8003ca2:	460c      	mov	r4, r1
 8003ca4:	461a      	mov	r2, r3
 8003ca6:	4b8b      	ldr	r3, [pc, #556]	; (8003ed4 <UART_SetConfig+0x384>)
 8003ca8:	fba3 1302 	umull	r1, r3, r3, r2
 8003cac:	095b      	lsrs	r3, r3, #5
 8003cae:	2164      	movs	r1, #100	; 0x64
 8003cb0:	fb01 f303 	mul.w	r3, r1, r3
 8003cb4:	1ad3      	subs	r3, r2, r3
 8003cb6:	00db      	lsls	r3, r3, #3
 8003cb8:	3332      	adds	r3, #50	; 0x32
 8003cba:	4a86      	ldr	r2, [pc, #536]	; (8003ed4 <UART_SetConfig+0x384>)
 8003cbc:	fba2 2303 	umull	r2, r3, r2, r3
 8003cc0:	095b      	lsrs	r3, r3, #5
 8003cc2:	005b      	lsls	r3, r3, #1
 8003cc4:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003cc8:	4498      	add	r8, r3
 8003cca:	68bb      	ldr	r3, [r7, #8]
 8003ccc:	461d      	mov	r5, r3
 8003cce:	f04f 0600 	mov.w	r6, #0
 8003cd2:	46a9      	mov	r9, r5
 8003cd4:	46b2      	mov	sl, r6
 8003cd6:	eb19 0309 	adds.w	r3, r9, r9
 8003cda:	eb4a 040a 	adc.w	r4, sl, sl
 8003cde:	4699      	mov	r9, r3
 8003ce0:	46a2      	mov	sl, r4
 8003ce2:	eb19 0905 	adds.w	r9, r9, r5
 8003ce6:	eb4a 0a06 	adc.w	sl, sl, r6
 8003cea:	f04f 0100 	mov.w	r1, #0
 8003cee:	f04f 0200 	mov.w	r2, #0
 8003cf2:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003cf6:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003cfa:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8003cfe:	4689      	mov	r9, r1
 8003d00:	4692      	mov	sl, r2
 8003d02:	eb19 0005 	adds.w	r0, r9, r5
 8003d06:	eb4a 0106 	adc.w	r1, sl, r6
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	685b      	ldr	r3, [r3, #4]
 8003d0e:	461d      	mov	r5, r3
 8003d10:	f04f 0600 	mov.w	r6, #0
 8003d14:	196b      	adds	r3, r5, r5
 8003d16:	eb46 0406 	adc.w	r4, r6, r6
 8003d1a:	461a      	mov	r2, r3
 8003d1c:	4623      	mov	r3, r4
 8003d1e:	f7fc fee5 	bl	8000aec <__aeabi_uldivmod>
 8003d22:	4603      	mov	r3, r0
 8003d24:	460c      	mov	r4, r1
 8003d26:	461a      	mov	r2, r3
 8003d28:	4b6a      	ldr	r3, [pc, #424]	; (8003ed4 <UART_SetConfig+0x384>)
 8003d2a:	fba3 1302 	umull	r1, r3, r3, r2
 8003d2e:	095b      	lsrs	r3, r3, #5
 8003d30:	2164      	movs	r1, #100	; 0x64
 8003d32:	fb01 f303 	mul.w	r3, r1, r3
 8003d36:	1ad3      	subs	r3, r2, r3
 8003d38:	00db      	lsls	r3, r3, #3
 8003d3a:	3332      	adds	r3, #50	; 0x32
 8003d3c:	4a65      	ldr	r2, [pc, #404]	; (8003ed4 <UART_SetConfig+0x384>)
 8003d3e:	fba2 2303 	umull	r2, r3, r2, r3
 8003d42:	095b      	lsrs	r3, r3, #5
 8003d44:	f003 0207 	and.w	r2, r3, #7
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	4442      	add	r2, r8
 8003d4e:	609a      	str	r2, [r3, #8]
 8003d50:	e26f      	b.n	8004232 <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8003d52:	f7ff f857 	bl	8002e04 <HAL_RCC_GetPCLK1Freq>
 8003d56:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003d58:	68bb      	ldr	r3, [r7, #8]
 8003d5a:	461d      	mov	r5, r3
 8003d5c:	f04f 0600 	mov.w	r6, #0
 8003d60:	46a8      	mov	r8, r5
 8003d62:	46b1      	mov	r9, r6
 8003d64:	eb18 0308 	adds.w	r3, r8, r8
 8003d68:	eb49 0409 	adc.w	r4, r9, r9
 8003d6c:	4698      	mov	r8, r3
 8003d6e:	46a1      	mov	r9, r4
 8003d70:	eb18 0805 	adds.w	r8, r8, r5
 8003d74:	eb49 0906 	adc.w	r9, r9, r6
 8003d78:	f04f 0100 	mov.w	r1, #0
 8003d7c:	f04f 0200 	mov.w	r2, #0
 8003d80:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8003d84:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8003d88:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8003d8c:	4688      	mov	r8, r1
 8003d8e:	4691      	mov	r9, r2
 8003d90:	eb18 0005 	adds.w	r0, r8, r5
 8003d94:	eb49 0106 	adc.w	r1, r9, r6
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	685b      	ldr	r3, [r3, #4]
 8003d9c:	461d      	mov	r5, r3
 8003d9e:	f04f 0600 	mov.w	r6, #0
 8003da2:	196b      	adds	r3, r5, r5
 8003da4:	eb46 0406 	adc.w	r4, r6, r6
 8003da8:	461a      	mov	r2, r3
 8003daa:	4623      	mov	r3, r4
 8003dac:	f7fc fe9e 	bl	8000aec <__aeabi_uldivmod>
 8003db0:	4603      	mov	r3, r0
 8003db2:	460c      	mov	r4, r1
 8003db4:	461a      	mov	r2, r3
 8003db6:	4b47      	ldr	r3, [pc, #284]	; (8003ed4 <UART_SetConfig+0x384>)
 8003db8:	fba3 2302 	umull	r2, r3, r3, r2
 8003dbc:	095b      	lsrs	r3, r3, #5
 8003dbe:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8003dc2:	68bb      	ldr	r3, [r7, #8]
 8003dc4:	461d      	mov	r5, r3
 8003dc6:	f04f 0600 	mov.w	r6, #0
 8003dca:	46a9      	mov	r9, r5
 8003dcc:	46b2      	mov	sl, r6
 8003dce:	eb19 0309 	adds.w	r3, r9, r9
 8003dd2:	eb4a 040a 	adc.w	r4, sl, sl
 8003dd6:	4699      	mov	r9, r3
 8003dd8:	46a2      	mov	sl, r4
 8003dda:	eb19 0905 	adds.w	r9, r9, r5
 8003dde:	eb4a 0a06 	adc.w	sl, sl, r6
 8003de2:	f04f 0100 	mov.w	r1, #0
 8003de6:	f04f 0200 	mov.w	r2, #0
 8003dea:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003dee:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003df2:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8003df6:	4689      	mov	r9, r1
 8003df8:	4692      	mov	sl, r2
 8003dfa:	eb19 0005 	adds.w	r0, r9, r5
 8003dfe:	eb4a 0106 	adc.w	r1, sl, r6
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	685b      	ldr	r3, [r3, #4]
 8003e06:	461d      	mov	r5, r3
 8003e08:	f04f 0600 	mov.w	r6, #0
 8003e0c:	196b      	adds	r3, r5, r5
 8003e0e:	eb46 0406 	adc.w	r4, r6, r6
 8003e12:	461a      	mov	r2, r3
 8003e14:	4623      	mov	r3, r4
 8003e16:	f7fc fe69 	bl	8000aec <__aeabi_uldivmod>
 8003e1a:	4603      	mov	r3, r0
 8003e1c:	460c      	mov	r4, r1
 8003e1e:	461a      	mov	r2, r3
 8003e20:	4b2c      	ldr	r3, [pc, #176]	; (8003ed4 <UART_SetConfig+0x384>)
 8003e22:	fba3 1302 	umull	r1, r3, r3, r2
 8003e26:	095b      	lsrs	r3, r3, #5
 8003e28:	2164      	movs	r1, #100	; 0x64
 8003e2a:	fb01 f303 	mul.w	r3, r1, r3
 8003e2e:	1ad3      	subs	r3, r2, r3
 8003e30:	00db      	lsls	r3, r3, #3
 8003e32:	3332      	adds	r3, #50	; 0x32
 8003e34:	4a27      	ldr	r2, [pc, #156]	; (8003ed4 <UART_SetConfig+0x384>)
 8003e36:	fba2 2303 	umull	r2, r3, r2, r3
 8003e3a:	095b      	lsrs	r3, r3, #5
 8003e3c:	005b      	lsls	r3, r3, #1
 8003e3e:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003e42:	4498      	add	r8, r3
 8003e44:	68bb      	ldr	r3, [r7, #8]
 8003e46:	461d      	mov	r5, r3
 8003e48:	f04f 0600 	mov.w	r6, #0
 8003e4c:	46a9      	mov	r9, r5
 8003e4e:	46b2      	mov	sl, r6
 8003e50:	eb19 0309 	adds.w	r3, r9, r9
 8003e54:	eb4a 040a 	adc.w	r4, sl, sl
 8003e58:	4699      	mov	r9, r3
 8003e5a:	46a2      	mov	sl, r4
 8003e5c:	eb19 0905 	adds.w	r9, r9, r5
 8003e60:	eb4a 0a06 	adc.w	sl, sl, r6
 8003e64:	f04f 0100 	mov.w	r1, #0
 8003e68:	f04f 0200 	mov.w	r2, #0
 8003e6c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003e70:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003e74:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8003e78:	4689      	mov	r9, r1
 8003e7a:	4692      	mov	sl, r2
 8003e7c:	eb19 0005 	adds.w	r0, r9, r5
 8003e80:	eb4a 0106 	adc.w	r1, sl, r6
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	685b      	ldr	r3, [r3, #4]
 8003e88:	461d      	mov	r5, r3
 8003e8a:	f04f 0600 	mov.w	r6, #0
 8003e8e:	196b      	adds	r3, r5, r5
 8003e90:	eb46 0406 	adc.w	r4, r6, r6
 8003e94:	461a      	mov	r2, r3
 8003e96:	4623      	mov	r3, r4
 8003e98:	f7fc fe28 	bl	8000aec <__aeabi_uldivmod>
 8003e9c:	4603      	mov	r3, r0
 8003e9e:	460c      	mov	r4, r1
 8003ea0:	461a      	mov	r2, r3
 8003ea2:	4b0c      	ldr	r3, [pc, #48]	; (8003ed4 <UART_SetConfig+0x384>)
 8003ea4:	fba3 1302 	umull	r1, r3, r3, r2
 8003ea8:	095b      	lsrs	r3, r3, #5
 8003eaa:	2164      	movs	r1, #100	; 0x64
 8003eac:	fb01 f303 	mul.w	r3, r1, r3
 8003eb0:	1ad3      	subs	r3, r2, r3
 8003eb2:	00db      	lsls	r3, r3, #3
 8003eb4:	3332      	adds	r3, #50	; 0x32
 8003eb6:	4a07      	ldr	r2, [pc, #28]	; (8003ed4 <UART_SetConfig+0x384>)
 8003eb8:	fba2 2303 	umull	r2, r3, r2, r3
 8003ebc:	095b      	lsrs	r3, r3, #5
 8003ebe:	f003 0207 	and.w	r2, r3, #7
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	4442      	add	r2, r8
 8003ec8:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 8003eca:	e1b2      	b.n	8004232 <UART_SetConfig+0x6e2>
 8003ecc:	40011000 	.word	0x40011000
 8003ed0:	40011400 	.word	0x40011400
 8003ed4:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	4ad7      	ldr	r2, [pc, #860]	; (800423c <UART_SetConfig+0x6ec>)
 8003ede:	4293      	cmp	r3, r2
 8003ee0:	d005      	beq.n	8003eee <UART_SetConfig+0x39e>
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	4ad6      	ldr	r2, [pc, #856]	; (8004240 <UART_SetConfig+0x6f0>)
 8003ee8:	4293      	cmp	r3, r2
 8003eea:	f040 80d1 	bne.w	8004090 <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 8003eee:	f7fe ff9d 	bl	8002e2c <HAL_RCC_GetPCLK2Freq>
 8003ef2:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003ef4:	68bb      	ldr	r3, [r7, #8]
 8003ef6:	469a      	mov	sl, r3
 8003ef8:	f04f 0b00 	mov.w	fp, #0
 8003efc:	46d0      	mov	r8, sl
 8003efe:	46d9      	mov	r9, fp
 8003f00:	eb18 0308 	adds.w	r3, r8, r8
 8003f04:	eb49 0409 	adc.w	r4, r9, r9
 8003f08:	4698      	mov	r8, r3
 8003f0a:	46a1      	mov	r9, r4
 8003f0c:	eb18 080a 	adds.w	r8, r8, sl
 8003f10:	eb49 090b 	adc.w	r9, r9, fp
 8003f14:	f04f 0100 	mov.w	r1, #0
 8003f18:	f04f 0200 	mov.w	r2, #0
 8003f1c:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8003f20:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8003f24:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8003f28:	4688      	mov	r8, r1
 8003f2a:	4691      	mov	r9, r2
 8003f2c:	eb1a 0508 	adds.w	r5, sl, r8
 8003f30:	eb4b 0609 	adc.w	r6, fp, r9
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	685b      	ldr	r3, [r3, #4]
 8003f38:	4619      	mov	r1, r3
 8003f3a:	f04f 0200 	mov.w	r2, #0
 8003f3e:	f04f 0300 	mov.w	r3, #0
 8003f42:	f04f 0400 	mov.w	r4, #0
 8003f46:	0094      	lsls	r4, r2, #2
 8003f48:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8003f4c:	008b      	lsls	r3, r1, #2
 8003f4e:	461a      	mov	r2, r3
 8003f50:	4623      	mov	r3, r4
 8003f52:	4628      	mov	r0, r5
 8003f54:	4631      	mov	r1, r6
 8003f56:	f7fc fdc9 	bl	8000aec <__aeabi_uldivmod>
 8003f5a:	4603      	mov	r3, r0
 8003f5c:	460c      	mov	r4, r1
 8003f5e:	461a      	mov	r2, r3
 8003f60:	4bb8      	ldr	r3, [pc, #736]	; (8004244 <UART_SetConfig+0x6f4>)
 8003f62:	fba3 2302 	umull	r2, r3, r3, r2
 8003f66:	095b      	lsrs	r3, r3, #5
 8003f68:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8003f6c:	68bb      	ldr	r3, [r7, #8]
 8003f6e:	469b      	mov	fp, r3
 8003f70:	f04f 0c00 	mov.w	ip, #0
 8003f74:	46d9      	mov	r9, fp
 8003f76:	46e2      	mov	sl, ip
 8003f78:	eb19 0309 	adds.w	r3, r9, r9
 8003f7c:	eb4a 040a 	adc.w	r4, sl, sl
 8003f80:	4699      	mov	r9, r3
 8003f82:	46a2      	mov	sl, r4
 8003f84:	eb19 090b 	adds.w	r9, r9, fp
 8003f88:	eb4a 0a0c 	adc.w	sl, sl, ip
 8003f8c:	f04f 0100 	mov.w	r1, #0
 8003f90:	f04f 0200 	mov.w	r2, #0
 8003f94:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003f98:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003f9c:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8003fa0:	4689      	mov	r9, r1
 8003fa2:	4692      	mov	sl, r2
 8003fa4:	eb1b 0509 	adds.w	r5, fp, r9
 8003fa8:	eb4c 060a 	adc.w	r6, ip, sl
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	685b      	ldr	r3, [r3, #4]
 8003fb0:	4619      	mov	r1, r3
 8003fb2:	f04f 0200 	mov.w	r2, #0
 8003fb6:	f04f 0300 	mov.w	r3, #0
 8003fba:	f04f 0400 	mov.w	r4, #0
 8003fbe:	0094      	lsls	r4, r2, #2
 8003fc0:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8003fc4:	008b      	lsls	r3, r1, #2
 8003fc6:	461a      	mov	r2, r3
 8003fc8:	4623      	mov	r3, r4
 8003fca:	4628      	mov	r0, r5
 8003fcc:	4631      	mov	r1, r6
 8003fce:	f7fc fd8d 	bl	8000aec <__aeabi_uldivmod>
 8003fd2:	4603      	mov	r3, r0
 8003fd4:	460c      	mov	r4, r1
 8003fd6:	461a      	mov	r2, r3
 8003fd8:	4b9a      	ldr	r3, [pc, #616]	; (8004244 <UART_SetConfig+0x6f4>)
 8003fda:	fba3 1302 	umull	r1, r3, r3, r2
 8003fde:	095b      	lsrs	r3, r3, #5
 8003fe0:	2164      	movs	r1, #100	; 0x64
 8003fe2:	fb01 f303 	mul.w	r3, r1, r3
 8003fe6:	1ad3      	subs	r3, r2, r3
 8003fe8:	011b      	lsls	r3, r3, #4
 8003fea:	3332      	adds	r3, #50	; 0x32
 8003fec:	4a95      	ldr	r2, [pc, #596]	; (8004244 <UART_SetConfig+0x6f4>)
 8003fee:	fba2 2303 	umull	r2, r3, r2, r3
 8003ff2:	095b      	lsrs	r3, r3, #5
 8003ff4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003ff8:	4498      	add	r8, r3
 8003ffa:	68bb      	ldr	r3, [r7, #8]
 8003ffc:	469b      	mov	fp, r3
 8003ffe:	f04f 0c00 	mov.w	ip, #0
 8004002:	46d9      	mov	r9, fp
 8004004:	46e2      	mov	sl, ip
 8004006:	eb19 0309 	adds.w	r3, r9, r9
 800400a:	eb4a 040a 	adc.w	r4, sl, sl
 800400e:	4699      	mov	r9, r3
 8004010:	46a2      	mov	sl, r4
 8004012:	eb19 090b 	adds.w	r9, r9, fp
 8004016:	eb4a 0a0c 	adc.w	sl, sl, ip
 800401a:	f04f 0100 	mov.w	r1, #0
 800401e:	f04f 0200 	mov.w	r2, #0
 8004022:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004026:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800402a:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800402e:	4689      	mov	r9, r1
 8004030:	4692      	mov	sl, r2
 8004032:	eb1b 0509 	adds.w	r5, fp, r9
 8004036:	eb4c 060a 	adc.w	r6, ip, sl
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	685b      	ldr	r3, [r3, #4]
 800403e:	4619      	mov	r1, r3
 8004040:	f04f 0200 	mov.w	r2, #0
 8004044:	f04f 0300 	mov.w	r3, #0
 8004048:	f04f 0400 	mov.w	r4, #0
 800404c:	0094      	lsls	r4, r2, #2
 800404e:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8004052:	008b      	lsls	r3, r1, #2
 8004054:	461a      	mov	r2, r3
 8004056:	4623      	mov	r3, r4
 8004058:	4628      	mov	r0, r5
 800405a:	4631      	mov	r1, r6
 800405c:	f7fc fd46 	bl	8000aec <__aeabi_uldivmod>
 8004060:	4603      	mov	r3, r0
 8004062:	460c      	mov	r4, r1
 8004064:	461a      	mov	r2, r3
 8004066:	4b77      	ldr	r3, [pc, #476]	; (8004244 <UART_SetConfig+0x6f4>)
 8004068:	fba3 1302 	umull	r1, r3, r3, r2
 800406c:	095b      	lsrs	r3, r3, #5
 800406e:	2164      	movs	r1, #100	; 0x64
 8004070:	fb01 f303 	mul.w	r3, r1, r3
 8004074:	1ad3      	subs	r3, r2, r3
 8004076:	011b      	lsls	r3, r3, #4
 8004078:	3332      	adds	r3, #50	; 0x32
 800407a:	4a72      	ldr	r2, [pc, #456]	; (8004244 <UART_SetConfig+0x6f4>)
 800407c:	fba2 2303 	umull	r2, r3, r2, r3
 8004080:	095b      	lsrs	r3, r3, #5
 8004082:	f003 020f 	and.w	r2, r3, #15
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	4442      	add	r2, r8
 800408c:	609a      	str	r2, [r3, #8]
 800408e:	e0d0      	b.n	8004232 <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 8004090:	f7fe feb8 	bl	8002e04 <HAL_RCC_GetPCLK1Freq>
 8004094:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004096:	68bb      	ldr	r3, [r7, #8]
 8004098:	469a      	mov	sl, r3
 800409a:	f04f 0b00 	mov.w	fp, #0
 800409e:	46d0      	mov	r8, sl
 80040a0:	46d9      	mov	r9, fp
 80040a2:	eb18 0308 	adds.w	r3, r8, r8
 80040a6:	eb49 0409 	adc.w	r4, r9, r9
 80040aa:	4698      	mov	r8, r3
 80040ac:	46a1      	mov	r9, r4
 80040ae:	eb18 080a 	adds.w	r8, r8, sl
 80040b2:	eb49 090b 	adc.w	r9, r9, fp
 80040b6:	f04f 0100 	mov.w	r1, #0
 80040ba:	f04f 0200 	mov.w	r2, #0
 80040be:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 80040c2:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 80040c6:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 80040ca:	4688      	mov	r8, r1
 80040cc:	4691      	mov	r9, r2
 80040ce:	eb1a 0508 	adds.w	r5, sl, r8
 80040d2:	eb4b 0609 	adc.w	r6, fp, r9
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	685b      	ldr	r3, [r3, #4]
 80040da:	4619      	mov	r1, r3
 80040dc:	f04f 0200 	mov.w	r2, #0
 80040e0:	f04f 0300 	mov.w	r3, #0
 80040e4:	f04f 0400 	mov.w	r4, #0
 80040e8:	0094      	lsls	r4, r2, #2
 80040ea:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80040ee:	008b      	lsls	r3, r1, #2
 80040f0:	461a      	mov	r2, r3
 80040f2:	4623      	mov	r3, r4
 80040f4:	4628      	mov	r0, r5
 80040f6:	4631      	mov	r1, r6
 80040f8:	f7fc fcf8 	bl	8000aec <__aeabi_uldivmod>
 80040fc:	4603      	mov	r3, r0
 80040fe:	460c      	mov	r4, r1
 8004100:	461a      	mov	r2, r3
 8004102:	4b50      	ldr	r3, [pc, #320]	; (8004244 <UART_SetConfig+0x6f4>)
 8004104:	fba3 2302 	umull	r2, r3, r3, r2
 8004108:	095b      	lsrs	r3, r3, #5
 800410a:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800410e:	68bb      	ldr	r3, [r7, #8]
 8004110:	469b      	mov	fp, r3
 8004112:	f04f 0c00 	mov.w	ip, #0
 8004116:	46d9      	mov	r9, fp
 8004118:	46e2      	mov	sl, ip
 800411a:	eb19 0309 	adds.w	r3, r9, r9
 800411e:	eb4a 040a 	adc.w	r4, sl, sl
 8004122:	4699      	mov	r9, r3
 8004124:	46a2      	mov	sl, r4
 8004126:	eb19 090b 	adds.w	r9, r9, fp
 800412a:	eb4a 0a0c 	adc.w	sl, sl, ip
 800412e:	f04f 0100 	mov.w	r1, #0
 8004132:	f04f 0200 	mov.w	r2, #0
 8004136:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800413a:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800413e:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8004142:	4689      	mov	r9, r1
 8004144:	4692      	mov	sl, r2
 8004146:	eb1b 0509 	adds.w	r5, fp, r9
 800414a:	eb4c 060a 	adc.w	r6, ip, sl
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	685b      	ldr	r3, [r3, #4]
 8004152:	4619      	mov	r1, r3
 8004154:	f04f 0200 	mov.w	r2, #0
 8004158:	f04f 0300 	mov.w	r3, #0
 800415c:	f04f 0400 	mov.w	r4, #0
 8004160:	0094      	lsls	r4, r2, #2
 8004162:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8004166:	008b      	lsls	r3, r1, #2
 8004168:	461a      	mov	r2, r3
 800416a:	4623      	mov	r3, r4
 800416c:	4628      	mov	r0, r5
 800416e:	4631      	mov	r1, r6
 8004170:	f7fc fcbc 	bl	8000aec <__aeabi_uldivmod>
 8004174:	4603      	mov	r3, r0
 8004176:	460c      	mov	r4, r1
 8004178:	461a      	mov	r2, r3
 800417a:	4b32      	ldr	r3, [pc, #200]	; (8004244 <UART_SetConfig+0x6f4>)
 800417c:	fba3 1302 	umull	r1, r3, r3, r2
 8004180:	095b      	lsrs	r3, r3, #5
 8004182:	2164      	movs	r1, #100	; 0x64
 8004184:	fb01 f303 	mul.w	r3, r1, r3
 8004188:	1ad3      	subs	r3, r2, r3
 800418a:	011b      	lsls	r3, r3, #4
 800418c:	3332      	adds	r3, #50	; 0x32
 800418e:	4a2d      	ldr	r2, [pc, #180]	; (8004244 <UART_SetConfig+0x6f4>)
 8004190:	fba2 2303 	umull	r2, r3, r2, r3
 8004194:	095b      	lsrs	r3, r3, #5
 8004196:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800419a:	4498      	add	r8, r3
 800419c:	68bb      	ldr	r3, [r7, #8]
 800419e:	469b      	mov	fp, r3
 80041a0:	f04f 0c00 	mov.w	ip, #0
 80041a4:	46d9      	mov	r9, fp
 80041a6:	46e2      	mov	sl, ip
 80041a8:	eb19 0309 	adds.w	r3, r9, r9
 80041ac:	eb4a 040a 	adc.w	r4, sl, sl
 80041b0:	4699      	mov	r9, r3
 80041b2:	46a2      	mov	sl, r4
 80041b4:	eb19 090b 	adds.w	r9, r9, fp
 80041b8:	eb4a 0a0c 	adc.w	sl, sl, ip
 80041bc:	f04f 0100 	mov.w	r1, #0
 80041c0:	f04f 0200 	mov.w	r2, #0
 80041c4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80041c8:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80041cc:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80041d0:	4689      	mov	r9, r1
 80041d2:	4692      	mov	sl, r2
 80041d4:	eb1b 0509 	adds.w	r5, fp, r9
 80041d8:	eb4c 060a 	adc.w	r6, ip, sl
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	685b      	ldr	r3, [r3, #4]
 80041e0:	4619      	mov	r1, r3
 80041e2:	f04f 0200 	mov.w	r2, #0
 80041e6:	f04f 0300 	mov.w	r3, #0
 80041ea:	f04f 0400 	mov.w	r4, #0
 80041ee:	0094      	lsls	r4, r2, #2
 80041f0:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80041f4:	008b      	lsls	r3, r1, #2
 80041f6:	461a      	mov	r2, r3
 80041f8:	4623      	mov	r3, r4
 80041fa:	4628      	mov	r0, r5
 80041fc:	4631      	mov	r1, r6
 80041fe:	f7fc fc75 	bl	8000aec <__aeabi_uldivmod>
 8004202:	4603      	mov	r3, r0
 8004204:	460c      	mov	r4, r1
 8004206:	461a      	mov	r2, r3
 8004208:	4b0e      	ldr	r3, [pc, #56]	; (8004244 <UART_SetConfig+0x6f4>)
 800420a:	fba3 1302 	umull	r1, r3, r3, r2
 800420e:	095b      	lsrs	r3, r3, #5
 8004210:	2164      	movs	r1, #100	; 0x64
 8004212:	fb01 f303 	mul.w	r3, r1, r3
 8004216:	1ad3      	subs	r3, r2, r3
 8004218:	011b      	lsls	r3, r3, #4
 800421a:	3332      	adds	r3, #50	; 0x32
 800421c:	4a09      	ldr	r2, [pc, #36]	; (8004244 <UART_SetConfig+0x6f4>)
 800421e:	fba2 2303 	umull	r2, r3, r2, r3
 8004222:	095b      	lsrs	r3, r3, #5
 8004224:	f003 020f 	and.w	r2, r3, #15
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	4442      	add	r2, r8
 800422e:	609a      	str	r2, [r3, #8]
}
 8004230:	e7ff      	b.n	8004232 <UART_SetConfig+0x6e2>
 8004232:	bf00      	nop
 8004234:	3714      	adds	r7, #20
 8004236:	46bd      	mov	sp, r7
 8004238:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800423c:	40011000 	.word	0x40011000
 8004240:	40011400 	.word	0x40011400
 8004244:	51eb851f 	.word	0x51eb851f

08004248 <__errno>:
 8004248:	4b01      	ldr	r3, [pc, #4]	; (8004250 <__errno+0x8>)
 800424a:	6818      	ldr	r0, [r3, #0]
 800424c:	4770      	bx	lr
 800424e:	bf00      	nop
 8004250:	2000000c 	.word	0x2000000c

08004254 <__libc_init_array>:
 8004254:	b570      	push	{r4, r5, r6, lr}
 8004256:	4e0d      	ldr	r6, [pc, #52]	; (800428c <__libc_init_array+0x38>)
 8004258:	4c0d      	ldr	r4, [pc, #52]	; (8004290 <__libc_init_array+0x3c>)
 800425a:	1ba4      	subs	r4, r4, r6
 800425c:	10a4      	asrs	r4, r4, #2
 800425e:	2500      	movs	r5, #0
 8004260:	42a5      	cmp	r5, r4
 8004262:	d109      	bne.n	8004278 <__libc_init_array+0x24>
 8004264:	4e0b      	ldr	r6, [pc, #44]	; (8004294 <__libc_init_array+0x40>)
 8004266:	4c0c      	ldr	r4, [pc, #48]	; (8004298 <__libc_init_array+0x44>)
 8004268:	f000 ff04 	bl	8005074 <_init>
 800426c:	1ba4      	subs	r4, r4, r6
 800426e:	10a4      	asrs	r4, r4, #2
 8004270:	2500      	movs	r5, #0
 8004272:	42a5      	cmp	r5, r4
 8004274:	d105      	bne.n	8004282 <__libc_init_array+0x2e>
 8004276:	bd70      	pop	{r4, r5, r6, pc}
 8004278:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800427c:	4798      	blx	r3
 800427e:	3501      	adds	r5, #1
 8004280:	e7ee      	b.n	8004260 <__libc_init_array+0xc>
 8004282:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8004286:	4798      	blx	r3
 8004288:	3501      	adds	r5, #1
 800428a:	e7f2      	b.n	8004272 <__libc_init_array+0x1e>
 800428c:	08005164 	.word	0x08005164
 8004290:	08005164 	.word	0x08005164
 8004294:	08005164 	.word	0x08005164
 8004298:	08005168 	.word	0x08005168

0800429c <memset>:
 800429c:	4402      	add	r2, r0
 800429e:	4603      	mov	r3, r0
 80042a0:	4293      	cmp	r3, r2
 80042a2:	d100      	bne.n	80042a6 <memset+0xa>
 80042a4:	4770      	bx	lr
 80042a6:	f803 1b01 	strb.w	r1, [r3], #1
 80042aa:	e7f9      	b.n	80042a0 <memset+0x4>

080042ac <iprintf>:
 80042ac:	b40f      	push	{r0, r1, r2, r3}
 80042ae:	4b0a      	ldr	r3, [pc, #40]	; (80042d8 <iprintf+0x2c>)
 80042b0:	b513      	push	{r0, r1, r4, lr}
 80042b2:	681c      	ldr	r4, [r3, #0]
 80042b4:	b124      	cbz	r4, 80042c0 <iprintf+0x14>
 80042b6:	69a3      	ldr	r3, [r4, #24]
 80042b8:	b913      	cbnz	r3, 80042c0 <iprintf+0x14>
 80042ba:	4620      	mov	r0, r4
 80042bc:	f000 f84e 	bl	800435c <__sinit>
 80042c0:	ab05      	add	r3, sp, #20
 80042c2:	9a04      	ldr	r2, [sp, #16]
 80042c4:	68a1      	ldr	r1, [r4, #8]
 80042c6:	9301      	str	r3, [sp, #4]
 80042c8:	4620      	mov	r0, r4
 80042ca:	f000 f955 	bl	8004578 <_vfiprintf_r>
 80042ce:	b002      	add	sp, #8
 80042d0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80042d4:	b004      	add	sp, #16
 80042d6:	4770      	bx	lr
 80042d8:	2000000c 	.word	0x2000000c

080042dc <std>:
 80042dc:	2300      	movs	r3, #0
 80042de:	b510      	push	{r4, lr}
 80042e0:	4604      	mov	r4, r0
 80042e2:	e9c0 3300 	strd	r3, r3, [r0]
 80042e6:	6083      	str	r3, [r0, #8]
 80042e8:	8181      	strh	r1, [r0, #12]
 80042ea:	6643      	str	r3, [r0, #100]	; 0x64
 80042ec:	81c2      	strh	r2, [r0, #14]
 80042ee:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80042f2:	6183      	str	r3, [r0, #24]
 80042f4:	4619      	mov	r1, r3
 80042f6:	2208      	movs	r2, #8
 80042f8:	305c      	adds	r0, #92	; 0x5c
 80042fa:	f7ff ffcf 	bl	800429c <memset>
 80042fe:	4b05      	ldr	r3, [pc, #20]	; (8004314 <std+0x38>)
 8004300:	6263      	str	r3, [r4, #36]	; 0x24
 8004302:	4b05      	ldr	r3, [pc, #20]	; (8004318 <std+0x3c>)
 8004304:	62a3      	str	r3, [r4, #40]	; 0x28
 8004306:	4b05      	ldr	r3, [pc, #20]	; (800431c <std+0x40>)
 8004308:	62e3      	str	r3, [r4, #44]	; 0x2c
 800430a:	4b05      	ldr	r3, [pc, #20]	; (8004320 <std+0x44>)
 800430c:	6224      	str	r4, [r4, #32]
 800430e:	6323      	str	r3, [r4, #48]	; 0x30
 8004310:	bd10      	pop	{r4, pc}
 8004312:	bf00      	nop
 8004314:	08004ad5 	.word	0x08004ad5
 8004318:	08004af7 	.word	0x08004af7
 800431c:	08004b2f 	.word	0x08004b2f
 8004320:	08004b53 	.word	0x08004b53

08004324 <_cleanup_r>:
 8004324:	4901      	ldr	r1, [pc, #4]	; (800432c <_cleanup_r+0x8>)
 8004326:	f000 b885 	b.w	8004434 <_fwalk_reent>
 800432a:	bf00      	nop
 800432c:	08004e2d 	.word	0x08004e2d

08004330 <__sfmoreglue>:
 8004330:	b570      	push	{r4, r5, r6, lr}
 8004332:	1e4a      	subs	r2, r1, #1
 8004334:	2568      	movs	r5, #104	; 0x68
 8004336:	4355      	muls	r5, r2
 8004338:	460e      	mov	r6, r1
 800433a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800433e:	f000 f897 	bl	8004470 <_malloc_r>
 8004342:	4604      	mov	r4, r0
 8004344:	b140      	cbz	r0, 8004358 <__sfmoreglue+0x28>
 8004346:	2100      	movs	r1, #0
 8004348:	e9c0 1600 	strd	r1, r6, [r0]
 800434c:	300c      	adds	r0, #12
 800434e:	60a0      	str	r0, [r4, #8]
 8004350:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8004354:	f7ff ffa2 	bl	800429c <memset>
 8004358:	4620      	mov	r0, r4
 800435a:	bd70      	pop	{r4, r5, r6, pc}

0800435c <__sinit>:
 800435c:	6983      	ldr	r3, [r0, #24]
 800435e:	b510      	push	{r4, lr}
 8004360:	4604      	mov	r4, r0
 8004362:	bb33      	cbnz	r3, 80043b2 <__sinit+0x56>
 8004364:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 8004368:	6503      	str	r3, [r0, #80]	; 0x50
 800436a:	4b12      	ldr	r3, [pc, #72]	; (80043b4 <__sinit+0x58>)
 800436c:	4a12      	ldr	r2, [pc, #72]	; (80043b8 <__sinit+0x5c>)
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	6282      	str	r2, [r0, #40]	; 0x28
 8004372:	4298      	cmp	r0, r3
 8004374:	bf04      	itt	eq
 8004376:	2301      	moveq	r3, #1
 8004378:	6183      	streq	r3, [r0, #24]
 800437a:	f000 f81f 	bl	80043bc <__sfp>
 800437e:	6060      	str	r0, [r4, #4]
 8004380:	4620      	mov	r0, r4
 8004382:	f000 f81b 	bl	80043bc <__sfp>
 8004386:	60a0      	str	r0, [r4, #8]
 8004388:	4620      	mov	r0, r4
 800438a:	f000 f817 	bl	80043bc <__sfp>
 800438e:	2200      	movs	r2, #0
 8004390:	60e0      	str	r0, [r4, #12]
 8004392:	2104      	movs	r1, #4
 8004394:	6860      	ldr	r0, [r4, #4]
 8004396:	f7ff ffa1 	bl	80042dc <std>
 800439a:	2201      	movs	r2, #1
 800439c:	2109      	movs	r1, #9
 800439e:	68a0      	ldr	r0, [r4, #8]
 80043a0:	f7ff ff9c 	bl	80042dc <std>
 80043a4:	2202      	movs	r2, #2
 80043a6:	2112      	movs	r1, #18
 80043a8:	68e0      	ldr	r0, [r4, #12]
 80043aa:	f7ff ff97 	bl	80042dc <std>
 80043ae:	2301      	movs	r3, #1
 80043b0:	61a3      	str	r3, [r4, #24]
 80043b2:	bd10      	pop	{r4, pc}
 80043b4:	080050c4 	.word	0x080050c4
 80043b8:	08004325 	.word	0x08004325

080043bc <__sfp>:
 80043bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80043be:	4b1b      	ldr	r3, [pc, #108]	; (800442c <__sfp+0x70>)
 80043c0:	681e      	ldr	r6, [r3, #0]
 80043c2:	69b3      	ldr	r3, [r6, #24]
 80043c4:	4607      	mov	r7, r0
 80043c6:	b913      	cbnz	r3, 80043ce <__sfp+0x12>
 80043c8:	4630      	mov	r0, r6
 80043ca:	f7ff ffc7 	bl	800435c <__sinit>
 80043ce:	3648      	adds	r6, #72	; 0x48
 80043d0:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80043d4:	3b01      	subs	r3, #1
 80043d6:	d503      	bpl.n	80043e0 <__sfp+0x24>
 80043d8:	6833      	ldr	r3, [r6, #0]
 80043da:	b133      	cbz	r3, 80043ea <__sfp+0x2e>
 80043dc:	6836      	ldr	r6, [r6, #0]
 80043de:	e7f7      	b.n	80043d0 <__sfp+0x14>
 80043e0:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80043e4:	b16d      	cbz	r5, 8004402 <__sfp+0x46>
 80043e6:	3468      	adds	r4, #104	; 0x68
 80043e8:	e7f4      	b.n	80043d4 <__sfp+0x18>
 80043ea:	2104      	movs	r1, #4
 80043ec:	4638      	mov	r0, r7
 80043ee:	f7ff ff9f 	bl	8004330 <__sfmoreglue>
 80043f2:	6030      	str	r0, [r6, #0]
 80043f4:	2800      	cmp	r0, #0
 80043f6:	d1f1      	bne.n	80043dc <__sfp+0x20>
 80043f8:	230c      	movs	r3, #12
 80043fa:	603b      	str	r3, [r7, #0]
 80043fc:	4604      	mov	r4, r0
 80043fe:	4620      	mov	r0, r4
 8004400:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004402:	4b0b      	ldr	r3, [pc, #44]	; (8004430 <__sfp+0x74>)
 8004404:	6665      	str	r5, [r4, #100]	; 0x64
 8004406:	e9c4 5500 	strd	r5, r5, [r4]
 800440a:	60a5      	str	r5, [r4, #8]
 800440c:	e9c4 3503 	strd	r3, r5, [r4, #12]
 8004410:	e9c4 5505 	strd	r5, r5, [r4, #20]
 8004414:	2208      	movs	r2, #8
 8004416:	4629      	mov	r1, r5
 8004418:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800441c:	f7ff ff3e 	bl	800429c <memset>
 8004420:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8004424:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8004428:	e7e9      	b.n	80043fe <__sfp+0x42>
 800442a:	bf00      	nop
 800442c:	080050c4 	.word	0x080050c4
 8004430:	ffff0001 	.word	0xffff0001

08004434 <_fwalk_reent>:
 8004434:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004438:	4680      	mov	r8, r0
 800443a:	4689      	mov	r9, r1
 800443c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8004440:	2600      	movs	r6, #0
 8004442:	b914      	cbnz	r4, 800444a <_fwalk_reent+0x16>
 8004444:	4630      	mov	r0, r6
 8004446:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800444a:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 800444e:	3f01      	subs	r7, #1
 8004450:	d501      	bpl.n	8004456 <_fwalk_reent+0x22>
 8004452:	6824      	ldr	r4, [r4, #0]
 8004454:	e7f5      	b.n	8004442 <_fwalk_reent+0xe>
 8004456:	89ab      	ldrh	r3, [r5, #12]
 8004458:	2b01      	cmp	r3, #1
 800445a:	d907      	bls.n	800446c <_fwalk_reent+0x38>
 800445c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8004460:	3301      	adds	r3, #1
 8004462:	d003      	beq.n	800446c <_fwalk_reent+0x38>
 8004464:	4629      	mov	r1, r5
 8004466:	4640      	mov	r0, r8
 8004468:	47c8      	blx	r9
 800446a:	4306      	orrs	r6, r0
 800446c:	3568      	adds	r5, #104	; 0x68
 800446e:	e7ee      	b.n	800444e <_fwalk_reent+0x1a>

08004470 <_malloc_r>:
 8004470:	b570      	push	{r4, r5, r6, lr}
 8004472:	1ccd      	adds	r5, r1, #3
 8004474:	f025 0503 	bic.w	r5, r5, #3
 8004478:	3508      	adds	r5, #8
 800447a:	2d0c      	cmp	r5, #12
 800447c:	bf38      	it	cc
 800447e:	250c      	movcc	r5, #12
 8004480:	2d00      	cmp	r5, #0
 8004482:	4606      	mov	r6, r0
 8004484:	db01      	blt.n	800448a <_malloc_r+0x1a>
 8004486:	42a9      	cmp	r1, r5
 8004488:	d903      	bls.n	8004492 <_malloc_r+0x22>
 800448a:	230c      	movs	r3, #12
 800448c:	6033      	str	r3, [r6, #0]
 800448e:	2000      	movs	r0, #0
 8004490:	bd70      	pop	{r4, r5, r6, pc}
 8004492:	f000 fd6b 	bl	8004f6c <__malloc_lock>
 8004496:	4a21      	ldr	r2, [pc, #132]	; (800451c <_malloc_r+0xac>)
 8004498:	6814      	ldr	r4, [r2, #0]
 800449a:	4621      	mov	r1, r4
 800449c:	b991      	cbnz	r1, 80044c4 <_malloc_r+0x54>
 800449e:	4c20      	ldr	r4, [pc, #128]	; (8004520 <_malloc_r+0xb0>)
 80044a0:	6823      	ldr	r3, [r4, #0]
 80044a2:	b91b      	cbnz	r3, 80044ac <_malloc_r+0x3c>
 80044a4:	4630      	mov	r0, r6
 80044a6:	f000 fb05 	bl	8004ab4 <_sbrk_r>
 80044aa:	6020      	str	r0, [r4, #0]
 80044ac:	4629      	mov	r1, r5
 80044ae:	4630      	mov	r0, r6
 80044b0:	f000 fb00 	bl	8004ab4 <_sbrk_r>
 80044b4:	1c43      	adds	r3, r0, #1
 80044b6:	d124      	bne.n	8004502 <_malloc_r+0x92>
 80044b8:	230c      	movs	r3, #12
 80044ba:	6033      	str	r3, [r6, #0]
 80044bc:	4630      	mov	r0, r6
 80044be:	f000 fd56 	bl	8004f6e <__malloc_unlock>
 80044c2:	e7e4      	b.n	800448e <_malloc_r+0x1e>
 80044c4:	680b      	ldr	r3, [r1, #0]
 80044c6:	1b5b      	subs	r3, r3, r5
 80044c8:	d418      	bmi.n	80044fc <_malloc_r+0x8c>
 80044ca:	2b0b      	cmp	r3, #11
 80044cc:	d90f      	bls.n	80044ee <_malloc_r+0x7e>
 80044ce:	600b      	str	r3, [r1, #0]
 80044d0:	50cd      	str	r5, [r1, r3]
 80044d2:	18cc      	adds	r4, r1, r3
 80044d4:	4630      	mov	r0, r6
 80044d6:	f000 fd4a 	bl	8004f6e <__malloc_unlock>
 80044da:	f104 000b 	add.w	r0, r4, #11
 80044de:	1d23      	adds	r3, r4, #4
 80044e0:	f020 0007 	bic.w	r0, r0, #7
 80044e4:	1ac3      	subs	r3, r0, r3
 80044e6:	d0d3      	beq.n	8004490 <_malloc_r+0x20>
 80044e8:	425a      	negs	r2, r3
 80044ea:	50e2      	str	r2, [r4, r3]
 80044ec:	e7d0      	b.n	8004490 <_malloc_r+0x20>
 80044ee:	428c      	cmp	r4, r1
 80044f0:	684b      	ldr	r3, [r1, #4]
 80044f2:	bf16      	itet	ne
 80044f4:	6063      	strne	r3, [r4, #4]
 80044f6:	6013      	streq	r3, [r2, #0]
 80044f8:	460c      	movne	r4, r1
 80044fa:	e7eb      	b.n	80044d4 <_malloc_r+0x64>
 80044fc:	460c      	mov	r4, r1
 80044fe:	6849      	ldr	r1, [r1, #4]
 8004500:	e7cc      	b.n	800449c <_malloc_r+0x2c>
 8004502:	1cc4      	adds	r4, r0, #3
 8004504:	f024 0403 	bic.w	r4, r4, #3
 8004508:	42a0      	cmp	r0, r4
 800450a:	d005      	beq.n	8004518 <_malloc_r+0xa8>
 800450c:	1a21      	subs	r1, r4, r0
 800450e:	4630      	mov	r0, r6
 8004510:	f000 fad0 	bl	8004ab4 <_sbrk_r>
 8004514:	3001      	adds	r0, #1
 8004516:	d0cf      	beq.n	80044b8 <_malloc_r+0x48>
 8004518:	6025      	str	r5, [r4, #0]
 800451a:	e7db      	b.n	80044d4 <_malloc_r+0x64>
 800451c:	200000a0 	.word	0x200000a0
 8004520:	200000a4 	.word	0x200000a4

08004524 <__sfputc_r>:
 8004524:	6893      	ldr	r3, [r2, #8]
 8004526:	3b01      	subs	r3, #1
 8004528:	2b00      	cmp	r3, #0
 800452a:	b410      	push	{r4}
 800452c:	6093      	str	r3, [r2, #8]
 800452e:	da08      	bge.n	8004542 <__sfputc_r+0x1e>
 8004530:	6994      	ldr	r4, [r2, #24]
 8004532:	42a3      	cmp	r3, r4
 8004534:	db01      	blt.n	800453a <__sfputc_r+0x16>
 8004536:	290a      	cmp	r1, #10
 8004538:	d103      	bne.n	8004542 <__sfputc_r+0x1e>
 800453a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800453e:	f000 bb0d 	b.w	8004b5c <__swbuf_r>
 8004542:	6813      	ldr	r3, [r2, #0]
 8004544:	1c58      	adds	r0, r3, #1
 8004546:	6010      	str	r0, [r2, #0]
 8004548:	7019      	strb	r1, [r3, #0]
 800454a:	4608      	mov	r0, r1
 800454c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004550:	4770      	bx	lr

08004552 <__sfputs_r>:
 8004552:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004554:	4606      	mov	r6, r0
 8004556:	460f      	mov	r7, r1
 8004558:	4614      	mov	r4, r2
 800455a:	18d5      	adds	r5, r2, r3
 800455c:	42ac      	cmp	r4, r5
 800455e:	d101      	bne.n	8004564 <__sfputs_r+0x12>
 8004560:	2000      	movs	r0, #0
 8004562:	e007      	b.n	8004574 <__sfputs_r+0x22>
 8004564:	463a      	mov	r2, r7
 8004566:	f814 1b01 	ldrb.w	r1, [r4], #1
 800456a:	4630      	mov	r0, r6
 800456c:	f7ff ffda 	bl	8004524 <__sfputc_r>
 8004570:	1c43      	adds	r3, r0, #1
 8004572:	d1f3      	bne.n	800455c <__sfputs_r+0xa>
 8004574:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08004578 <_vfiprintf_r>:
 8004578:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800457c:	460c      	mov	r4, r1
 800457e:	b09d      	sub	sp, #116	; 0x74
 8004580:	4617      	mov	r7, r2
 8004582:	461d      	mov	r5, r3
 8004584:	4606      	mov	r6, r0
 8004586:	b118      	cbz	r0, 8004590 <_vfiprintf_r+0x18>
 8004588:	6983      	ldr	r3, [r0, #24]
 800458a:	b90b      	cbnz	r3, 8004590 <_vfiprintf_r+0x18>
 800458c:	f7ff fee6 	bl	800435c <__sinit>
 8004590:	4b7c      	ldr	r3, [pc, #496]	; (8004784 <_vfiprintf_r+0x20c>)
 8004592:	429c      	cmp	r4, r3
 8004594:	d158      	bne.n	8004648 <_vfiprintf_r+0xd0>
 8004596:	6874      	ldr	r4, [r6, #4]
 8004598:	89a3      	ldrh	r3, [r4, #12]
 800459a:	0718      	lsls	r0, r3, #28
 800459c:	d55e      	bpl.n	800465c <_vfiprintf_r+0xe4>
 800459e:	6923      	ldr	r3, [r4, #16]
 80045a0:	2b00      	cmp	r3, #0
 80045a2:	d05b      	beq.n	800465c <_vfiprintf_r+0xe4>
 80045a4:	2300      	movs	r3, #0
 80045a6:	9309      	str	r3, [sp, #36]	; 0x24
 80045a8:	2320      	movs	r3, #32
 80045aa:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80045ae:	2330      	movs	r3, #48	; 0x30
 80045b0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80045b4:	9503      	str	r5, [sp, #12]
 80045b6:	f04f 0b01 	mov.w	fp, #1
 80045ba:	46b8      	mov	r8, r7
 80045bc:	4645      	mov	r5, r8
 80045be:	f815 3b01 	ldrb.w	r3, [r5], #1
 80045c2:	b10b      	cbz	r3, 80045c8 <_vfiprintf_r+0x50>
 80045c4:	2b25      	cmp	r3, #37	; 0x25
 80045c6:	d154      	bne.n	8004672 <_vfiprintf_r+0xfa>
 80045c8:	ebb8 0a07 	subs.w	sl, r8, r7
 80045cc:	d00b      	beq.n	80045e6 <_vfiprintf_r+0x6e>
 80045ce:	4653      	mov	r3, sl
 80045d0:	463a      	mov	r2, r7
 80045d2:	4621      	mov	r1, r4
 80045d4:	4630      	mov	r0, r6
 80045d6:	f7ff ffbc 	bl	8004552 <__sfputs_r>
 80045da:	3001      	adds	r0, #1
 80045dc:	f000 80c2 	beq.w	8004764 <_vfiprintf_r+0x1ec>
 80045e0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80045e2:	4453      	add	r3, sl
 80045e4:	9309      	str	r3, [sp, #36]	; 0x24
 80045e6:	f898 3000 	ldrb.w	r3, [r8]
 80045ea:	2b00      	cmp	r3, #0
 80045ec:	f000 80ba 	beq.w	8004764 <_vfiprintf_r+0x1ec>
 80045f0:	2300      	movs	r3, #0
 80045f2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80045f6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80045fa:	9304      	str	r3, [sp, #16]
 80045fc:	9307      	str	r3, [sp, #28]
 80045fe:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8004602:	931a      	str	r3, [sp, #104]	; 0x68
 8004604:	46a8      	mov	r8, r5
 8004606:	2205      	movs	r2, #5
 8004608:	f818 1b01 	ldrb.w	r1, [r8], #1
 800460c:	485e      	ldr	r0, [pc, #376]	; (8004788 <_vfiprintf_r+0x210>)
 800460e:	f7fb fdff 	bl	8000210 <memchr>
 8004612:	9b04      	ldr	r3, [sp, #16]
 8004614:	bb78      	cbnz	r0, 8004676 <_vfiprintf_r+0xfe>
 8004616:	06d9      	lsls	r1, r3, #27
 8004618:	bf44      	itt	mi
 800461a:	2220      	movmi	r2, #32
 800461c:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8004620:	071a      	lsls	r2, r3, #28
 8004622:	bf44      	itt	mi
 8004624:	222b      	movmi	r2, #43	; 0x2b
 8004626:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800462a:	782a      	ldrb	r2, [r5, #0]
 800462c:	2a2a      	cmp	r2, #42	; 0x2a
 800462e:	d02a      	beq.n	8004686 <_vfiprintf_r+0x10e>
 8004630:	9a07      	ldr	r2, [sp, #28]
 8004632:	46a8      	mov	r8, r5
 8004634:	2000      	movs	r0, #0
 8004636:	250a      	movs	r5, #10
 8004638:	4641      	mov	r1, r8
 800463a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800463e:	3b30      	subs	r3, #48	; 0x30
 8004640:	2b09      	cmp	r3, #9
 8004642:	d969      	bls.n	8004718 <_vfiprintf_r+0x1a0>
 8004644:	b360      	cbz	r0, 80046a0 <_vfiprintf_r+0x128>
 8004646:	e024      	b.n	8004692 <_vfiprintf_r+0x11a>
 8004648:	4b50      	ldr	r3, [pc, #320]	; (800478c <_vfiprintf_r+0x214>)
 800464a:	429c      	cmp	r4, r3
 800464c:	d101      	bne.n	8004652 <_vfiprintf_r+0xda>
 800464e:	68b4      	ldr	r4, [r6, #8]
 8004650:	e7a2      	b.n	8004598 <_vfiprintf_r+0x20>
 8004652:	4b4f      	ldr	r3, [pc, #316]	; (8004790 <_vfiprintf_r+0x218>)
 8004654:	429c      	cmp	r4, r3
 8004656:	bf08      	it	eq
 8004658:	68f4      	ldreq	r4, [r6, #12]
 800465a:	e79d      	b.n	8004598 <_vfiprintf_r+0x20>
 800465c:	4621      	mov	r1, r4
 800465e:	4630      	mov	r0, r6
 8004660:	f000 fae0 	bl	8004c24 <__swsetup_r>
 8004664:	2800      	cmp	r0, #0
 8004666:	d09d      	beq.n	80045a4 <_vfiprintf_r+0x2c>
 8004668:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800466c:	b01d      	add	sp, #116	; 0x74
 800466e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004672:	46a8      	mov	r8, r5
 8004674:	e7a2      	b.n	80045bc <_vfiprintf_r+0x44>
 8004676:	4a44      	ldr	r2, [pc, #272]	; (8004788 <_vfiprintf_r+0x210>)
 8004678:	1a80      	subs	r0, r0, r2
 800467a:	fa0b f000 	lsl.w	r0, fp, r0
 800467e:	4318      	orrs	r0, r3
 8004680:	9004      	str	r0, [sp, #16]
 8004682:	4645      	mov	r5, r8
 8004684:	e7be      	b.n	8004604 <_vfiprintf_r+0x8c>
 8004686:	9a03      	ldr	r2, [sp, #12]
 8004688:	1d11      	adds	r1, r2, #4
 800468a:	6812      	ldr	r2, [r2, #0]
 800468c:	9103      	str	r1, [sp, #12]
 800468e:	2a00      	cmp	r2, #0
 8004690:	db01      	blt.n	8004696 <_vfiprintf_r+0x11e>
 8004692:	9207      	str	r2, [sp, #28]
 8004694:	e004      	b.n	80046a0 <_vfiprintf_r+0x128>
 8004696:	4252      	negs	r2, r2
 8004698:	f043 0302 	orr.w	r3, r3, #2
 800469c:	9207      	str	r2, [sp, #28]
 800469e:	9304      	str	r3, [sp, #16]
 80046a0:	f898 3000 	ldrb.w	r3, [r8]
 80046a4:	2b2e      	cmp	r3, #46	; 0x2e
 80046a6:	d10e      	bne.n	80046c6 <_vfiprintf_r+0x14e>
 80046a8:	f898 3001 	ldrb.w	r3, [r8, #1]
 80046ac:	2b2a      	cmp	r3, #42	; 0x2a
 80046ae:	d138      	bne.n	8004722 <_vfiprintf_r+0x1aa>
 80046b0:	9b03      	ldr	r3, [sp, #12]
 80046b2:	1d1a      	adds	r2, r3, #4
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	9203      	str	r2, [sp, #12]
 80046b8:	2b00      	cmp	r3, #0
 80046ba:	bfb8      	it	lt
 80046bc:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 80046c0:	f108 0802 	add.w	r8, r8, #2
 80046c4:	9305      	str	r3, [sp, #20]
 80046c6:	4d33      	ldr	r5, [pc, #204]	; (8004794 <_vfiprintf_r+0x21c>)
 80046c8:	f898 1000 	ldrb.w	r1, [r8]
 80046cc:	2203      	movs	r2, #3
 80046ce:	4628      	mov	r0, r5
 80046d0:	f7fb fd9e 	bl	8000210 <memchr>
 80046d4:	b140      	cbz	r0, 80046e8 <_vfiprintf_r+0x170>
 80046d6:	2340      	movs	r3, #64	; 0x40
 80046d8:	1b40      	subs	r0, r0, r5
 80046da:	fa03 f000 	lsl.w	r0, r3, r0
 80046de:	9b04      	ldr	r3, [sp, #16]
 80046e0:	4303      	orrs	r3, r0
 80046e2:	f108 0801 	add.w	r8, r8, #1
 80046e6:	9304      	str	r3, [sp, #16]
 80046e8:	f898 1000 	ldrb.w	r1, [r8]
 80046ec:	482a      	ldr	r0, [pc, #168]	; (8004798 <_vfiprintf_r+0x220>)
 80046ee:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80046f2:	2206      	movs	r2, #6
 80046f4:	f108 0701 	add.w	r7, r8, #1
 80046f8:	f7fb fd8a 	bl	8000210 <memchr>
 80046fc:	2800      	cmp	r0, #0
 80046fe:	d037      	beq.n	8004770 <_vfiprintf_r+0x1f8>
 8004700:	4b26      	ldr	r3, [pc, #152]	; (800479c <_vfiprintf_r+0x224>)
 8004702:	bb1b      	cbnz	r3, 800474c <_vfiprintf_r+0x1d4>
 8004704:	9b03      	ldr	r3, [sp, #12]
 8004706:	3307      	adds	r3, #7
 8004708:	f023 0307 	bic.w	r3, r3, #7
 800470c:	3308      	adds	r3, #8
 800470e:	9303      	str	r3, [sp, #12]
 8004710:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004712:	444b      	add	r3, r9
 8004714:	9309      	str	r3, [sp, #36]	; 0x24
 8004716:	e750      	b.n	80045ba <_vfiprintf_r+0x42>
 8004718:	fb05 3202 	mla	r2, r5, r2, r3
 800471c:	2001      	movs	r0, #1
 800471e:	4688      	mov	r8, r1
 8004720:	e78a      	b.n	8004638 <_vfiprintf_r+0xc0>
 8004722:	2300      	movs	r3, #0
 8004724:	f108 0801 	add.w	r8, r8, #1
 8004728:	9305      	str	r3, [sp, #20]
 800472a:	4619      	mov	r1, r3
 800472c:	250a      	movs	r5, #10
 800472e:	4640      	mov	r0, r8
 8004730:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004734:	3a30      	subs	r2, #48	; 0x30
 8004736:	2a09      	cmp	r2, #9
 8004738:	d903      	bls.n	8004742 <_vfiprintf_r+0x1ca>
 800473a:	2b00      	cmp	r3, #0
 800473c:	d0c3      	beq.n	80046c6 <_vfiprintf_r+0x14e>
 800473e:	9105      	str	r1, [sp, #20]
 8004740:	e7c1      	b.n	80046c6 <_vfiprintf_r+0x14e>
 8004742:	fb05 2101 	mla	r1, r5, r1, r2
 8004746:	2301      	movs	r3, #1
 8004748:	4680      	mov	r8, r0
 800474a:	e7f0      	b.n	800472e <_vfiprintf_r+0x1b6>
 800474c:	ab03      	add	r3, sp, #12
 800474e:	9300      	str	r3, [sp, #0]
 8004750:	4622      	mov	r2, r4
 8004752:	4b13      	ldr	r3, [pc, #76]	; (80047a0 <_vfiprintf_r+0x228>)
 8004754:	a904      	add	r1, sp, #16
 8004756:	4630      	mov	r0, r6
 8004758:	f3af 8000 	nop.w
 800475c:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 8004760:	4681      	mov	r9, r0
 8004762:	d1d5      	bne.n	8004710 <_vfiprintf_r+0x198>
 8004764:	89a3      	ldrh	r3, [r4, #12]
 8004766:	065b      	lsls	r3, r3, #25
 8004768:	f53f af7e 	bmi.w	8004668 <_vfiprintf_r+0xf0>
 800476c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800476e:	e77d      	b.n	800466c <_vfiprintf_r+0xf4>
 8004770:	ab03      	add	r3, sp, #12
 8004772:	9300      	str	r3, [sp, #0]
 8004774:	4622      	mov	r2, r4
 8004776:	4b0a      	ldr	r3, [pc, #40]	; (80047a0 <_vfiprintf_r+0x228>)
 8004778:	a904      	add	r1, sp, #16
 800477a:	4630      	mov	r0, r6
 800477c:	f000 f888 	bl	8004890 <_printf_i>
 8004780:	e7ec      	b.n	800475c <_vfiprintf_r+0x1e4>
 8004782:	bf00      	nop
 8004784:	080050e8 	.word	0x080050e8
 8004788:	08005128 	.word	0x08005128
 800478c:	08005108 	.word	0x08005108
 8004790:	080050c8 	.word	0x080050c8
 8004794:	0800512e 	.word	0x0800512e
 8004798:	08005132 	.word	0x08005132
 800479c:	00000000 	.word	0x00000000
 80047a0:	08004553 	.word	0x08004553

080047a4 <_printf_common>:
 80047a4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80047a8:	4691      	mov	r9, r2
 80047aa:	461f      	mov	r7, r3
 80047ac:	688a      	ldr	r2, [r1, #8]
 80047ae:	690b      	ldr	r3, [r1, #16]
 80047b0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80047b4:	4293      	cmp	r3, r2
 80047b6:	bfb8      	it	lt
 80047b8:	4613      	movlt	r3, r2
 80047ba:	f8c9 3000 	str.w	r3, [r9]
 80047be:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80047c2:	4606      	mov	r6, r0
 80047c4:	460c      	mov	r4, r1
 80047c6:	b112      	cbz	r2, 80047ce <_printf_common+0x2a>
 80047c8:	3301      	adds	r3, #1
 80047ca:	f8c9 3000 	str.w	r3, [r9]
 80047ce:	6823      	ldr	r3, [r4, #0]
 80047d0:	0699      	lsls	r1, r3, #26
 80047d2:	bf42      	ittt	mi
 80047d4:	f8d9 3000 	ldrmi.w	r3, [r9]
 80047d8:	3302      	addmi	r3, #2
 80047da:	f8c9 3000 	strmi.w	r3, [r9]
 80047de:	6825      	ldr	r5, [r4, #0]
 80047e0:	f015 0506 	ands.w	r5, r5, #6
 80047e4:	d107      	bne.n	80047f6 <_printf_common+0x52>
 80047e6:	f104 0a19 	add.w	sl, r4, #25
 80047ea:	68e3      	ldr	r3, [r4, #12]
 80047ec:	f8d9 2000 	ldr.w	r2, [r9]
 80047f0:	1a9b      	subs	r3, r3, r2
 80047f2:	42ab      	cmp	r3, r5
 80047f4:	dc28      	bgt.n	8004848 <_printf_common+0xa4>
 80047f6:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 80047fa:	6822      	ldr	r2, [r4, #0]
 80047fc:	3300      	adds	r3, #0
 80047fe:	bf18      	it	ne
 8004800:	2301      	movne	r3, #1
 8004802:	0692      	lsls	r2, r2, #26
 8004804:	d42d      	bmi.n	8004862 <_printf_common+0xbe>
 8004806:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800480a:	4639      	mov	r1, r7
 800480c:	4630      	mov	r0, r6
 800480e:	47c0      	blx	r8
 8004810:	3001      	adds	r0, #1
 8004812:	d020      	beq.n	8004856 <_printf_common+0xb2>
 8004814:	6823      	ldr	r3, [r4, #0]
 8004816:	68e5      	ldr	r5, [r4, #12]
 8004818:	f8d9 2000 	ldr.w	r2, [r9]
 800481c:	f003 0306 	and.w	r3, r3, #6
 8004820:	2b04      	cmp	r3, #4
 8004822:	bf08      	it	eq
 8004824:	1aad      	subeq	r5, r5, r2
 8004826:	68a3      	ldr	r3, [r4, #8]
 8004828:	6922      	ldr	r2, [r4, #16]
 800482a:	bf0c      	ite	eq
 800482c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004830:	2500      	movne	r5, #0
 8004832:	4293      	cmp	r3, r2
 8004834:	bfc4      	itt	gt
 8004836:	1a9b      	subgt	r3, r3, r2
 8004838:	18ed      	addgt	r5, r5, r3
 800483a:	f04f 0900 	mov.w	r9, #0
 800483e:	341a      	adds	r4, #26
 8004840:	454d      	cmp	r5, r9
 8004842:	d11a      	bne.n	800487a <_printf_common+0xd6>
 8004844:	2000      	movs	r0, #0
 8004846:	e008      	b.n	800485a <_printf_common+0xb6>
 8004848:	2301      	movs	r3, #1
 800484a:	4652      	mov	r2, sl
 800484c:	4639      	mov	r1, r7
 800484e:	4630      	mov	r0, r6
 8004850:	47c0      	blx	r8
 8004852:	3001      	adds	r0, #1
 8004854:	d103      	bne.n	800485e <_printf_common+0xba>
 8004856:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800485a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800485e:	3501      	adds	r5, #1
 8004860:	e7c3      	b.n	80047ea <_printf_common+0x46>
 8004862:	18e1      	adds	r1, r4, r3
 8004864:	1c5a      	adds	r2, r3, #1
 8004866:	2030      	movs	r0, #48	; 0x30
 8004868:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800486c:	4422      	add	r2, r4
 800486e:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004872:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004876:	3302      	adds	r3, #2
 8004878:	e7c5      	b.n	8004806 <_printf_common+0x62>
 800487a:	2301      	movs	r3, #1
 800487c:	4622      	mov	r2, r4
 800487e:	4639      	mov	r1, r7
 8004880:	4630      	mov	r0, r6
 8004882:	47c0      	blx	r8
 8004884:	3001      	adds	r0, #1
 8004886:	d0e6      	beq.n	8004856 <_printf_common+0xb2>
 8004888:	f109 0901 	add.w	r9, r9, #1
 800488c:	e7d8      	b.n	8004840 <_printf_common+0x9c>
	...

08004890 <_printf_i>:
 8004890:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8004894:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8004898:	460c      	mov	r4, r1
 800489a:	7e09      	ldrb	r1, [r1, #24]
 800489c:	b085      	sub	sp, #20
 800489e:	296e      	cmp	r1, #110	; 0x6e
 80048a0:	4617      	mov	r7, r2
 80048a2:	4606      	mov	r6, r0
 80048a4:	4698      	mov	r8, r3
 80048a6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80048a8:	f000 80b3 	beq.w	8004a12 <_printf_i+0x182>
 80048ac:	d822      	bhi.n	80048f4 <_printf_i+0x64>
 80048ae:	2963      	cmp	r1, #99	; 0x63
 80048b0:	d036      	beq.n	8004920 <_printf_i+0x90>
 80048b2:	d80a      	bhi.n	80048ca <_printf_i+0x3a>
 80048b4:	2900      	cmp	r1, #0
 80048b6:	f000 80b9 	beq.w	8004a2c <_printf_i+0x19c>
 80048ba:	2958      	cmp	r1, #88	; 0x58
 80048bc:	f000 8083 	beq.w	80049c6 <_printf_i+0x136>
 80048c0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80048c4:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 80048c8:	e032      	b.n	8004930 <_printf_i+0xa0>
 80048ca:	2964      	cmp	r1, #100	; 0x64
 80048cc:	d001      	beq.n	80048d2 <_printf_i+0x42>
 80048ce:	2969      	cmp	r1, #105	; 0x69
 80048d0:	d1f6      	bne.n	80048c0 <_printf_i+0x30>
 80048d2:	6820      	ldr	r0, [r4, #0]
 80048d4:	6813      	ldr	r3, [r2, #0]
 80048d6:	0605      	lsls	r5, r0, #24
 80048d8:	f103 0104 	add.w	r1, r3, #4
 80048dc:	d52a      	bpl.n	8004934 <_printf_i+0xa4>
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	6011      	str	r1, [r2, #0]
 80048e2:	2b00      	cmp	r3, #0
 80048e4:	da03      	bge.n	80048ee <_printf_i+0x5e>
 80048e6:	222d      	movs	r2, #45	; 0x2d
 80048e8:	425b      	negs	r3, r3
 80048ea:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 80048ee:	486f      	ldr	r0, [pc, #444]	; (8004aac <_printf_i+0x21c>)
 80048f0:	220a      	movs	r2, #10
 80048f2:	e039      	b.n	8004968 <_printf_i+0xd8>
 80048f4:	2973      	cmp	r1, #115	; 0x73
 80048f6:	f000 809d 	beq.w	8004a34 <_printf_i+0x1a4>
 80048fa:	d808      	bhi.n	800490e <_printf_i+0x7e>
 80048fc:	296f      	cmp	r1, #111	; 0x6f
 80048fe:	d020      	beq.n	8004942 <_printf_i+0xb2>
 8004900:	2970      	cmp	r1, #112	; 0x70
 8004902:	d1dd      	bne.n	80048c0 <_printf_i+0x30>
 8004904:	6823      	ldr	r3, [r4, #0]
 8004906:	f043 0320 	orr.w	r3, r3, #32
 800490a:	6023      	str	r3, [r4, #0]
 800490c:	e003      	b.n	8004916 <_printf_i+0x86>
 800490e:	2975      	cmp	r1, #117	; 0x75
 8004910:	d017      	beq.n	8004942 <_printf_i+0xb2>
 8004912:	2978      	cmp	r1, #120	; 0x78
 8004914:	d1d4      	bne.n	80048c0 <_printf_i+0x30>
 8004916:	2378      	movs	r3, #120	; 0x78
 8004918:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800491c:	4864      	ldr	r0, [pc, #400]	; (8004ab0 <_printf_i+0x220>)
 800491e:	e055      	b.n	80049cc <_printf_i+0x13c>
 8004920:	6813      	ldr	r3, [r2, #0]
 8004922:	1d19      	adds	r1, r3, #4
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	6011      	str	r1, [r2, #0]
 8004928:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800492c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004930:	2301      	movs	r3, #1
 8004932:	e08c      	b.n	8004a4e <_printf_i+0x1be>
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	6011      	str	r1, [r2, #0]
 8004938:	f010 0f40 	tst.w	r0, #64	; 0x40
 800493c:	bf18      	it	ne
 800493e:	b21b      	sxthne	r3, r3
 8004940:	e7cf      	b.n	80048e2 <_printf_i+0x52>
 8004942:	6813      	ldr	r3, [r2, #0]
 8004944:	6825      	ldr	r5, [r4, #0]
 8004946:	1d18      	adds	r0, r3, #4
 8004948:	6010      	str	r0, [r2, #0]
 800494a:	0628      	lsls	r0, r5, #24
 800494c:	d501      	bpl.n	8004952 <_printf_i+0xc2>
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	e002      	b.n	8004958 <_printf_i+0xc8>
 8004952:	0668      	lsls	r0, r5, #25
 8004954:	d5fb      	bpl.n	800494e <_printf_i+0xbe>
 8004956:	881b      	ldrh	r3, [r3, #0]
 8004958:	4854      	ldr	r0, [pc, #336]	; (8004aac <_printf_i+0x21c>)
 800495a:	296f      	cmp	r1, #111	; 0x6f
 800495c:	bf14      	ite	ne
 800495e:	220a      	movne	r2, #10
 8004960:	2208      	moveq	r2, #8
 8004962:	2100      	movs	r1, #0
 8004964:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8004968:	6865      	ldr	r5, [r4, #4]
 800496a:	60a5      	str	r5, [r4, #8]
 800496c:	2d00      	cmp	r5, #0
 800496e:	f2c0 8095 	blt.w	8004a9c <_printf_i+0x20c>
 8004972:	6821      	ldr	r1, [r4, #0]
 8004974:	f021 0104 	bic.w	r1, r1, #4
 8004978:	6021      	str	r1, [r4, #0]
 800497a:	2b00      	cmp	r3, #0
 800497c:	d13d      	bne.n	80049fa <_printf_i+0x16a>
 800497e:	2d00      	cmp	r5, #0
 8004980:	f040 808e 	bne.w	8004aa0 <_printf_i+0x210>
 8004984:	4665      	mov	r5, ip
 8004986:	2a08      	cmp	r2, #8
 8004988:	d10b      	bne.n	80049a2 <_printf_i+0x112>
 800498a:	6823      	ldr	r3, [r4, #0]
 800498c:	07db      	lsls	r3, r3, #31
 800498e:	d508      	bpl.n	80049a2 <_printf_i+0x112>
 8004990:	6923      	ldr	r3, [r4, #16]
 8004992:	6862      	ldr	r2, [r4, #4]
 8004994:	429a      	cmp	r2, r3
 8004996:	bfde      	ittt	le
 8004998:	2330      	movle	r3, #48	; 0x30
 800499a:	f805 3c01 	strble.w	r3, [r5, #-1]
 800499e:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 80049a2:	ebac 0305 	sub.w	r3, ip, r5
 80049a6:	6123      	str	r3, [r4, #16]
 80049a8:	f8cd 8000 	str.w	r8, [sp]
 80049ac:	463b      	mov	r3, r7
 80049ae:	aa03      	add	r2, sp, #12
 80049b0:	4621      	mov	r1, r4
 80049b2:	4630      	mov	r0, r6
 80049b4:	f7ff fef6 	bl	80047a4 <_printf_common>
 80049b8:	3001      	adds	r0, #1
 80049ba:	d14d      	bne.n	8004a58 <_printf_i+0x1c8>
 80049bc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80049c0:	b005      	add	sp, #20
 80049c2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80049c6:	4839      	ldr	r0, [pc, #228]	; (8004aac <_printf_i+0x21c>)
 80049c8:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 80049cc:	6813      	ldr	r3, [r2, #0]
 80049ce:	6821      	ldr	r1, [r4, #0]
 80049d0:	1d1d      	adds	r5, r3, #4
 80049d2:	681b      	ldr	r3, [r3, #0]
 80049d4:	6015      	str	r5, [r2, #0]
 80049d6:	060a      	lsls	r2, r1, #24
 80049d8:	d50b      	bpl.n	80049f2 <_printf_i+0x162>
 80049da:	07ca      	lsls	r2, r1, #31
 80049dc:	bf44      	itt	mi
 80049de:	f041 0120 	orrmi.w	r1, r1, #32
 80049e2:	6021      	strmi	r1, [r4, #0]
 80049e4:	b91b      	cbnz	r3, 80049ee <_printf_i+0x15e>
 80049e6:	6822      	ldr	r2, [r4, #0]
 80049e8:	f022 0220 	bic.w	r2, r2, #32
 80049ec:	6022      	str	r2, [r4, #0]
 80049ee:	2210      	movs	r2, #16
 80049f0:	e7b7      	b.n	8004962 <_printf_i+0xd2>
 80049f2:	064d      	lsls	r5, r1, #25
 80049f4:	bf48      	it	mi
 80049f6:	b29b      	uxthmi	r3, r3
 80049f8:	e7ef      	b.n	80049da <_printf_i+0x14a>
 80049fa:	4665      	mov	r5, ip
 80049fc:	fbb3 f1f2 	udiv	r1, r3, r2
 8004a00:	fb02 3311 	mls	r3, r2, r1, r3
 8004a04:	5cc3      	ldrb	r3, [r0, r3]
 8004a06:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8004a0a:	460b      	mov	r3, r1
 8004a0c:	2900      	cmp	r1, #0
 8004a0e:	d1f5      	bne.n	80049fc <_printf_i+0x16c>
 8004a10:	e7b9      	b.n	8004986 <_printf_i+0xf6>
 8004a12:	6813      	ldr	r3, [r2, #0]
 8004a14:	6825      	ldr	r5, [r4, #0]
 8004a16:	6961      	ldr	r1, [r4, #20]
 8004a18:	1d18      	adds	r0, r3, #4
 8004a1a:	6010      	str	r0, [r2, #0]
 8004a1c:	0628      	lsls	r0, r5, #24
 8004a1e:	681b      	ldr	r3, [r3, #0]
 8004a20:	d501      	bpl.n	8004a26 <_printf_i+0x196>
 8004a22:	6019      	str	r1, [r3, #0]
 8004a24:	e002      	b.n	8004a2c <_printf_i+0x19c>
 8004a26:	066a      	lsls	r2, r5, #25
 8004a28:	d5fb      	bpl.n	8004a22 <_printf_i+0x192>
 8004a2a:	8019      	strh	r1, [r3, #0]
 8004a2c:	2300      	movs	r3, #0
 8004a2e:	6123      	str	r3, [r4, #16]
 8004a30:	4665      	mov	r5, ip
 8004a32:	e7b9      	b.n	80049a8 <_printf_i+0x118>
 8004a34:	6813      	ldr	r3, [r2, #0]
 8004a36:	1d19      	adds	r1, r3, #4
 8004a38:	6011      	str	r1, [r2, #0]
 8004a3a:	681d      	ldr	r5, [r3, #0]
 8004a3c:	6862      	ldr	r2, [r4, #4]
 8004a3e:	2100      	movs	r1, #0
 8004a40:	4628      	mov	r0, r5
 8004a42:	f7fb fbe5 	bl	8000210 <memchr>
 8004a46:	b108      	cbz	r0, 8004a4c <_printf_i+0x1bc>
 8004a48:	1b40      	subs	r0, r0, r5
 8004a4a:	6060      	str	r0, [r4, #4]
 8004a4c:	6863      	ldr	r3, [r4, #4]
 8004a4e:	6123      	str	r3, [r4, #16]
 8004a50:	2300      	movs	r3, #0
 8004a52:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004a56:	e7a7      	b.n	80049a8 <_printf_i+0x118>
 8004a58:	6923      	ldr	r3, [r4, #16]
 8004a5a:	462a      	mov	r2, r5
 8004a5c:	4639      	mov	r1, r7
 8004a5e:	4630      	mov	r0, r6
 8004a60:	47c0      	blx	r8
 8004a62:	3001      	adds	r0, #1
 8004a64:	d0aa      	beq.n	80049bc <_printf_i+0x12c>
 8004a66:	6823      	ldr	r3, [r4, #0]
 8004a68:	079b      	lsls	r3, r3, #30
 8004a6a:	d413      	bmi.n	8004a94 <_printf_i+0x204>
 8004a6c:	68e0      	ldr	r0, [r4, #12]
 8004a6e:	9b03      	ldr	r3, [sp, #12]
 8004a70:	4298      	cmp	r0, r3
 8004a72:	bfb8      	it	lt
 8004a74:	4618      	movlt	r0, r3
 8004a76:	e7a3      	b.n	80049c0 <_printf_i+0x130>
 8004a78:	2301      	movs	r3, #1
 8004a7a:	464a      	mov	r2, r9
 8004a7c:	4639      	mov	r1, r7
 8004a7e:	4630      	mov	r0, r6
 8004a80:	47c0      	blx	r8
 8004a82:	3001      	adds	r0, #1
 8004a84:	d09a      	beq.n	80049bc <_printf_i+0x12c>
 8004a86:	3501      	adds	r5, #1
 8004a88:	68e3      	ldr	r3, [r4, #12]
 8004a8a:	9a03      	ldr	r2, [sp, #12]
 8004a8c:	1a9b      	subs	r3, r3, r2
 8004a8e:	42ab      	cmp	r3, r5
 8004a90:	dcf2      	bgt.n	8004a78 <_printf_i+0x1e8>
 8004a92:	e7eb      	b.n	8004a6c <_printf_i+0x1dc>
 8004a94:	2500      	movs	r5, #0
 8004a96:	f104 0919 	add.w	r9, r4, #25
 8004a9a:	e7f5      	b.n	8004a88 <_printf_i+0x1f8>
 8004a9c:	2b00      	cmp	r3, #0
 8004a9e:	d1ac      	bne.n	80049fa <_printf_i+0x16a>
 8004aa0:	7803      	ldrb	r3, [r0, #0]
 8004aa2:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004aa6:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004aaa:	e76c      	b.n	8004986 <_printf_i+0xf6>
 8004aac:	08005139 	.word	0x08005139
 8004ab0:	0800514a 	.word	0x0800514a

08004ab4 <_sbrk_r>:
 8004ab4:	b538      	push	{r3, r4, r5, lr}
 8004ab6:	4c06      	ldr	r4, [pc, #24]	; (8004ad0 <_sbrk_r+0x1c>)
 8004ab8:	2300      	movs	r3, #0
 8004aba:	4605      	mov	r5, r0
 8004abc:	4608      	mov	r0, r1
 8004abe:	6023      	str	r3, [r4, #0]
 8004ac0:	f7fc fd86 	bl	80015d0 <_sbrk>
 8004ac4:	1c43      	adds	r3, r0, #1
 8004ac6:	d102      	bne.n	8004ace <_sbrk_r+0x1a>
 8004ac8:	6823      	ldr	r3, [r4, #0]
 8004aca:	b103      	cbz	r3, 8004ace <_sbrk_r+0x1a>
 8004acc:	602b      	str	r3, [r5, #0]
 8004ace:	bd38      	pop	{r3, r4, r5, pc}
 8004ad0:	200001b0 	.word	0x200001b0

08004ad4 <__sread>:
 8004ad4:	b510      	push	{r4, lr}
 8004ad6:	460c      	mov	r4, r1
 8004ad8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004adc:	f000 fa96 	bl	800500c <_read_r>
 8004ae0:	2800      	cmp	r0, #0
 8004ae2:	bfab      	itete	ge
 8004ae4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8004ae6:	89a3      	ldrhlt	r3, [r4, #12]
 8004ae8:	181b      	addge	r3, r3, r0
 8004aea:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8004aee:	bfac      	ite	ge
 8004af0:	6563      	strge	r3, [r4, #84]	; 0x54
 8004af2:	81a3      	strhlt	r3, [r4, #12]
 8004af4:	bd10      	pop	{r4, pc}

08004af6 <__swrite>:
 8004af6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004afa:	461f      	mov	r7, r3
 8004afc:	898b      	ldrh	r3, [r1, #12]
 8004afe:	05db      	lsls	r3, r3, #23
 8004b00:	4605      	mov	r5, r0
 8004b02:	460c      	mov	r4, r1
 8004b04:	4616      	mov	r6, r2
 8004b06:	d505      	bpl.n	8004b14 <__swrite+0x1e>
 8004b08:	2302      	movs	r3, #2
 8004b0a:	2200      	movs	r2, #0
 8004b0c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004b10:	f000 f9b6 	bl	8004e80 <_lseek_r>
 8004b14:	89a3      	ldrh	r3, [r4, #12]
 8004b16:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004b1a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004b1e:	81a3      	strh	r3, [r4, #12]
 8004b20:	4632      	mov	r2, r6
 8004b22:	463b      	mov	r3, r7
 8004b24:	4628      	mov	r0, r5
 8004b26:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004b2a:	f000 b869 	b.w	8004c00 <_write_r>

08004b2e <__sseek>:
 8004b2e:	b510      	push	{r4, lr}
 8004b30:	460c      	mov	r4, r1
 8004b32:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004b36:	f000 f9a3 	bl	8004e80 <_lseek_r>
 8004b3a:	1c43      	adds	r3, r0, #1
 8004b3c:	89a3      	ldrh	r3, [r4, #12]
 8004b3e:	bf15      	itete	ne
 8004b40:	6560      	strne	r0, [r4, #84]	; 0x54
 8004b42:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8004b46:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8004b4a:	81a3      	strheq	r3, [r4, #12]
 8004b4c:	bf18      	it	ne
 8004b4e:	81a3      	strhne	r3, [r4, #12]
 8004b50:	bd10      	pop	{r4, pc}

08004b52 <__sclose>:
 8004b52:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004b56:	f000 b8d3 	b.w	8004d00 <_close_r>
	...

08004b5c <__swbuf_r>:
 8004b5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004b5e:	460e      	mov	r6, r1
 8004b60:	4614      	mov	r4, r2
 8004b62:	4605      	mov	r5, r0
 8004b64:	b118      	cbz	r0, 8004b6e <__swbuf_r+0x12>
 8004b66:	6983      	ldr	r3, [r0, #24]
 8004b68:	b90b      	cbnz	r3, 8004b6e <__swbuf_r+0x12>
 8004b6a:	f7ff fbf7 	bl	800435c <__sinit>
 8004b6e:	4b21      	ldr	r3, [pc, #132]	; (8004bf4 <__swbuf_r+0x98>)
 8004b70:	429c      	cmp	r4, r3
 8004b72:	d12a      	bne.n	8004bca <__swbuf_r+0x6e>
 8004b74:	686c      	ldr	r4, [r5, #4]
 8004b76:	69a3      	ldr	r3, [r4, #24]
 8004b78:	60a3      	str	r3, [r4, #8]
 8004b7a:	89a3      	ldrh	r3, [r4, #12]
 8004b7c:	071a      	lsls	r2, r3, #28
 8004b7e:	d52e      	bpl.n	8004bde <__swbuf_r+0x82>
 8004b80:	6923      	ldr	r3, [r4, #16]
 8004b82:	b363      	cbz	r3, 8004bde <__swbuf_r+0x82>
 8004b84:	6923      	ldr	r3, [r4, #16]
 8004b86:	6820      	ldr	r0, [r4, #0]
 8004b88:	1ac0      	subs	r0, r0, r3
 8004b8a:	6963      	ldr	r3, [r4, #20]
 8004b8c:	b2f6      	uxtb	r6, r6
 8004b8e:	4283      	cmp	r3, r0
 8004b90:	4637      	mov	r7, r6
 8004b92:	dc04      	bgt.n	8004b9e <__swbuf_r+0x42>
 8004b94:	4621      	mov	r1, r4
 8004b96:	4628      	mov	r0, r5
 8004b98:	f000 f948 	bl	8004e2c <_fflush_r>
 8004b9c:	bb28      	cbnz	r0, 8004bea <__swbuf_r+0x8e>
 8004b9e:	68a3      	ldr	r3, [r4, #8]
 8004ba0:	3b01      	subs	r3, #1
 8004ba2:	60a3      	str	r3, [r4, #8]
 8004ba4:	6823      	ldr	r3, [r4, #0]
 8004ba6:	1c5a      	adds	r2, r3, #1
 8004ba8:	6022      	str	r2, [r4, #0]
 8004baa:	701e      	strb	r6, [r3, #0]
 8004bac:	6963      	ldr	r3, [r4, #20]
 8004bae:	3001      	adds	r0, #1
 8004bb0:	4283      	cmp	r3, r0
 8004bb2:	d004      	beq.n	8004bbe <__swbuf_r+0x62>
 8004bb4:	89a3      	ldrh	r3, [r4, #12]
 8004bb6:	07db      	lsls	r3, r3, #31
 8004bb8:	d519      	bpl.n	8004bee <__swbuf_r+0x92>
 8004bba:	2e0a      	cmp	r6, #10
 8004bbc:	d117      	bne.n	8004bee <__swbuf_r+0x92>
 8004bbe:	4621      	mov	r1, r4
 8004bc0:	4628      	mov	r0, r5
 8004bc2:	f000 f933 	bl	8004e2c <_fflush_r>
 8004bc6:	b190      	cbz	r0, 8004bee <__swbuf_r+0x92>
 8004bc8:	e00f      	b.n	8004bea <__swbuf_r+0x8e>
 8004bca:	4b0b      	ldr	r3, [pc, #44]	; (8004bf8 <__swbuf_r+0x9c>)
 8004bcc:	429c      	cmp	r4, r3
 8004bce:	d101      	bne.n	8004bd4 <__swbuf_r+0x78>
 8004bd0:	68ac      	ldr	r4, [r5, #8]
 8004bd2:	e7d0      	b.n	8004b76 <__swbuf_r+0x1a>
 8004bd4:	4b09      	ldr	r3, [pc, #36]	; (8004bfc <__swbuf_r+0xa0>)
 8004bd6:	429c      	cmp	r4, r3
 8004bd8:	bf08      	it	eq
 8004bda:	68ec      	ldreq	r4, [r5, #12]
 8004bdc:	e7cb      	b.n	8004b76 <__swbuf_r+0x1a>
 8004bde:	4621      	mov	r1, r4
 8004be0:	4628      	mov	r0, r5
 8004be2:	f000 f81f 	bl	8004c24 <__swsetup_r>
 8004be6:	2800      	cmp	r0, #0
 8004be8:	d0cc      	beq.n	8004b84 <__swbuf_r+0x28>
 8004bea:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8004bee:	4638      	mov	r0, r7
 8004bf0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004bf2:	bf00      	nop
 8004bf4:	080050e8 	.word	0x080050e8
 8004bf8:	08005108 	.word	0x08005108
 8004bfc:	080050c8 	.word	0x080050c8

08004c00 <_write_r>:
 8004c00:	b538      	push	{r3, r4, r5, lr}
 8004c02:	4c07      	ldr	r4, [pc, #28]	; (8004c20 <_write_r+0x20>)
 8004c04:	4605      	mov	r5, r0
 8004c06:	4608      	mov	r0, r1
 8004c08:	4611      	mov	r1, r2
 8004c0a:	2200      	movs	r2, #0
 8004c0c:	6022      	str	r2, [r4, #0]
 8004c0e:	461a      	mov	r2, r3
 8004c10:	f7fc fc8d 	bl	800152e <_write>
 8004c14:	1c43      	adds	r3, r0, #1
 8004c16:	d102      	bne.n	8004c1e <_write_r+0x1e>
 8004c18:	6823      	ldr	r3, [r4, #0]
 8004c1a:	b103      	cbz	r3, 8004c1e <_write_r+0x1e>
 8004c1c:	602b      	str	r3, [r5, #0]
 8004c1e:	bd38      	pop	{r3, r4, r5, pc}
 8004c20:	200001b0 	.word	0x200001b0

08004c24 <__swsetup_r>:
 8004c24:	4b32      	ldr	r3, [pc, #200]	; (8004cf0 <__swsetup_r+0xcc>)
 8004c26:	b570      	push	{r4, r5, r6, lr}
 8004c28:	681d      	ldr	r5, [r3, #0]
 8004c2a:	4606      	mov	r6, r0
 8004c2c:	460c      	mov	r4, r1
 8004c2e:	b125      	cbz	r5, 8004c3a <__swsetup_r+0x16>
 8004c30:	69ab      	ldr	r3, [r5, #24]
 8004c32:	b913      	cbnz	r3, 8004c3a <__swsetup_r+0x16>
 8004c34:	4628      	mov	r0, r5
 8004c36:	f7ff fb91 	bl	800435c <__sinit>
 8004c3a:	4b2e      	ldr	r3, [pc, #184]	; (8004cf4 <__swsetup_r+0xd0>)
 8004c3c:	429c      	cmp	r4, r3
 8004c3e:	d10f      	bne.n	8004c60 <__swsetup_r+0x3c>
 8004c40:	686c      	ldr	r4, [r5, #4]
 8004c42:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004c46:	b29a      	uxth	r2, r3
 8004c48:	0715      	lsls	r5, r2, #28
 8004c4a:	d42c      	bmi.n	8004ca6 <__swsetup_r+0x82>
 8004c4c:	06d0      	lsls	r0, r2, #27
 8004c4e:	d411      	bmi.n	8004c74 <__swsetup_r+0x50>
 8004c50:	2209      	movs	r2, #9
 8004c52:	6032      	str	r2, [r6, #0]
 8004c54:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004c58:	81a3      	strh	r3, [r4, #12]
 8004c5a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004c5e:	e03e      	b.n	8004cde <__swsetup_r+0xba>
 8004c60:	4b25      	ldr	r3, [pc, #148]	; (8004cf8 <__swsetup_r+0xd4>)
 8004c62:	429c      	cmp	r4, r3
 8004c64:	d101      	bne.n	8004c6a <__swsetup_r+0x46>
 8004c66:	68ac      	ldr	r4, [r5, #8]
 8004c68:	e7eb      	b.n	8004c42 <__swsetup_r+0x1e>
 8004c6a:	4b24      	ldr	r3, [pc, #144]	; (8004cfc <__swsetup_r+0xd8>)
 8004c6c:	429c      	cmp	r4, r3
 8004c6e:	bf08      	it	eq
 8004c70:	68ec      	ldreq	r4, [r5, #12]
 8004c72:	e7e6      	b.n	8004c42 <__swsetup_r+0x1e>
 8004c74:	0751      	lsls	r1, r2, #29
 8004c76:	d512      	bpl.n	8004c9e <__swsetup_r+0x7a>
 8004c78:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004c7a:	b141      	cbz	r1, 8004c8e <__swsetup_r+0x6a>
 8004c7c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004c80:	4299      	cmp	r1, r3
 8004c82:	d002      	beq.n	8004c8a <__swsetup_r+0x66>
 8004c84:	4630      	mov	r0, r6
 8004c86:	f000 f973 	bl	8004f70 <_free_r>
 8004c8a:	2300      	movs	r3, #0
 8004c8c:	6363      	str	r3, [r4, #52]	; 0x34
 8004c8e:	89a3      	ldrh	r3, [r4, #12]
 8004c90:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8004c94:	81a3      	strh	r3, [r4, #12]
 8004c96:	2300      	movs	r3, #0
 8004c98:	6063      	str	r3, [r4, #4]
 8004c9a:	6923      	ldr	r3, [r4, #16]
 8004c9c:	6023      	str	r3, [r4, #0]
 8004c9e:	89a3      	ldrh	r3, [r4, #12]
 8004ca0:	f043 0308 	orr.w	r3, r3, #8
 8004ca4:	81a3      	strh	r3, [r4, #12]
 8004ca6:	6923      	ldr	r3, [r4, #16]
 8004ca8:	b94b      	cbnz	r3, 8004cbe <__swsetup_r+0x9a>
 8004caa:	89a3      	ldrh	r3, [r4, #12]
 8004cac:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8004cb0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004cb4:	d003      	beq.n	8004cbe <__swsetup_r+0x9a>
 8004cb6:	4621      	mov	r1, r4
 8004cb8:	4630      	mov	r0, r6
 8004cba:	f000 f917 	bl	8004eec <__smakebuf_r>
 8004cbe:	89a2      	ldrh	r2, [r4, #12]
 8004cc0:	f012 0301 	ands.w	r3, r2, #1
 8004cc4:	d00c      	beq.n	8004ce0 <__swsetup_r+0xbc>
 8004cc6:	2300      	movs	r3, #0
 8004cc8:	60a3      	str	r3, [r4, #8]
 8004cca:	6963      	ldr	r3, [r4, #20]
 8004ccc:	425b      	negs	r3, r3
 8004cce:	61a3      	str	r3, [r4, #24]
 8004cd0:	6923      	ldr	r3, [r4, #16]
 8004cd2:	b953      	cbnz	r3, 8004cea <__swsetup_r+0xc6>
 8004cd4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004cd8:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 8004cdc:	d1ba      	bne.n	8004c54 <__swsetup_r+0x30>
 8004cde:	bd70      	pop	{r4, r5, r6, pc}
 8004ce0:	0792      	lsls	r2, r2, #30
 8004ce2:	bf58      	it	pl
 8004ce4:	6963      	ldrpl	r3, [r4, #20]
 8004ce6:	60a3      	str	r3, [r4, #8]
 8004ce8:	e7f2      	b.n	8004cd0 <__swsetup_r+0xac>
 8004cea:	2000      	movs	r0, #0
 8004cec:	e7f7      	b.n	8004cde <__swsetup_r+0xba>
 8004cee:	bf00      	nop
 8004cf0:	2000000c 	.word	0x2000000c
 8004cf4:	080050e8 	.word	0x080050e8
 8004cf8:	08005108 	.word	0x08005108
 8004cfc:	080050c8 	.word	0x080050c8

08004d00 <_close_r>:
 8004d00:	b538      	push	{r3, r4, r5, lr}
 8004d02:	4c06      	ldr	r4, [pc, #24]	; (8004d1c <_close_r+0x1c>)
 8004d04:	2300      	movs	r3, #0
 8004d06:	4605      	mov	r5, r0
 8004d08:	4608      	mov	r0, r1
 8004d0a:	6023      	str	r3, [r4, #0]
 8004d0c:	f7fc fc2b 	bl	8001566 <_close>
 8004d10:	1c43      	adds	r3, r0, #1
 8004d12:	d102      	bne.n	8004d1a <_close_r+0x1a>
 8004d14:	6823      	ldr	r3, [r4, #0]
 8004d16:	b103      	cbz	r3, 8004d1a <_close_r+0x1a>
 8004d18:	602b      	str	r3, [r5, #0]
 8004d1a:	bd38      	pop	{r3, r4, r5, pc}
 8004d1c:	200001b0 	.word	0x200001b0

08004d20 <__sflush_r>:
 8004d20:	898a      	ldrh	r2, [r1, #12]
 8004d22:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004d26:	4605      	mov	r5, r0
 8004d28:	0710      	lsls	r0, r2, #28
 8004d2a:	460c      	mov	r4, r1
 8004d2c:	d458      	bmi.n	8004de0 <__sflush_r+0xc0>
 8004d2e:	684b      	ldr	r3, [r1, #4]
 8004d30:	2b00      	cmp	r3, #0
 8004d32:	dc05      	bgt.n	8004d40 <__sflush_r+0x20>
 8004d34:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8004d36:	2b00      	cmp	r3, #0
 8004d38:	dc02      	bgt.n	8004d40 <__sflush_r+0x20>
 8004d3a:	2000      	movs	r0, #0
 8004d3c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004d40:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8004d42:	2e00      	cmp	r6, #0
 8004d44:	d0f9      	beq.n	8004d3a <__sflush_r+0x1a>
 8004d46:	2300      	movs	r3, #0
 8004d48:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8004d4c:	682f      	ldr	r7, [r5, #0]
 8004d4e:	6a21      	ldr	r1, [r4, #32]
 8004d50:	602b      	str	r3, [r5, #0]
 8004d52:	d032      	beq.n	8004dba <__sflush_r+0x9a>
 8004d54:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8004d56:	89a3      	ldrh	r3, [r4, #12]
 8004d58:	075a      	lsls	r2, r3, #29
 8004d5a:	d505      	bpl.n	8004d68 <__sflush_r+0x48>
 8004d5c:	6863      	ldr	r3, [r4, #4]
 8004d5e:	1ac0      	subs	r0, r0, r3
 8004d60:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8004d62:	b10b      	cbz	r3, 8004d68 <__sflush_r+0x48>
 8004d64:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8004d66:	1ac0      	subs	r0, r0, r3
 8004d68:	2300      	movs	r3, #0
 8004d6a:	4602      	mov	r2, r0
 8004d6c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8004d6e:	6a21      	ldr	r1, [r4, #32]
 8004d70:	4628      	mov	r0, r5
 8004d72:	47b0      	blx	r6
 8004d74:	1c43      	adds	r3, r0, #1
 8004d76:	89a3      	ldrh	r3, [r4, #12]
 8004d78:	d106      	bne.n	8004d88 <__sflush_r+0x68>
 8004d7a:	6829      	ldr	r1, [r5, #0]
 8004d7c:	291d      	cmp	r1, #29
 8004d7e:	d848      	bhi.n	8004e12 <__sflush_r+0xf2>
 8004d80:	4a29      	ldr	r2, [pc, #164]	; (8004e28 <__sflush_r+0x108>)
 8004d82:	40ca      	lsrs	r2, r1
 8004d84:	07d6      	lsls	r6, r2, #31
 8004d86:	d544      	bpl.n	8004e12 <__sflush_r+0xf2>
 8004d88:	2200      	movs	r2, #0
 8004d8a:	6062      	str	r2, [r4, #4]
 8004d8c:	04d9      	lsls	r1, r3, #19
 8004d8e:	6922      	ldr	r2, [r4, #16]
 8004d90:	6022      	str	r2, [r4, #0]
 8004d92:	d504      	bpl.n	8004d9e <__sflush_r+0x7e>
 8004d94:	1c42      	adds	r2, r0, #1
 8004d96:	d101      	bne.n	8004d9c <__sflush_r+0x7c>
 8004d98:	682b      	ldr	r3, [r5, #0]
 8004d9a:	b903      	cbnz	r3, 8004d9e <__sflush_r+0x7e>
 8004d9c:	6560      	str	r0, [r4, #84]	; 0x54
 8004d9e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004da0:	602f      	str	r7, [r5, #0]
 8004da2:	2900      	cmp	r1, #0
 8004da4:	d0c9      	beq.n	8004d3a <__sflush_r+0x1a>
 8004da6:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004daa:	4299      	cmp	r1, r3
 8004dac:	d002      	beq.n	8004db4 <__sflush_r+0x94>
 8004dae:	4628      	mov	r0, r5
 8004db0:	f000 f8de 	bl	8004f70 <_free_r>
 8004db4:	2000      	movs	r0, #0
 8004db6:	6360      	str	r0, [r4, #52]	; 0x34
 8004db8:	e7c0      	b.n	8004d3c <__sflush_r+0x1c>
 8004dba:	2301      	movs	r3, #1
 8004dbc:	4628      	mov	r0, r5
 8004dbe:	47b0      	blx	r6
 8004dc0:	1c41      	adds	r1, r0, #1
 8004dc2:	d1c8      	bne.n	8004d56 <__sflush_r+0x36>
 8004dc4:	682b      	ldr	r3, [r5, #0]
 8004dc6:	2b00      	cmp	r3, #0
 8004dc8:	d0c5      	beq.n	8004d56 <__sflush_r+0x36>
 8004dca:	2b1d      	cmp	r3, #29
 8004dcc:	d001      	beq.n	8004dd2 <__sflush_r+0xb2>
 8004dce:	2b16      	cmp	r3, #22
 8004dd0:	d101      	bne.n	8004dd6 <__sflush_r+0xb6>
 8004dd2:	602f      	str	r7, [r5, #0]
 8004dd4:	e7b1      	b.n	8004d3a <__sflush_r+0x1a>
 8004dd6:	89a3      	ldrh	r3, [r4, #12]
 8004dd8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004ddc:	81a3      	strh	r3, [r4, #12]
 8004dde:	e7ad      	b.n	8004d3c <__sflush_r+0x1c>
 8004de0:	690f      	ldr	r7, [r1, #16]
 8004de2:	2f00      	cmp	r7, #0
 8004de4:	d0a9      	beq.n	8004d3a <__sflush_r+0x1a>
 8004de6:	0793      	lsls	r3, r2, #30
 8004de8:	680e      	ldr	r6, [r1, #0]
 8004dea:	bf08      	it	eq
 8004dec:	694b      	ldreq	r3, [r1, #20]
 8004dee:	600f      	str	r7, [r1, #0]
 8004df0:	bf18      	it	ne
 8004df2:	2300      	movne	r3, #0
 8004df4:	eba6 0807 	sub.w	r8, r6, r7
 8004df8:	608b      	str	r3, [r1, #8]
 8004dfa:	f1b8 0f00 	cmp.w	r8, #0
 8004dfe:	dd9c      	ble.n	8004d3a <__sflush_r+0x1a>
 8004e00:	4643      	mov	r3, r8
 8004e02:	463a      	mov	r2, r7
 8004e04:	6a21      	ldr	r1, [r4, #32]
 8004e06:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8004e08:	4628      	mov	r0, r5
 8004e0a:	47b0      	blx	r6
 8004e0c:	2800      	cmp	r0, #0
 8004e0e:	dc06      	bgt.n	8004e1e <__sflush_r+0xfe>
 8004e10:	89a3      	ldrh	r3, [r4, #12]
 8004e12:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004e16:	81a3      	strh	r3, [r4, #12]
 8004e18:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004e1c:	e78e      	b.n	8004d3c <__sflush_r+0x1c>
 8004e1e:	4407      	add	r7, r0
 8004e20:	eba8 0800 	sub.w	r8, r8, r0
 8004e24:	e7e9      	b.n	8004dfa <__sflush_r+0xda>
 8004e26:	bf00      	nop
 8004e28:	20400001 	.word	0x20400001

08004e2c <_fflush_r>:
 8004e2c:	b538      	push	{r3, r4, r5, lr}
 8004e2e:	690b      	ldr	r3, [r1, #16]
 8004e30:	4605      	mov	r5, r0
 8004e32:	460c      	mov	r4, r1
 8004e34:	b1db      	cbz	r3, 8004e6e <_fflush_r+0x42>
 8004e36:	b118      	cbz	r0, 8004e40 <_fflush_r+0x14>
 8004e38:	6983      	ldr	r3, [r0, #24]
 8004e3a:	b90b      	cbnz	r3, 8004e40 <_fflush_r+0x14>
 8004e3c:	f7ff fa8e 	bl	800435c <__sinit>
 8004e40:	4b0c      	ldr	r3, [pc, #48]	; (8004e74 <_fflush_r+0x48>)
 8004e42:	429c      	cmp	r4, r3
 8004e44:	d109      	bne.n	8004e5a <_fflush_r+0x2e>
 8004e46:	686c      	ldr	r4, [r5, #4]
 8004e48:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004e4c:	b17b      	cbz	r3, 8004e6e <_fflush_r+0x42>
 8004e4e:	4621      	mov	r1, r4
 8004e50:	4628      	mov	r0, r5
 8004e52:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004e56:	f7ff bf63 	b.w	8004d20 <__sflush_r>
 8004e5a:	4b07      	ldr	r3, [pc, #28]	; (8004e78 <_fflush_r+0x4c>)
 8004e5c:	429c      	cmp	r4, r3
 8004e5e:	d101      	bne.n	8004e64 <_fflush_r+0x38>
 8004e60:	68ac      	ldr	r4, [r5, #8]
 8004e62:	e7f1      	b.n	8004e48 <_fflush_r+0x1c>
 8004e64:	4b05      	ldr	r3, [pc, #20]	; (8004e7c <_fflush_r+0x50>)
 8004e66:	429c      	cmp	r4, r3
 8004e68:	bf08      	it	eq
 8004e6a:	68ec      	ldreq	r4, [r5, #12]
 8004e6c:	e7ec      	b.n	8004e48 <_fflush_r+0x1c>
 8004e6e:	2000      	movs	r0, #0
 8004e70:	bd38      	pop	{r3, r4, r5, pc}
 8004e72:	bf00      	nop
 8004e74:	080050e8 	.word	0x080050e8
 8004e78:	08005108 	.word	0x08005108
 8004e7c:	080050c8 	.word	0x080050c8

08004e80 <_lseek_r>:
 8004e80:	b538      	push	{r3, r4, r5, lr}
 8004e82:	4c07      	ldr	r4, [pc, #28]	; (8004ea0 <_lseek_r+0x20>)
 8004e84:	4605      	mov	r5, r0
 8004e86:	4608      	mov	r0, r1
 8004e88:	4611      	mov	r1, r2
 8004e8a:	2200      	movs	r2, #0
 8004e8c:	6022      	str	r2, [r4, #0]
 8004e8e:	461a      	mov	r2, r3
 8004e90:	f7fc fb90 	bl	80015b4 <_lseek>
 8004e94:	1c43      	adds	r3, r0, #1
 8004e96:	d102      	bne.n	8004e9e <_lseek_r+0x1e>
 8004e98:	6823      	ldr	r3, [r4, #0]
 8004e9a:	b103      	cbz	r3, 8004e9e <_lseek_r+0x1e>
 8004e9c:	602b      	str	r3, [r5, #0]
 8004e9e:	bd38      	pop	{r3, r4, r5, pc}
 8004ea0:	200001b0 	.word	0x200001b0

08004ea4 <__swhatbuf_r>:
 8004ea4:	b570      	push	{r4, r5, r6, lr}
 8004ea6:	460e      	mov	r6, r1
 8004ea8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004eac:	2900      	cmp	r1, #0
 8004eae:	b096      	sub	sp, #88	; 0x58
 8004eb0:	4614      	mov	r4, r2
 8004eb2:	461d      	mov	r5, r3
 8004eb4:	da07      	bge.n	8004ec6 <__swhatbuf_r+0x22>
 8004eb6:	2300      	movs	r3, #0
 8004eb8:	602b      	str	r3, [r5, #0]
 8004eba:	89b3      	ldrh	r3, [r6, #12]
 8004ebc:	061a      	lsls	r2, r3, #24
 8004ebe:	d410      	bmi.n	8004ee2 <__swhatbuf_r+0x3e>
 8004ec0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004ec4:	e00e      	b.n	8004ee4 <__swhatbuf_r+0x40>
 8004ec6:	466a      	mov	r2, sp
 8004ec8:	f000 f8b2 	bl	8005030 <_fstat_r>
 8004ecc:	2800      	cmp	r0, #0
 8004ece:	dbf2      	blt.n	8004eb6 <__swhatbuf_r+0x12>
 8004ed0:	9a01      	ldr	r2, [sp, #4]
 8004ed2:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8004ed6:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8004eda:	425a      	negs	r2, r3
 8004edc:	415a      	adcs	r2, r3
 8004ede:	602a      	str	r2, [r5, #0]
 8004ee0:	e7ee      	b.n	8004ec0 <__swhatbuf_r+0x1c>
 8004ee2:	2340      	movs	r3, #64	; 0x40
 8004ee4:	2000      	movs	r0, #0
 8004ee6:	6023      	str	r3, [r4, #0]
 8004ee8:	b016      	add	sp, #88	; 0x58
 8004eea:	bd70      	pop	{r4, r5, r6, pc}

08004eec <__smakebuf_r>:
 8004eec:	898b      	ldrh	r3, [r1, #12]
 8004eee:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8004ef0:	079d      	lsls	r5, r3, #30
 8004ef2:	4606      	mov	r6, r0
 8004ef4:	460c      	mov	r4, r1
 8004ef6:	d507      	bpl.n	8004f08 <__smakebuf_r+0x1c>
 8004ef8:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8004efc:	6023      	str	r3, [r4, #0]
 8004efe:	6123      	str	r3, [r4, #16]
 8004f00:	2301      	movs	r3, #1
 8004f02:	6163      	str	r3, [r4, #20]
 8004f04:	b002      	add	sp, #8
 8004f06:	bd70      	pop	{r4, r5, r6, pc}
 8004f08:	ab01      	add	r3, sp, #4
 8004f0a:	466a      	mov	r2, sp
 8004f0c:	f7ff ffca 	bl	8004ea4 <__swhatbuf_r>
 8004f10:	9900      	ldr	r1, [sp, #0]
 8004f12:	4605      	mov	r5, r0
 8004f14:	4630      	mov	r0, r6
 8004f16:	f7ff faab 	bl	8004470 <_malloc_r>
 8004f1a:	b948      	cbnz	r0, 8004f30 <__smakebuf_r+0x44>
 8004f1c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004f20:	059a      	lsls	r2, r3, #22
 8004f22:	d4ef      	bmi.n	8004f04 <__smakebuf_r+0x18>
 8004f24:	f023 0303 	bic.w	r3, r3, #3
 8004f28:	f043 0302 	orr.w	r3, r3, #2
 8004f2c:	81a3      	strh	r3, [r4, #12]
 8004f2e:	e7e3      	b.n	8004ef8 <__smakebuf_r+0xc>
 8004f30:	4b0d      	ldr	r3, [pc, #52]	; (8004f68 <__smakebuf_r+0x7c>)
 8004f32:	62b3      	str	r3, [r6, #40]	; 0x28
 8004f34:	89a3      	ldrh	r3, [r4, #12]
 8004f36:	6020      	str	r0, [r4, #0]
 8004f38:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004f3c:	81a3      	strh	r3, [r4, #12]
 8004f3e:	9b00      	ldr	r3, [sp, #0]
 8004f40:	6163      	str	r3, [r4, #20]
 8004f42:	9b01      	ldr	r3, [sp, #4]
 8004f44:	6120      	str	r0, [r4, #16]
 8004f46:	b15b      	cbz	r3, 8004f60 <__smakebuf_r+0x74>
 8004f48:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004f4c:	4630      	mov	r0, r6
 8004f4e:	f000 f881 	bl	8005054 <_isatty_r>
 8004f52:	b128      	cbz	r0, 8004f60 <__smakebuf_r+0x74>
 8004f54:	89a3      	ldrh	r3, [r4, #12]
 8004f56:	f023 0303 	bic.w	r3, r3, #3
 8004f5a:	f043 0301 	orr.w	r3, r3, #1
 8004f5e:	81a3      	strh	r3, [r4, #12]
 8004f60:	89a3      	ldrh	r3, [r4, #12]
 8004f62:	431d      	orrs	r5, r3
 8004f64:	81a5      	strh	r5, [r4, #12]
 8004f66:	e7cd      	b.n	8004f04 <__smakebuf_r+0x18>
 8004f68:	08004325 	.word	0x08004325

08004f6c <__malloc_lock>:
 8004f6c:	4770      	bx	lr

08004f6e <__malloc_unlock>:
 8004f6e:	4770      	bx	lr

08004f70 <_free_r>:
 8004f70:	b538      	push	{r3, r4, r5, lr}
 8004f72:	4605      	mov	r5, r0
 8004f74:	2900      	cmp	r1, #0
 8004f76:	d045      	beq.n	8005004 <_free_r+0x94>
 8004f78:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004f7c:	1f0c      	subs	r4, r1, #4
 8004f7e:	2b00      	cmp	r3, #0
 8004f80:	bfb8      	it	lt
 8004f82:	18e4      	addlt	r4, r4, r3
 8004f84:	f7ff fff2 	bl	8004f6c <__malloc_lock>
 8004f88:	4a1f      	ldr	r2, [pc, #124]	; (8005008 <_free_r+0x98>)
 8004f8a:	6813      	ldr	r3, [r2, #0]
 8004f8c:	4610      	mov	r0, r2
 8004f8e:	b933      	cbnz	r3, 8004f9e <_free_r+0x2e>
 8004f90:	6063      	str	r3, [r4, #4]
 8004f92:	6014      	str	r4, [r2, #0]
 8004f94:	4628      	mov	r0, r5
 8004f96:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004f9a:	f7ff bfe8 	b.w	8004f6e <__malloc_unlock>
 8004f9e:	42a3      	cmp	r3, r4
 8004fa0:	d90c      	bls.n	8004fbc <_free_r+0x4c>
 8004fa2:	6821      	ldr	r1, [r4, #0]
 8004fa4:	1862      	adds	r2, r4, r1
 8004fa6:	4293      	cmp	r3, r2
 8004fa8:	bf04      	itt	eq
 8004faa:	681a      	ldreq	r2, [r3, #0]
 8004fac:	685b      	ldreq	r3, [r3, #4]
 8004fae:	6063      	str	r3, [r4, #4]
 8004fb0:	bf04      	itt	eq
 8004fb2:	1852      	addeq	r2, r2, r1
 8004fb4:	6022      	streq	r2, [r4, #0]
 8004fb6:	6004      	str	r4, [r0, #0]
 8004fb8:	e7ec      	b.n	8004f94 <_free_r+0x24>
 8004fba:	4613      	mov	r3, r2
 8004fbc:	685a      	ldr	r2, [r3, #4]
 8004fbe:	b10a      	cbz	r2, 8004fc4 <_free_r+0x54>
 8004fc0:	42a2      	cmp	r2, r4
 8004fc2:	d9fa      	bls.n	8004fba <_free_r+0x4a>
 8004fc4:	6819      	ldr	r1, [r3, #0]
 8004fc6:	1858      	adds	r0, r3, r1
 8004fc8:	42a0      	cmp	r0, r4
 8004fca:	d10b      	bne.n	8004fe4 <_free_r+0x74>
 8004fcc:	6820      	ldr	r0, [r4, #0]
 8004fce:	4401      	add	r1, r0
 8004fd0:	1858      	adds	r0, r3, r1
 8004fd2:	4282      	cmp	r2, r0
 8004fd4:	6019      	str	r1, [r3, #0]
 8004fd6:	d1dd      	bne.n	8004f94 <_free_r+0x24>
 8004fd8:	6810      	ldr	r0, [r2, #0]
 8004fda:	6852      	ldr	r2, [r2, #4]
 8004fdc:	605a      	str	r2, [r3, #4]
 8004fde:	4401      	add	r1, r0
 8004fe0:	6019      	str	r1, [r3, #0]
 8004fe2:	e7d7      	b.n	8004f94 <_free_r+0x24>
 8004fe4:	d902      	bls.n	8004fec <_free_r+0x7c>
 8004fe6:	230c      	movs	r3, #12
 8004fe8:	602b      	str	r3, [r5, #0]
 8004fea:	e7d3      	b.n	8004f94 <_free_r+0x24>
 8004fec:	6820      	ldr	r0, [r4, #0]
 8004fee:	1821      	adds	r1, r4, r0
 8004ff0:	428a      	cmp	r2, r1
 8004ff2:	bf04      	itt	eq
 8004ff4:	6811      	ldreq	r1, [r2, #0]
 8004ff6:	6852      	ldreq	r2, [r2, #4]
 8004ff8:	6062      	str	r2, [r4, #4]
 8004ffa:	bf04      	itt	eq
 8004ffc:	1809      	addeq	r1, r1, r0
 8004ffe:	6021      	streq	r1, [r4, #0]
 8005000:	605c      	str	r4, [r3, #4]
 8005002:	e7c7      	b.n	8004f94 <_free_r+0x24>
 8005004:	bd38      	pop	{r3, r4, r5, pc}
 8005006:	bf00      	nop
 8005008:	200000a0 	.word	0x200000a0

0800500c <_read_r>:
 800500c:	b538      	push	{r3, r4, r5, lr}
 800500e:	4c07      	ldr	r4, [pc, #28]	; (800502c <_read_r+0x20>)
 8005010:	4605      	mov	r5, r0
 8005012:	4608      	mov	r0, r1
 8005014:	4611      	mov	r1, r2
 8005016:	2200      	movs	r2, #0
 8005018:	6022      	str	r2, [r4, #0]
 800501a:	461a      	mov	r2, r3
 800501c:	f7fc fa6a 	bl	80014f4 <_read>
 8005020:	1c43      	adds	r3, r0, #1
 8005022:	d102      	bne.n	800502a <_read_r+0x1e>
 8005024:	6823      	ldr	r3, [r4, #0]
 8005026:	b103      	cbz	r3, 800502a <_read_r+0x1e>
 8005028:	602b      	str	r3, [r5, #0]
 800502a:	bd38      	pop	{r3, r4, r5, pc}
 800502c:	200001b0 	.word	0x200001b0

08005030 <_fstat_r>:
 8005030:	b538      	push	{r3, r4, r5, lr}
 8005032:	4c07      	ldr	r4, [pc, #28]	; (8005050 <_fstat_r+0x20>)
 8005034:	2300      	movs	r3, #0
 8005036:	4605      	mov	r5, r0
 8005038:	4608      	mov	r0, r1
 800503a:	4611      	mov	r1, r2
 800503c:	6023      	str	r3, [r4, #0]
 800503e:	f7fc fa9e 	bl	800157e <_fstat>
 8005042:	1c43      	adds	r3, r0, #1
 8005044:	d102      	bne.n	800504c <_fstat_r+0x1c>
 8005046:	6823      	ldr	r3, [r4, #0]
 8005048:	b103      	cbz	r3, 800504c <_fstat_r+0x1c>
 800504a:	602b      	str	r3, [r5, #0]
 800504c:	bd38      	pop	{r3, r4, r5, pc}
 800504e:	bf00      	nop
 8005050:	200001b0 	.word	0x200001b0

08005054 <_isatty_r>:
 8005054:	b538      	push	{r3, r4, r5, lr}
 8005056:	4c06      	ldr	r4, [pc, #24]	; (8005070 <_isatty_r+0x1c>)
 8005058:	2300      	movs	r3, #0
 800505a:	4605      	mov	r5, r0
 800505c:	4608      	mov	r0, r1
 800505e:	6023      	str	r3, [r4, #0]
 8005060:	f7fc fa9d 	bl	800159e <_isatty>
 8005064:	1c43      	adds	r3, r0, #1
 8005066:	d102      	bne.n	800506e <_isatty_r+0x1a>
 8005068:	6823      	ldr	r3, [r4, #0]
 800506a:	b103      	cbz	r3, 800506e <_isatty_r+0x1a>
 800506c:	602b      	str	r3, [r5, #0]
 800506e:	bd38      	pop	{r3, r4, r5, pc}
 8005070:	200001b0 	.word	0x200001b0

08005074 <_init>:
 8005074:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005076:	bf00      	nop
 8005078:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800507a:	bc08      	pop	{r3}
 800507c:	469e      	mov	lr, r3
 800507e:	4770      	bx	lr

08005080 <_fini>:
 8005080:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005082:	bf00      	nop
 8005084:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005086:	bc08      	pop	{r3}
 8005088:	469e      	mov	lr, r3
 800508a:	4770      	bx	lr

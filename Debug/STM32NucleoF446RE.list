
STM32NucleoF446RE.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004f94  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000c4  08005164  08005164  00015164  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005228  08005228  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  08005228  08005228  00015228  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005230  08005230  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005230  08005230  00015230  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005234  08005234  00015234  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08005238  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001d4  20000070  080052a8  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000244  080052a8  00020244  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000f002  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000022cc  00000000  00000000  0002f0a2  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000e80  00000000  00000000  00031370  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000d68  00000000  00000000  000321f0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00023649  00000000  00000000  00032f58  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000b084  00000000  00000000  000565a1  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000d5215  00000000  00000000  00061625  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0013683a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004380  00000000  00000000  001368b8  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000070 	.word	0x20000070
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0800514c 	.word	0x0800514c

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000074 	.word	0x20000074
 800020c:	0800514c 	.word	0x0800514c

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_uldivmod>:
 80002b0:	b953      	cbnz	r3, 80002c8 <__aeabi_uldivmod+0x18>
 80002b2:	b94a      	cbnz	r2, 80002c8 <__aeabi_uldivmod+0x18>
 80002b4:	2900      	cmp	r1, #0
 80002b6:	bf08      	it	eq
 80002b8:	2800      	cmpeq	r0, #0
 80002ba:	bf1c      	itt	ne
 80002bc:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80002c0:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80002c4:	f000 b972 	b.w	80005ac <__aeabi_idiv0>
 80002c8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002cc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002d0:	f000 f806 	bl	80002e0 <__udivmoddi4>
 80002d4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002dc:	b004      	add	sp, #16
 80002de:	4770      	bx	lr

080002e0 <__udivmoddi4>:
 80002e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002e4:	9e08      	ldr	r6, [sp, #32]
 80002e6:	4604      	mov	r4, r0
 80002e8:	4688      	mov	r8, r1
 80002ea:	2b00      	cmp	r3, #0
 80002ec:	d14b      	bne.n	8000386 <__udivmoddi4+0xa6>
 80002ee:	428a      	cmp	r2, r1
 80002f0:	4615      	mov	r5, r2
 80002f2:	d967      	bls.n	80003c4 <__udivmoddi4+0xe4>
 80002f4:	fab2 f282 	clz	r2, r2
 80002f8:	b14a      	cbz	r2, 800030e <__udivmoddi4+0x2e>
 80002fa:	f1c2 0720 	rsb	r7, r2, #32
 80002fe:	fa01 f302 	lsl.w	r3, r1, r2
 8000302:	fa20 f707 	lsr.w	r7, r0, r7
 8000306:	4095      	lsls	r5, r2
 8000308:	ea47 0803 	orr.w	r8, r7, r3
 800030c:	4094      	lsls	r4, r2
 800030e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000312:	0c23      	lsrs	r3, r4, #16
 8000314:	fbb8 f7fe 	udiv	r7, r8, lr
 8000318:	fa1f fc85 	uxth.w	ip, r5
 800031c:	fb0e 8817 	mls	r8, lr, r7, r8
 8000320:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000324:	fb07 f10c 	mul.w	r1, r7, ip
 8000328:	4299      	cmp	r1, r3
 800032a:	d909      	bls.n	8000340 <__udivmoddi4+0x60>
 800032c:	18eb      	adds	r3, r5, r3
 800032e:	f107 30ff 	add.w	r0, r7, #4294967295	; 0xffffffff
 8000332:	f080 811b 	bcs.w	800056c <__udivmoddi4+0x28c>
 8000336:	4299      	cmp	r1, r3
 8000338:	f240 8118 	bls.w	800056c <__udivmoddi4+0x28c>
 800033c:	3f02      	subs	r7, #2
 800033e:	442b      	add	r3, r5
 8000340:	1a5b      	subs	r3, r3, r1
 8000342:	b2a4      	uxth	r4, r4
 8000344:	fbb3 f0fe 	udiv	r0, r3, lr
 8000348:	fb0e 3310 	mls	r3, lr, r0, r3
 800034c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000350:	fb00 fc0c 	mul.w	ip, r0, ip
 8000354:	45a4      	cmp	ip, r4
 8000356:	d909      	bls.n	800036c <__udivmoddi4+0x8c>
 8000358:	192c      	adds	r4, r5, r4
 800035a:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800035e:	f080 8107 	bcs.w	8000570 <__udivmoddi4+0x290>
 8000362:	45a4      	cmp	ip, r4
 8000364:	f240 8104 	bls.w	8000570 <__udivmoddi4+0x290>
 8000368:	3802      	subs	r0, #2
 800036a:	442c      	add	r4, r5
 800036c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000370:	eba4 040c 	sub.w	r4, r4, ip
 8000374:	2700      	movs	r7, #0
 8000376:	b11e      	cbz	r6, 8000380 <__udivmoddi4+0xa0>
 8000378:	40d4      	lsrs	r4, r2
 800037a:	2300      	movs	r3, #0
 800037c:	e9c6 4300 	strd	r4, r3, [r6]
 8000380:	4639      	mov	r1, r7
 8000382:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000386:	428b      	cmp	r3, r1
 8000388:	d909      	bls.n	800039e <__udivmoddi4+0xbe>
 800038a:	2e00      	cmp	r6, #0
 800038c:	f000 80eb 	beq.w	8000566 <__udivmoddi4+0x286>
 8000390:	2700      	movs	r7, #0
 8000392:	e9c6 0100 	strd	r0, r1, [r6]
 8000396:	4638      	mov	r0, r7
 8000398:	4639      	mov	r1, r7
 800039a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800039e:	fab3 f783 	clz	r7, r3
 80003a2:	2f00      	cmp	r7, #0
 80003a4:	d147      	bne.n	8000436 <__udivmoddi4+0x156>
 80003a6:	428b      	cmp	r3, r1
 80003a8:	d302      	bcc.n	80003b0 <__udivmoddi4+0xd0>
 80003aa:	4282      	cmp	r2, r0
 80003ac:	f200 80fa 	bhi.w	80005a4 <__udivmoddi4+0x2c4>
 80003b0:	1a84      	subs	r4, r0, r2
 80003b2:	eb61 0303 	sbc.w	r3, r1, r3
 80003b6:	2001      	movs	r0, #1
 80003b8:	4698      	mov	r8, r3
 80003ba:	2e00      	cmp	r6, #0
 80003bc:	d0e0      	beq.n	8000380 <__udivmoddi4+0xa0>
 80003be:	e9c6 4800 	strd	r4, r8, [r6]
 80003c2:	e7dd      	b.n	8000380 <__udivmoddi4+0xa0>
 80003c4:	b902      	cbnz	r2, 80003c8 <__udivmoddi4+0xe8>
 80003c6:	deff      	udf	#255	; 0xff
 80003c8:	fab2 f282 	clz	r2, r2
 80003cc:	2a00      	cmp	r2, #0
 80003ce:	f040 808f 	bne.w	80004f0 <__udivmoddi4+0x210>
 80003d2:	1b49      	subs	r1, r1, r5
 80003d4:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80003d8:	fa1f f885 	uxth.w	r8, r5
 80003dc:	2701      	movs	r7, #1
 80003de:	fbb1 fcfe 	udiv	ip, r1, lr
 80003e2:	0c23      	lsrs	r3, r4, #16
 80003e4:	fb0e 111c 	mls	r1, lr, ip, r1
 80003e8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003ec:	fb08 f10c 	mul.w	r1, r8, ip
 80003f0:	4299      	cmp	r1, r3
 80003f2:	d907      	bls.n	8000404 <__udivmoddi4+0x124>
 80003f4:	18eb      	adds	r3, r5, r3
 80003f6:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 80003fa:	d202      	bcs.n	8000402 <__udivmoddi4+0x122>
 80003fc:	4299      	cmp	r1, r3
 80003fe:	f200 80cd 	bhi.w	800059c <__udivmoddi4+0x2bc>
 8000402:	4684      	mov	ip, r0
 8000404:	1a59      	subs	r1, r3, r1
 8000406:	b2a3      	uxth	r3, r4
 8000408:	fbb1 f0fe 	udiv	r0, r1, lr
 800040c:	fb0e 1410 	mls	r4, lr, r0, r1
 8000410:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000414:	fb08 f800 	mul.w	r8, r8, r0
 8000418:	45a0      	cmp	r8, r4
 800041a:	d907      	bls.n	800042c <__udivmoddi4+0x14c>
 800041c:	192c      	adds	r4, r5, r4
 800041e:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000422:	d202      	bcs.n	800042a <__udivmoddi4+0x14a>
 8000424:	45a0      	cmp	r8, r4
 8000426:	f200 80b6 	bhi.w	8000596 <__udivmoddi4+0x2b6>
 800042a:	4618      	mov	r0, r3
 800042c:	eba4 0408 	sub.w	r4, r4, r8
 8000430:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000434:	e79f      	b.n	8000376 <__udivmoddi4+0x96>
 8000436:	f1c7 0c20 	rsb	ip, r7, #32
 800043a:	40bb      	lsls	r3, r7
 800043c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000440:	ea4e 0e03 	orr.w	lr, lr, r3
 8000444:	fa01 f407 	lsl.w	r4, r1, r7
 8000448:	fa20 f50c 	lsr.w	r5, r0, ip
 800044c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000450:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000454:	4325      	orrs	r5, r4
 8000456:	fbb3 f9f8 	udiv	r9, r3, r8
 800045a:	0c2c      	lsrs	r4, r5, #16
 800045c:	fb08 3319 	mls	r3, r8, r9, r3
 8000460:	fa1f fa8e 	uxth.w	sl, lr
 8000464:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000468:	fb09 f40a 	mul.w	r4, r9, sl
 800046c:	429c      	cmp	r4, r3
 800046e:	fa02 f207 	lsl.w	r2, r2, r7
 8000472:	fa00 f107 	lsl.w	r1, r0, r7
 8000476:	d90b      	bls.n	8000490 <__udivmoddi4+0x1b0>
 8000478:	eb1e 0303 	adds.w	r3, lr, r3
 800047c:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000480:	f080 8087 	bcs.w	8000592 <__udivmoddi4+0x2b2>
 8000484:	429c      	cmp	r4, r3
 8000486:	f240 8084 	bls.w	8000592 <__udivmoddi4+0x2b2>
 800048a:	f1a9 0902 	sub.w	r9, r9, #2
 800048e:	4473      	add	r3, lr
 8000490:	1b1b      	subs	r3, r3, r4
 8000492:	b2ad      	uxth	r5, r5
 8000494:	fbb3 f0f8 	udiv	r0, r3, r8
 8000498:	fb08 3310 	mls	r3, r8, r0, r3
 800049c:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80004a0:	fb00 fa0a 	mul.w	sl, r0, sl
 80004a4:	45a2      	cmp	sl, r4
 80004a6:	d908      	bls.n	80004ba <__udivmoddi4+0x1da>
 80004a8:	eb1e 0404 	adds.w	r4, lr, r4
 80004ac:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80004b0:	d26b      	bcs.n	800058a <__udivmoddi4+0x2aa>
 80004b2:	45a2      	cmp	sl, r4
 80004b4:	d969      	bls.n	800058a <__udivmoddi4+0x2aa>
 80004b6:	3802      	subs	r0, #2
 80004b8:	4474      	add	r4, lr
 80004ba:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004be:	fba0 8902 	umull	r8, r9, r0, r2
 80004c2:	eba4 040a 	sub.w	r4, r4, sl
 80004c6:	454c      	cmp	r4, r9
 80004c8:	46c2      	mov	sl, r8
 80004ca:	464b      	mov	r3, r9
 80004cc:	d354      	bcc.n	8000578 <__udivmoddi4+0x298>
 80004ce:	d051      	beq.n	8000574 <__udivmoddi4+0x294>
 80004d0:	2e00      	cmp	r6, #0
 80004d2:	d069      	beq.n	80005a8 <__udivmoddi4+0x2c8>
 80004d4:	ebb1 050a 	subs.w	r5, r1, sl
 80004d8:	eb64 0403 	sbc.w	r4, r4, r3
 80004dc:	fa04 fc0c 	lsl.w	ip, r4, ip
 80004e0:	40fd      	lsrs	r5, r7
 80004e2:	40fc      	lsrs	r4, r7
 80004e4:	ea4c 0505 	orr.w	r5, ip, r5
 80004e8:	e9c6 5400 	strd	r5, r4, [r6]
 80004ec:	2700      	movs	r7, #0
 80004ee:	e747      	b.n	8000380 <__udivmoddi4+0xa0>
 80004f0:	f1c2 0320 	rsb	r3, r2, #32
 80004f4:	fa20 f703 	lsr.w	r7, r0, r3
 80004f8:	4095      	lsls	r5, r2
 80004fa:	fa01 f002 	lsl.w	r0, r1, r2
 80004fe:	fa21 f303 	lsr.w	r3, r1, r3
 8000502:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000506:	4338      	orrs	r0, r7
 8000508:	0c01      	lsrs	r1, r0, #16
 800050a:	fbb3 f7fe 	udiv	r7, r3, lr
 800050e:	fa1f f885 	uxth.w	r8, r5
 8000512:	fb0e 3317 	mls	r3, lr, r7, r3
 8000516:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800051a:	fb07 f308 	mul.w	r3, r7, r8
 800051e:	428b      	cmp	r3, r1
 8000520:	fa04 f402 	lsl.w	r4, r4, r2
 8000524:	d907      	bls.n	8000536 <__udivmoddi4+0x256>
 8000526:	1869      	adds	r1, r5, r1
 8000528:	f107 3cff 	add.w	ip, r7, #4294967295	; 0xffffffff
 800052c:	d22f      	bcs.n	800058e <__udivmoddi4+0x2ae>
 800052e:	428b      	cmp	r3, r1
 8000530:	d92d      	bls.n	800058e <__udivmoddi4+0x2ae>
 8000532:	3f02      	subs	r7, #2
 8000534:	4429      	add	r1, r5
 8000536:	1acb      	subs	r3, r1, r3
 8000538:	b281      	uxth	r1, r0
 800053a:	fbb3 f0fe 	udiv	r0, r3, lr
 800053e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000542:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000546:	fb00 f308 	mul.w	r3, r0, r8
 800054a:	428b      	cmp	r3, r1
 800054c:	d907      	bls.n	800055e <__udivmoddi4+0x27e>
 800054e:	1869      	adds	r1, r5, r1
 8000550:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 8000554:	d217      	bcs.n	8000586 <__udivmoddi4+0x2a6>
 8000556:	428b      	cmp	r3, r1
 8000558:	d915      	bls.n	8000586 <__udivmoddi4+0x2a6>
 800055a:	3802      	subs	r0, #2
 800055c:	4429      	add	r1, r5
 800055e:	1ac9      	subs	r1, r1, r3
 8000560:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000564:	e73b      	b.n	80003de <__udivmoddi4+0xfe>
 8000566:	4637      	mov	r7, r6
 8000568:	4630      	mov	r0, r6
 800056a:	e709      	b.n	8000380 <__udivmoddi4+0xa0>
 800056c:	4607      	mov	r7, r0
 800056e:	e6e7      	b.n	8000340 <__udivmoddi4+0x60>
 8000570:	4618      	mov	r0, r3
 8000572:	e6fb      	b.n	800036c <__udivmoddi4+0x8c>
 8000574:	4541      	cmp	r1, r8
 8000576:	d2ab      	bcs.n	80004d0 <__udivmoddi4+0x1f0>
 8000578:	ebb8 0a02 	subs.w	sl, r8, r2
 800057c:	eb69 020e 	sbc.w	r2, r9, lr
 8000580:	3801      	subs	r0, #1
 8000582:	4613      	mov	r3, r2
 8000584:	e7a4      	b.n	80004d0 <__udivmoddi4+0x1f0>
 8000586:	4660      	mov	r0, ip
 8000588:	e7e9      	b.n	800055e <__udivmoddi4+0x27e>
 800058a:	4618      	mov	r0, r3
 800058c:	e795      	b.n	80004ba <__udivmoddi4+0x1da>
 800058e:	4667      	mov	r7, ip
 8000590:	e7d1      	b.n	8000536 <__udivmoddi4+0x256>
 8000592:	4681      	mov	r9, r0
 8000594:	e77c      	b.n	8000490 <__udivmoddi4+0x1b0>
 8000596:	3802      	subs	r0, #2
 8000598:	442c      	add	r4, r5
 800059a:	e747      	b.n	800042c <__udivmoddi4+0x14c>
 800059c:	f1ac 0c02 	sub.w	ip, ip, #2
 80005a0:	442b      	add	r3, r5
 80005a2:	e72f      	b.n	8000404 <__udivmoddi4+0x124>
 80005a4:	4638      	mov	r0, r7
 80005a6:	e708      	b.n	80003ba <__udivmoddi4+0xda>
 80005a8:	4637      	mov	r7, r6
 80005aa:	e6e9      	b.n	8000380 <__udivmoddi4+0xa0>

080005ac <__aeabi_idiv0>:
 80005ac:	4770      	bx	lr
 80005ae:	bf00      	nop

080005b0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005b0:	b580      	push	{r7, lr}
 80005b2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005b4:	f000 fcc6 	bl	8000f44 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005b8:	f000 f836 	bl	8000628 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005bc:	f000 f9b0 	bl	8000920 <MX_GPIO_Init>
  MX_DMA_Init();
 80005c0:	f000 f978 	bl	80008b4 <MX_DMA_Init>
  MX_USART2_UART_Init();
 80005c4:	f000 f94c 	bl	8000860 <MX_USART2_UART_Init>
  MX_ADC1_Init();
 80005c8:	f000 f89c 	bl	8000704 <MX_ADC1_Init>
  MX_TIM2_Init();
 80005cc:	f000 f8fa 	bl	80007c4 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start(&htim2);
 80005d0:	480e      	ldr	r0, [pc, #56]	; (800060c <main+0x5c>)
 80005d2:	f002 fe14 	bl	80031fe <HAL_TIM_Base_Start>
  HAL_ADC_Start_DMA(&hadc1,AdcValue,2);
 80005d6:	2202      	movs	r2, #2
 80005d8:	490d      	ldr	r1, [pc, #52]	; (8000610 <main+0x60>)
 80005da:	480e      	ldr	r0, [pc, #56]	; (8000614 <main+0x64>)
 80005dc:	f000 fea8 	bl	8001330 <HAL_ADC_Start_DMA>
  HAL_UART_Receive_DMA(&huart2,RxBuffer,10);
 80005e0:	220a      	movs	r2, #10
 80005e2:	490d      	ldr	r1, [pc, #52]	; (8000618 <main+0x68>)
 80005e4:	480d      	ldr	r0, [pc, #52]	; (800061c <main+0x6c>)
 80005e6:	f003 f981 	bl	80038ec <HAL_UART_Receive_DMA>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  if(HAL_GPIO_ReadPin(GPIOC,GPIO_PIN_13) == GPIO_PIN_RESET)
 80005ea:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80005ee:	480c      	ldr	r0, [pc, #48]	; (8000620 <main+0x70>)
 80005f0:	f002 f87a 	bl	80026e8 <HAL_GPIO_ReadPin>
 80005f4:	4603      	mov	r3, r0
 80005f6:	2b00      	cmp	r3, #0
 80005f8:	d1f7      	bne.n	80005ea <main+0x3a>
	  	  {
		  	  printf("%lu\t%lu\n\r",AdcValue[0],AdcValue[1]);
 80005fa:	4b05      	ldr	r3, [pc, #20]	; (8000610 <main+0x60>)
 80005fc:	6819      	ldr	r1, [r3, #0]
 80005fe:	4b04      	ldr	r3, [pc, #16]	; (8000610 <main+0x60>)
 8000600:	685b      	ldr	r3, [r3, #4]
 8000602:	461a      	mov	r2, r3
 8000604:	4807      	ldr	r0, [pc, #28]	; (8000624 <main+0x74>)
 8000606:	f003 febd 	bl	8004384 <iprintf>
	  if(HAL_GPIO_ReadPin(GPIOC,GPIO_PIN_13) == GPIO_PIN_RESET)
 800060a:	e7ee      	b.n	80005ea <main+0x3a>
 800060c:	200001b4 	.word	0x200001b4
 8000610:	20000234 	.word	0x20000234
 8000614:	200000fc 	.word	0x200000fc
 8000618:	200001a8 	.word	0x200001a8
 800061c:	200001f4 	.word	0x200001f4
 8000620:	40020800 	.word	0x40020800
 8000624:	08005164 	.word	0x08005164

08000628 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000628:	b580      	push	{r7, lr}
 800062a:	b094      	sub	sp, #80	; 0x50
 800062c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800062e:	f107 031c 	add.w	r3, r7, #28
 8000632:	2234      	movs	r2, #52	; 0x34
 8000634:	2100      	movs	r1, #0
 8000636:	4618      	mov	r0, r3
 8000638:	f003 fe9c 	bl	8004374 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800063c:	f107 0308 	add.w	r3, r7, #8
 8000640:	2200      	movs	r2, #0
 8000642:	601a      	str	r2, [r3, #0]
 8000644:	605a      	str	r2, [r3, #4]
 8000646:	609a      	str	r2, [r3, #8]
 8000648:	60da      	str	r2, [r3, #12]
 800064a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800064c:	2300      	movs	r3, #0
 800064e:	607b      	str	r3, [r7, #4]
 8000650:	4b2a      	ldr	r3, [pc, #168]	; (80006fc <SystemClock_Config+0xd4>)
 8000652:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000654:	4a29      	ldr	r2, [pc, #164]	; (80006fc <SystemClock_Config+0xd4>)
 8000656:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800065a:	6413      	str	r3, [r2, #64]	; 0x40
 800065c:	4b27      	ldr	r3, [pc, #156]	; (80006fc <SystemClock_Config+0xd4>)
 800065e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000660:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000664:	607b      	str	r3, [r7, #4]
 8000666:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000668:	2300      	movs	r3, #0
 800066a:	603b      	str	r3, [r7, #0]
 800066c:	4b24      	ldr	r3, [pc, #144]	; (8000700 <SystemClock_Config+0xd8>)
 800066e:	681b      	ldr	r3, [r3, #0]
 8000670:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000674:	4a22      	ldr	r2, [pc, #136]	; (8000700 <SystemClock_Config+0xd8>)
 8000676:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800067a:	6013      	str	r3, [r2, #0]
 800067c:	4b20      	ldr	r3, [pc, #128]	; (8000700 <SystemClock_Config+0xd8>)
 800067e:	681b      	ldr	r3, [r3, #0]
 8000680:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000684:	603b      	str	r3, [r7, #0]
 8000686:	683b      	ldr	r3, [r7, #0]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000688:	2302      	movs	r3, #2
 800068a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800068c:	2301      	movs	r3, #1
 800068e:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000690:	2310      	movs	r3, #16
 8000692:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000694:	2302      	movs	r3, #2
 8000696:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000698:	2300      	movs	r3, #0
 800069a:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 16;
 800069c:	2310      	movs	r3, #16
 800069e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 336;
 80006a0:	f44f 73a8 	mov.w	r3, #336	; 0x150
 80006a4:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 80006a6:	2304      	movs	r3, #4
 80006a8:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80006aa:	2302      	movs	r3, #2
 80006ac:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 80006ae:	2302      	movs	r3, #2
 80006b0:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006b2:	f107 031c 	add.w	r3, r7, #28
 80006b6:	4618      	mov	r0, r3
 80006b8:	f002 fb1c 	bl	8002cf4 <HAL_RCC_OscConfig>
 80006bc:	4603      	mov	r3, r0
 80006be:	2b00      	cmp	r3, #0
 80006c0:	d001      	beq.n	80006c6 <SystemClock_Config+0x9e>
  {
    Error_Handler();
 80006c2:	f000 f9cf 	bl	8000a64 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006c6:	230f      	movs	r3, #15
 80006c8:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006ca:	2302      	movs	r3, #2
 80006cc:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006ce:	2300      	movs	r3, #0
 80006d0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80006d2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80006d6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80006d8:	2300      	movs	r3, #0
 80006da:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80006dc:	f107 0308 	add.w	r3, r7, #8
 80006e0:	2102      	movs	r1, #2
 80006e2:	4618      	mov	r0, r3
 80006e4:	f002 f84c 	bl	8002780 <HAL_RCC_ClockConfig>
 80006e8:	4603      	mov	r3, r0
 80006ea:	2b00      	cmp	r3, #0
 80006ec:	d001      	beq.n	80006f2 <SystemClock_Config+0xca>
  {
    Error_Handler();
 80006ee:	f000 f9b9 	bl	8000a64 <Error_Handler>
  }
}
 80006f2:	bf00      	nop
 80006f4:	3750      	adds	r7, #80	; 0x50
 80006f6:	46bd      	mov	sp, r7
 80006f8:	bd80      	pop	{r7, pc}
 80006fa:	bf00      	nop
 80006fc:	40023800 	.word	0x40023800
 8000700:	40007000 	.word	0x40007000

08000704 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000704:	b580      	push	{r7, lr}
 8000706:	b084      	sub	sp, #16
 8000708:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800070a:	463b      	mov	r3, r7
 800070c:	2200      	movs	r2, #0
 800070e:	601a      	str	r2, [r3, #0]
 8000710:	605a      	str	r2, [r3, #4]
 8000712:	609a      	str	r2, [r3, #8]
 8000714:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion) 
  */
  hadc1.Instance = ADC1;
 8000716:	4b29      	ldr	r3, [pc, #164]	; (80007bc <MX_ADC1_Init+0xb8>)
 8000718:	4a29      	ldr	r2, [pc, #164]	; (80007c0 <MX_ADC1_Init+0xbc>)
 800071a:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 800071c:	4b27      	ldr	r3, [pc, #156]	; (80007bc <MX_ADC1_Init+0xb8>)
 800071e:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000722:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000724:	4b25      	ldr	r3, [pc, #148]	; (80007bc <MX_ADC1_Init+0xb8>)
 8000726:	2200      	movs	r2, #0
 8000728:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 800072a:	4b24      	ldr	r3, [pc, #144]	; (80007bc <MX_ADC1_Init+0xb8>)
 800072c:	2201      	movs	r2, #1
 800072e:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000730:	4b22      	ldr	r3, [pc, #136]	; (80007bc <MX_ADC1_Init+0xb8>)
 8000732:	2200      	movs	r2, #0
 8000734:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000736:	4b21      	ldr	r3, [pc, #132]	; (80007bc <MX_ADC1_Init+0xb8>)
 8000738:	2200      	movs	r2, #0
 800073a:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 800073e:	4b1f      	ldr	r3, [pc, #124]	; (80007bc <MX_ADC1_Init+0xb8>)
 8000740:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000744:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T2_TRGO;
 8000746:	4b1d      	ldr	r3, [pc, #116]	; (80007bc <MX_ADC1_Init+0xb8>)
 8000748:	f04f 62c0 	mov.w	r2, #100663296	; 0x6000000
 800074c:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800074e:	4b1b      	ldr	r3, [pc, #108]	; (80007bc <MX_ADC1_Init+0xb8>)
 8000750:	2200      	movs	r2, #0
 8000752:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 2;
 8000754:	4b19      	ldr	r3, [pc, #100]	; (80007bc <MX_ADC1_Init+0xb8>)
 8000756:	2202      	movs	r2, #2
 8000758:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 800075a:	4b18      	ldr	r3, [pc, #96]	; (80007bc <MX_ADC1_Init+0xb8>)
 800075c:	2201      	movs	r2, #1
 800075e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000762:	4b16      	ldr	r3, [pc, #88]	; (80007bc <MX_ADC1_Init+0xb8>)
 8000764:	2201      	movs	r2, #1
 8000766:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000768:	4814      	ldr	r0, [pc, #80]	; (80007bc <MX_ADC1_Init+0xb8>)
 800076a:	f000 fc5d 	bl	8001028 <HAL_ADC_Init>
 800076e:	4603      	mov	r3, r0
 8000770:	2b00      	cmp	r3, #0
 8000772:	d001      	beq.n	8000778 <MX_ADC1_Init+0x74>
  {
    Error_Handler();
 8000774:	f000 f976 	bl	8000a64 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8000778:	2300      	movs	r3, #0
 800077a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 800077c:	2301      	movs	r3, #1
 800077e:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_15CYCLES;
 8000780:	2301      	movs	r3, #1
 8000782:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000784:	463b      	mov	r3, r7
 8000786:	4619      	mov	r1, r3
 8000788:	480c      	ldr	r0, [pc, #48]	; (80007bc <MX_ADC1_Init+0xb8>)
 800078a:	f000 fee1 	bl	8001550 <HAL_ADC_ConfigChannel>
 800078e:	4603      	mov	r3, r0
 8000790:	2b00      	cmp	r3, #0
 8000792:	d001      	beq.n	8000798 <MX_ADC1_Init+0x94>
  {
    Error_Handler();
 8000794:	f000 f966 	bl	8000a64 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000798:	2301      	movs	r3, #1
 800079a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 800079c:	2302      	movs	r3, #2
 800079e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80007a0:	463b      	mov	r3, r7
 80007a2:	4619      	mov	r1, r3
 80007a4:	4805      	ldr	r0, [pc, #20]	; (80007bc <MX_ADC1_Init+0xb8>)
 80007a6:	f000 fed3 	bl	8001550 <HAL_ADC_ConfigChannel>
 80007aa:	4603      	mov	r3, r0
 80007ac:	2b00      	cmp	r3, #0
 80007ae:	d001      	beq.n	80007b4 <MX_ADC1_Init+0xb0>
  {
    Error_Handler();
 80007b0:	f000 f958 	bl	8000a64 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80007b4:	bf00      	nop
 80007b6:	3710      	adds	r7, #16
 80007b8:	46bd      	mov	sp, r7
 80007ba:	bd80      	pop	{r7, pc}
 80007bc:	200000fc 	.word	0x200000fc
 80007c0:	40012000 	.word	0x40012000

080007c4 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80007c4:	b580      	push	{r7, lr}
 80007c6:	b086      	sub	sp, #24
 80007c8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80007ca:	f107 0308 	add.w	r3, r7, #8
 80007ce:	2200      	movs	r2, #0
 80007d0:	601a      	str	r2, [r3, #0]
 80007d2:	605a      	str	r2, [r3, #4]
 80007d4:	609a      	str	r2, [r3, #8]
 80007d6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80007d8:	463b      	mov	r3, r7
 80007da:	2200      	movs	r2, #0
 80007dc:	601a      	str	r2, [r3, #0]
 80007de:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80007e0:	4b1e      	ldr	r3, [pc, #120]	; (800085c <MX_TIM2_Init+0x98>)
 80007e2:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80007e6:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 8400;
 80007e8:	4b1c      	ldr	r3, [pc, #112]	; (800085c <MX_TIM2_Init+0x98>)
 80007ea:	f242 02d0 	movw	r2, #8400	; 0x20d0
 80007ee:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80007f0:	4b1a      	ldr	r3, [pc, #104]	; (800085c <MX_TIM2_Init+0x98>)
 80007f2:	2200      	movs	r2, #0
 80007f4:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1000;
 80007f6:	4b19      	ldr	r3, [pc, #100]	; (800085c <MX_TIM2_Init+0x98>)
 80007f8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80007fc:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80007fe:	4b17      	ldr	r3, [pc, #92]	; (800085c <MX_TIM2_Init+0x98>)
 8000800:	2200      	movs	r2, #0
 8000802:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000804:	4b15      	ldr	r3, [pc, #84]	; (800085c <MX_TIM2_Init+0x98>)
 8000806:	2200      	movs	r2, #0
 8000808:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800080a:	4814      	ldr	r0, [pc, #80]	; (800085c <MX_TIM2_Init+0x98>)
 800080c:	f002 fccc 	bl	80031a8 <HAL_TIM_Base_Init>
 8000810:	4603      	mov	r3, r0
 8000812:	2b00      	cmp	r3, #0
 8000814:	d001      	beq.n	800081a <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 8000816:	f000 f925 	bl	8000a64 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800081a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800081e:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000820:	f107 0308 	add.w	r3, r7, #8
 8000824:	4619      	mov	r1, r3
 8000826:	480d      	ldr	r0, [pc, #52]	; (800085c <MX_TIM2_Init+0x98>)
 8000828:	f002 fd0d 	bl	8003246 <HAL_TIM_ConfigClockSource>
 800082c:	4603      	mov	r3, r0
 800082e:	2b00      	cmp	r3, #0
 8000830:	d001      	beq.n	8000836 <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8000832:	f000 f917 	bl	8000a64 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8000836:	2320      	movs	r3, #32
 8000838:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800083a:	2300      	movs	r3, #0
 800083c:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800083e:	463b      	mov	r3, r7
 8000840:	4619      	mov	r1, r3
 8000842:	4806      	ldr	r0, [pc, #24]	; (800085c <MX_TIM2_Init+0x98>)
 8000844:	f002 fef0 	bl	8003628 <HAL_TIMEx_MasterConfigSynchronization>
 8000848:	4603      	mov	r3, r0
 800084a:	2b00      	cmp	r3, #0
 800084c:	d001      	beq.n	8000852 <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 800084e:	f000 f909 	bl	8000a64 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000852:	bf00      	nop
 8000854:	3718      	adds	r7, #24
 8000856:	46bd      	mov	sp, r7
 8000858:	bd80      	pop	{r7, pc}
 800085a:	bf00      	nop
 800085c:	200001b4 	.word	0x200001b4

08000860 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000860:	b580      	push	{r7, lr}
 8000862:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000864:	4b11      	ldr	r3, [pc, #68]	; (80008ac <MX_USART2_UART_Init+0x4c>)
 8000866:	4a12      	ldr	r2, [pc, #72]	; (80008b0 <MX_USART2_UART_Init+0x50>)
 8000868:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800086a:	4b10      	ldr	r3, [pc, #64]	; (80008ac <MX_USART2_UART_Init+0x4c>)
 800086c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000870:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000872:	4b0e      	ldr	r3, [pc, #56]	; (80008ac <MX_USART2_UART_Init+0x4c>)
 8000874:	2200      	movs	r2, #0
 8000876:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000878:	4b0c      	ldr	r3, [pc, #48]	; (80008ac <MX_USART2_UART_Init+0x4c>)
 800087a:	2200      	movs	r2, #0
 800087c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800087e:	4b0b      	ldr	r3, [pc, #44]	; (80008ac <MX_USART2_UART_Init+0x4c>)
 8000880:	2200      	movs	r2, #0
 8000882:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000884:	4b09      	ldr	r3, [pc, #36]	; (80008ac <MX_USART2_UART_Init+0x4c>)
 8000886:	220c      	movs	r2, #12
 8000888:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800088a:	4b08      	ldr	r3, [pc, #32]	; (80008ac <MX_USART2_UART_Init+0x4c>)
 800088c:	2200      	movs	r2, #0
 800088e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000890:	4b06      	ldr	r3, [pc, #24]	; (80008ac <MX_USART2_UART_Init+0x4c>)
 8000892:	2200      	movs	r2, #0
 8000894:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000896:	4805      	ldr	r0, [pc, #20]	; (80008ac <MX_USART2_UART_Init+0x4c>)
 8000898:	f002 ff42 	bl	8003720 <HAL_UART_Init>
 800089c:	4603      	mov	r3, r0
 800089e:	2b00      	cmp	r3, #0
 80008a0:	d001      	beq.n	80008a6 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80008a2:	f000 f8df 	bl	8000a64 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80008a6:	bf00      	nop
 80008a8:	bd80      	pop	{r7, pc}
 80008aa:	bf00      	nop
 80008ac:	200001f4 	.word	0x200001f4
 80008b0:	40004400 	.word	0x40004400

080008b4 <MX_DMA_Init>:

/** 
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void) 
{
 80008b4:	b580      	push	{r7, lr}
 80008b6:	b082      	sub	sp, #8
 80008b8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80008ba:	2300      	movs	r3, #0
 80008bc:	607b      	str	r3, [r7, #4]
 80008be:	4b17      	ldr	r3, [pc, #92]	; (800091c <MX_DMA_Init+0x68>)
 80008c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008c2:	4a16      	ldr	r2, [pc, #88]	; (800091c <MX_DMA_Init+0x68>)
 80008c4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80008c8:	6313      	str	r3, [r2, #48]	; 0x30
 80008ca:	4b14      	ldr	r3, [pc, #80]	; (800091c <MX_DMA_Init+0x68>)
 80008cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008ce:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80008d2:	607b      	str	r3, [r7, #4]
 80008d4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA2_CLK_ENABLE();
 80008d6:	2300      	movs	r3, #0
 80008d8:	603b      	str	r3, [r7, #0]
 80008da:	4b10      	ldr	r3, [pc, #64]	; (800091c <MX_DMA_Init+0x68>)
 80008dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008de:	4a0f      	ldr	r2, [pc, #60]	; (800091c <MX_DMA_Init+0x68>)
 80008e0:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80008e4:	6313      	str	r3, [r2, #48]	; 0x30
 80008e6:	4b0d      	ldr	r3, [pc, #52]	; (800091c <MX_DMA_Init+0x68>)
 80008e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008ea:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80008ee:	603b      	str	r3, [r7, #0]
 80008f0:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 80008f2:	2200      	movs	r2, #0
 80008f4:	2100      	movs	r1, #0
 80008f6:	2010      	movs	r0, #16
 80008f8:	f001 f9bf 	bl	8001c7a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 80008fc:	2010      	movs	r0, #16
 80008fe:	f001 f9d8 	bl	8001cb2 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8000902:	2200      	movs	r2, #0
 8000904:	2100      	movs	r1, #0
 8000906:	2038      	movs	r0, #56	; 0x38
 8000908:	f001 f9b7 	bl	8001c7a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 800090c:	2038      	movs	r0, #56	; 0x38
 800090e:	f001 f9d0 	bl	8001cb2 <HAL_NVIC_EnableIRQ>

}
 8000912:	bf00      	nop
 8000914:	3708      	adds	r7, #8
 8000916:	46bd      	mov	sp, r7
 8000918:	bd80      	pop	{r7, pc}
 800091a:	bf00      	nop
 800091c:	40023800 	.word	0x40023800

08000920 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000920:	b580      	push	{r7, lr}
 8000922:	b08a      	sub	sp, #40	; 0x28
 8000924:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000926:	f107 0314 	add.w	r3, r7, #20
 800092a:	2200      	movs	r2, #0
 800092c:	601a      	str	r2, [r3, #0]
 800092e:	605a      	str	r2, [r3, #4]
 8000930:	609a      	str	r2, [r3, #8]
 8000932:	60da      	str	r2, [r3, #12]
 8000934:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000936:	2300      	movs	r3, #0
 8000938:	613b      	str	r3, [r7, #16]
 800093a:	4b2d      	ldr	r3, [pc, #180]	; (80009f0 <MX_GPIO_Init+0xd0>)
 800093c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800093e:	4a2c      	ldr	r2, [pc, #176]	; (80009f0 <MX_GPIO_Init+0xd0>)
 8000940:	f043 0304 	orr.w	r3, r3, #4
 8000944:	6313      	str	r3, [r2, #48]	; 0x30
 8000946:	4b2a      	ldr	r3, [pc, #168]	; (80009f0 <MX_GPIO_Init+0xd0>)
 8000948:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800094a:	f003 0304 	and.w	r3, r3, #4
 800094e:	613b      	str	r3, [r7, #16]
 8000950:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000952:	2300      	movs	r3, #0
 8000954:	60fb      	str	r3, [r7, #12]
 8000956:	4b26      	ldr	r3, [pc, #152]	; (80009f0 <MX_GPIO_Init+0xd0>)
 8000958:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800095a:	4a25      	ldr	r2, [pc, #148]	; (80009f0 <MX_GPIO_Init+0xd0>)
 800095c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000960:	6313      	str	r3, [r2, #48]	; 0x30
 8000962:	4b23      	ldr	r3, [pc, #140]	; (80009f0 <MX_GPIO_Init+0xd0>)
 8000964:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000966:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800096a:	60fb      	str	r3, [r7, #12]
 800096c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800096e:	2300      	movs	r3, #0
 8000970:	60bb      	str	r3, [r7, #8]
 8000972:	4b1f      	ldr	r3, [pc, #124]	; (80009f0 <MX_GPIO_Init+0xd0>)
 8000974:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000976:	4a1e      	ldr	r2, [pc, #120]	; (80009f0 <MX_GPIO_Init+0xd0>)
 8000978:	f043 0301 	orr.w	r3, r3, #1
 800097c:	6313      	str	r3, [r2, #48]	; 0x30
 800097e:	4b1c      	ldr	r3, [pc, #112]	; (80009f0 <MX_GPIO_Init+0xd0>)
 8000980:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000982:	f003 0301 	and.w	r3, r3, #1
 8000986:	60bb      	str	r3, [r7, #8]
 8000988:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800098a:	2300      	movs	r3, #0
 800098c:	607b      	str	r3, [r7, #4]
 800098e:	4b18      	ldr	r3, [pc, #96]	; (80009f0 <MX_GPIO_Init+0xd0>)
 8000990:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000992:	4a17      	ldr	r2, [pc, #92]	; (80009f0 <MX_GPIO_Init+0xd0>)
 8000994:	f043 0302 	orr.w	r3, r3, #2
 8000998:	6313      	str	r3, [r2, #48]	; 0x30
 800099a:	4b15      	ldr	r3, [pc, #84]	; (80009f0 <MX_GPIO_Init+0xd0>)
 800099c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800099e:	f003 0302 	and.w	r3, r3, #2
 80009a2:	607b      	str	r3, [r7, #4]
 80009a4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80009a6:	2200      	movs	r2, #0
 80009a8:	2120      	movs	r1, #32
 80009aa:	4812      	ldr	r0, [pc, #72]	; (80009f4 <MX_GPIO_Init+0xd4>)
 80009ac:	f001 feb4 	bl	8002718 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80009b0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80009b4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80009b6:	4b10      	ldr	r3, [pc, #64]	; (80009f8 <MX_GPIO_Init+0xd8>)
 80009b8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009ba:	2300      	movs	r3, #0
 80009bc:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80009be:	f107 0314 	add.w	r3, r7, #20
 80009c2:	4619      	mov	r1, r3
 80009c4:	480d      	ldr	r0, [pc, #52]	; (80009fc <MX_GPIO_Init+0xdc>)
 80009c6:	f001 fcfd 	bl	80023c4 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80009ca:	2320      	movs	r3, #32
 80009cc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009ce:	2301      	movs	r3, #1
 80009d0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009d2:	2300      	movs	r3, #0
 80009d4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009d6:	2300      	movs	r3, #0
 80009d8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80009da:	f107 0314 	add.w	r3, r7, #20
 80009de:	4619      	mov	r1, r3
 80009e0:	4804      	ldr	r0, [pc, #16]	; (80009f4 <MX_GPIO_Init+0xd4>)
 80009e2:	f001 fcef 	bl	80023c4 <HAL_GPIO_Init>

}
 80009e6:	bf00      	nop
 80009e8:	3728      	adds	r7, #40	; 0x28
 80009ea:	46bd      	mov	sp, r7
 80009ec:	bd80      	pop	{r7, pc}
 80009ee:	bf00      	nop
 80009f0:	40023800 	.word	0x40023800
 80009f4:	40020000 	.word	0x40020000
 80009f8:	10210000 	.word	0x10210000
 80009fc:	40020800 	.word	0x40020800

08000a00 <__io_putchar>:
/* USER CODE BEGIN 4 */
/**
 * The below code is added to use printf functionality.
 */
PUTCHAR_PROTOTYPE
{
 8000a00:	b580      	push	{r7, lr}
 8000a02:	b082      	sub	sp, #8
 8000a04:	af00      	add	r7, sp, #0
 8000a06:	6078      	str	r0, [r7, #4]
  /* Place your implementation of fputc here */
  /* e.g. write a character to the EVAL_COM1 and Loop until the end of transmission */
  HAL_UART_Transmit(&huart2, (uint8_t *)&ch, 1, 0xFFFF);
 8000a08:	1d39      	adds	r1, r7, #4
 8000a0a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000a0e:	2201      	movs	r2, #1
 8000a10:	4803      	ldr	r0, [pc, #12]	; (8000a20 <__io_putchar+0x20>)
 8000a12:	f002 fed2 	bl	80037ba <HAL_UART_Transmit>

  return ch;
 8000a16:	687b      	ldr	r3, [r7, #4]
}
 8000a18:	4618      	mov	r0, r3
 8000a1a:	3708      	adds	r7, #8
 8000a1c:	46bd      	mov	sp, r7
 8000a1e:	bd80      	pop	{r7, pc}
 8000a20:	200001f4 	.word	0x200001f4

08000a24 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback (UART_HandleTypeDef *huart)
{
 8000a24:	b580      	push	{r7, lr}
 8000a26:	b082      	sub	sp, #8
 8000a28:	af00      	add	r7, sp, #0
 8000a2a:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart2,RxBuffer,10,20);
 8000a2c:	2314      	movs	r3, #20
 8000a2e:	220a      	movs	r2, #10
 8000a30:	4903      	ldr	r1, [pc, #12]	; (8000a40 <HAL_UART_RxCpltCallback+0x1c>)
 8000a32:	4804      	ldr	r0, [pc, #16]	; (8000a44 <HAL_UART_RxCpltCallback+0x20>)
 8000a34:	f002 fec1 	bl	80037ba <HAL_UART_Transmit>
}
 8000a38:	bf00      	nop
 8000a3a:	3708      	adds	r7, #8
 8000a3c:	46bd      	mov	sp, r7
 8000a3e:	bd80      	pop	{r7, pc}
 8000a40:	200001a8 	.word	0x200001a8
 8000a44:	200001f4 	.word	0x200001f4

08000a48 <HAL_ADC_ConvCpltCallback>:

void HAL_ADC_ConvCpltCallback (ADC_HandleTypeDef *hadc)
{
 8000a48:	b580      	push	{r7, lr}
 8000a4a:	b082      	sub	sp, #8
 8000a4c:	af00      	add	r7, sp, #0
 8000a4e:	6078      	str	r0, [r7, #4]
	HAL_GPIO_TogglePin(GPIOA,GPIO_PIN_5);
 8000a50:	2120      	movs	r1, #32
 8000a52:	4803      	ldr	r0, [pc, #12]	; (8000a60 <HAL_ADC_ConvCpltCallback+0x18>)
 8000a54:	f001 fe79 	bl	800274a <HAL_GPIO_TogglePin>
}
 8000a58:	bf00      	nop
 8000a5a:	3708      	adds	r7, #8
 8000a5c:	46bd      	mov	sp, r7
 8000a5e:	bd80      	pop	{r7, pc}
 8000a60:	40020000 	.word	0x40020000

08000a64 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a64:	b480      	push	{r7}
 8000a66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000a68:	bf00      	nop
 8000a6a:	46bd      	mov	sp, r7
 8000a6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a70:	4770      	bx	lr
	...

08000a74 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a74:	b580      	push	{r7, lr}
 8000a76:	b082      	sub	sp, #8
 8000a78:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a7a:	2300      	movs	r3, #0
 8000a7c:	607b      	str	r3, [r7, #4]
 8000a7e:	4b10      	ldr	r3, [pc, #64]	; (8000ac0 <HAL_MspInit+0x4c>)
 8000a80:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a82:	4a0f      	ldr	r2, [pc, #60]	; (8000ac0 <HAL_MspInit+0x4c>)
 8000a84:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000a88:	6453      	str	r3, [r2, #68]	; 0x44
 8000a8a:	4b0d      	ldr	r3, [pc, #52]	; (8000ac0 <HAL_MspInit+0x4c>)
 8000a8c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a8e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000a92:	607b      	str	r3, [r7, #4]
 8000a94:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a96:	2300      	movs	r3, #0
 8000a98:	603b      	str	r3, [r7, #0]
 8000a9a:	4b09      	ldr	r3, [pc, #36]	; (8000ac0 <HAL_MspInit+0x4c>)
 8000a9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a9e:	4a08      	ldr	r2, [pc, #32]	; (8000ac0 <HAL_MspInit+0x4c>)
 8000aa0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000aa4:	6413      	str	r3, [r2, #64]	; 0x40
 8000aa6:	4b06      	ldr	r3, [pc, #24]	; (8000ac0 <HAL_MspInit+0x4c>)
 8000aa8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000aaa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000aae:	603b      	str	r3, [r7, #0]
 8000ab0:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000ab2:	2007      	movs	r0, #7
 8000ab4:	f001 f8d6 	bl	8001c64 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000ab8:	bf00      	nop
 8000aba:	3708      	adds	r7, #8
 8000abc:	46bd      	mov	sp, r7
 8000abe:	bd80      	pop	{r7, pc}
 8000ac0:	40023800 	.word	0x40023800

08000ac4 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000ac4:	b580      	push	{r7, lr}
 8000ac6:	b08a      	sub	sp, #40	; 0x28
 8000ac8:	af00      	add	r7, sp, #0
 8000aca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000acc:	f107 0314 	add.w	r3, r7, #20
 8000ad0:	2200      	movs	r2, #0
 8000ad2:	601a      	str	r2, [r3, #0]
 8000ad4:	605a      	str	r2, [r3, #4]
 8000ad6:	609a      	str	r2, [r3, #8]
 8000ad8:	60da      	str	r2, [r3, #12]
 8000ada:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8000adc:	687b      	ldr	r3, [r7, #4]
 8000ade:	681b      	ldr	r3, [r3, #0]
 8000ae0:	4a33      	ldr	r2, [pc, #204]	; (8000bb0 <HAL_ADC_MspInit+0xec>)
 8000ae2:	4293      	cmp	r3, r2
 8000ae4:	d15f      	bne.n	8000ba6 <HAL_ADC_MspInit+0xe2>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000ae6:	2300      	movs	r3, #0
 8000ae8:	613b      	str	r3, [r7, #16]
 8000aea:	4b32      	ldr	r3, [pc, #200]	; (8000bb4 <HAL_ADC_MspInit+0xf0>)
 8000aec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000aee:	4a31      	ldr	r2, [pc, #196]	; (8000bb4 <HAL_ADC_MspInit+0xf0>)
 8000af0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000af4:	6453      	str	r3, [r2, #68]	; 0x44
 8000af6:	4b2f      	ldr	r3, [pc, #188]	; (8000bb4 <HAL_ADC_MspInit+0xf0>)
 8000af8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000afa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000afe:	613b      	str	r3, [r7, #16]
 8000b00:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b02:	2300      	movs	r3, #0
 8000b04:	60fb      	str	r3, [r7, #12]
 8000b06:	4b2b      	ldr	r3, [pc, #172]	; (8000bb4 <HAL_ADC_MspInit+0xf0>)
 8000b08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b0a:	4a2a      	ldr	r2, [pc, #168]	; (8000bb4 <HAL_ADC_MspInit+0xf0>)
 8000b0c:	f043 0301 	orr.w	r3, r3, #1
 8000b10:	6313      	str	r3, [r2, #48]	; 0x30
 8000b12:	4b28      	ldr	r3, [pc, #160]	; (8000bb4 <HAL_ADC_MspInit+0xf0>)
 8000b14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b16:	f003 0301 	and.w	r3, r3, #1
 8000b1a:	60fb      	str	r3, [r7, #12]
 8000b1c:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration    
    PA0-WKUP     ------> ADC1_IN0
    PA1     ------> ADC1_IN1 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000b1e:	2303      	movs	r3, #3
 8000b20:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000b22:	2303      	movs	r3, #3
 8000b24:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b26:	2300      	movs	r3, #0
 8000b28:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b2a:	f107 0314 	add.w	r3, r7, #20
 8000b2e:	4619      	mov	r1, r3
 8000b30:	4821      	ldr	r0, [pc, #132]	; (8000bb8 <HAL_ADC_MspInit+0xf4>)
 8000b32:	f001 fc47 	bl	80023c4 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 8000b36:	4b21      	ldr	r3, [pc, #132]	; (8000bbc <HAL_ADC_MspInit+0xf8>)
 8000b38:	4a21      	ldr	r2, [pc, #132]	; (8000bc0 <HAL_ADC_MspInit+0xfc>)
 8000b3a:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8000b3c:	4b1f      	ldr	r3, [pc, #124]	; (8000bbc <HAL_ADC_MspInit+0xf8>)
 8000b3e:	2200      	movs	r2, #0
 8000b40:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000b42:	4b1e      	ldr	r3, [pc, #120]	; (8000bbc <HAL_ADC_MspInit+0xf8>)
 8000b44:	2200      	movs	r2, #0
 8000b46:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000b48:	4b1c      	ldr	r3, [pc, #112]	; (8000bbc <HAL_ADC_MspInit+0xf8>)
 8000b4a:	2200      	movs	r2, #0
 8000b4c:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8000b4e:	4b1b      	ldr	r3, [pc, #108]	; (8000bbc <HAL_ADC_MspInit+0xf8>)
 8000b50:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000b54:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8000b56:	4b19      	ldr	r3, [pc, #100]	; (8000bbc <HAL_ADC_MspInit+0xf8>)
 8000b58:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000b5c:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8000b5e:	4b17      	ldr	r3, [pc, #92]	; (8000bbc <HAL_ADC_MspInit+0xf8>)
 8000b60:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000b64:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8000b66:	4b15      	ldr	r3, [pc, #84]	; (8000bbc <HAL_ADC_MspInit+0xf8>)
 8000b68:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000b6c:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8000b6e:	4b13      	ldr	r3, [pc, #76]	; (8000bbc <HAL_ADC_MspInit+0xf8>)
 8000b70:	2200      	movs	r2, #0
 8000b72:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000b74:	4b11      	ldr	r3, [pc, #68]	; (8000bbc <HAL_ADC_MspInit+0xf8>)
 8000b76:	2200      	movs	r2, #0
 8000b78:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8000b7a:	4810      	ldr	r0, [pc, #64]	; (8000bbc <HAL_ADC_MspInit+0xf8>)
 8000b7c:	f001 f8b4 	bl	8001ce8 <HAL_DMA_Init>
 8000b80:	4603      	mov	r3, r0
 8000b82:	2b00      	cmp	r3, #0
 8000b84:	d001      	beq.n	8000b8a <HAL_ADC_MspInit+0xc6>
    {
      Error_Handler();
 8000b86:	f7ff ff6d 	bl	8000a64 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8000b8a:	687b      	ldr	r3, [r7, #4]
 8000b8c:	4a0b      	ldr	r2, [pc, #44]	; (8000bbc <HAL_ADC_MspInit+0xf8>)
 8000b8e:	639a      	str	r2, [r3, #56]	; 0x38
 8000b90:	4a0a      	ldr	r2, [pc, #40]	; (8000bbc <HAL_ADC_MspInit+0xf8>)
 8000b92:	687b      	ldr	r3, [r7, #4]
 8000b94:	6393      	str	r3, [r2, #56]	; 0x38

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 8000b96:	2200      	movs	r2, #0
 8000b98:	2100      	movs	r1, #0
 8000b9a:	2012      	movs	r0, #18
 8000b9c:	f001 f86d 	bl	8001c7a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 8000ba0:	2012      	movs	r0, #18
 8000ba2:	f001 f886 	bl	8001cb2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000ba6:	bf00      	nop
 8000ba8:	3728      	adds	r7, #40	; 0x28
 8000baa:	46bd      	mov	sp, r7
 8000bac:	bd80      	pop	{r7, pc}
 8000bae:	bf00      	nop
 8000bb0:	40012000 	.word	0x40012000
 8000bb4:	40023800 	.word	0x40023800
 8000bb8:	40020000 	.word	0x40020000
 8000bbc:	20000148 	.word	0x20000148
 8000bc0:	40026410 	.word	0x40026410

08000bc4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000bc4:	b480      	push	{r7}
 8000bc6:	b085      	sub	sp, #20
 8000bc8:	af00      	add	r7, sp, #0
 8000bca:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8000bcc:	687b      	ldr	r3, [r7, #4]
 8000bce:	681b      	ldr	r3, [r3, #0]
 8000bd0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000bd4:	d10d      	bne.n	8000bf2 <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000bd6:	2300      	movs	r3, #0
 8000bd8:	60fb      	str	r3, [r7, #12]
 8000bda:	4b09      	ldr	r3, [pc, #36]	; (8000c00 <HAL_TIM_Base_MspInit+0x3c>)
 8000bdc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bde:	4a08      	ldr	r2, [pc, #32]	; (8000c00 <HAL_TIM_Base_MspInit+0x3c>)
 8000be0:	f043 0301 	orr.w	r3, r3, #1
 8000be4:	6413      	str	r3, [r2, #64]	; 0x40
 8000be6:	4b06      	ldr	r3, [pc, #24]	; (8000c00 <HAL_TIM_Base_MspInit+0x3c>)
 8000be8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bea:	f003 0301 	and.w	r3, r3, #1
 8000bee:	60fb      	str	r3, [r7, #12]
 8000bf0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8000bf2:	bf00      	nop
 8000bf4:	3714      	adds	r7, #20
 8000bf6:	46bd      	mov	sp, r7
 8000bf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bfc:	4770      	bx	lr
 8000bfe:	bf00      	nop
 8000c00:	40023800 	.word	0x40023800

08000c04 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000c04:	b580      	push	{r7, lr}
 8000c06:	b08a      	sub	sp, #40	; 0x28
 8000c08:	af00      	add	r7, sp, #0
 8000c0a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c0c:	f107 0314 	add.w	r3, r7, #20
 8000c10:	2200      	movs	r2, #0
 8000c12:	601a      	str	r2, [r3, #0]
 8000c14:	605a      	str	r2, [r3, #4]
 8000c16:	609a      	str	r2, [r3, #8]
 8000c18:	60da      	str	r2, [r3, #12]
 8000c1a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000c1c:	687b      	ldr	r3, [r7, #4]
 8000c1e:	681b      	ldr	r3, [r3, #0]
 8000c20:	4a30      	ldr	r2, [pc, #192]	; (8000ce4 <HAL_UART_MspInit+0xe0>)
 8000c22:	4293      	cmp	r3, r2
 8000c24:	d15a      	bne.n	8000cdc <HAL_UART_MspInit+0xd8>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000c26:	2300      	movs	r3, #0
 8000c28:	613b      	str	r3, [r7, #16]
 8000c2a:	4b2f      	ldr	r3, [pc, #188]	; (8000ce8 <HAL_UART_MspInit+0xe4>)
 8000c2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c2e:	4a2e      	ldr	r2, [pc, #184]	; (8000ce8 <HAL_UART_MspInit+0xe4>)
 8000c30:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000c34:	6413      	str	r3, [r2, #64]	; 0x40
 8000c36:	4b2c      	ldr	r3, [pc, #176]	; (8000ce8 <HAL_UART_MspInit+0xe4>)
 8000c38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c3a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000c3e:	613b      	str	r3, [r7, #16]
 8000c40:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c42:	2300      	movs	r3, #0
 8000c44:	60fb      	str	r3, [r7, #12]
 8000c46:	4b28      	ldr	r3, [pc, #160]	; (8000ce8 <HAL_UART_MspInit+0xe4>)
 8000c48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c4a:	4a27      	ldr	r2, [pc, #156]	; (8000ce8 <HAL_UART_MspInit+0xe4>)
 8000c4c:	f043 0301 	orr.w	r3, r3, #1
 8000c50:	6313      	str	r3, [r2, #48]	; 0x30
 8000c52:	4b25      	ldr	r3, [pc, #148]	; (8000ce8 <HAL_UART_MspInit+0xe4>)
 8000c54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c56:	f003 0301 	and.w	r3, r3, #1
 8000c5a:	60fb      	str	r3, [r7, #12]
 8000c5c:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration    
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX 
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000c5e:	230c      	movs	r3, #12
 8000c60:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c62:	2302      	movs	r3, #2
 8000c64:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c66:	2300      	movs	r3, #0
 8000c68:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c6a:	2303      	movs	r3, #3
 8000c6c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000c6e:	2307      	movs	r3, #7
 8000c70:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c72:	f107 0314 	add.w	r3, r7, #20
 8000c76:	4619      	mov	r1, r3
 8000c78:	481c      	ldr	r0, [pc, #112]	; (8000cec <HAL_UART_MspInit+0xe8>)
 8000c7a:	f001 fba3 	bl	80023c4 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Stream5;
 8000c7e:	4b1c      	ldr	r3, [pc, #112]	; (8000cf0 <HAL_UART_MspInit+0xec>)
 8000c80:	4a1c      	ldr	r2, [pc, #112]	; (8000cf4 <HAL_UART_MspInit+0xf0>)
 8000c82:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Channel = DMA_CHANNEL_4;
 8000c84:	4b1a      	ldr	r3, [pc, #104]	; (8000cf0 <HAL_UART_MspInit+0xec>)
 8000c86:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000c8a:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000c8c:	4b18      	ldr	r3, [pc, #96]	; (8000cf0 <HAL_UART_MspInit+0xec>)
 8000c8e:	2200      	movs	r2, #0
 8000c90:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000c92:	4b17      	ldr	r3, [pc, #92]	; (8000cf0 <HAL_UART_MspInit+0xec>)
 8000c94:	2200      	movs	r2, #0
 8000c96:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000c98:	4b15      	ldr	r3, [pc, #84]	; (8000cf0 <HAL_UART_MspInit+0xec>)
 8000c9a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000c9e:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000ca0:	4b13      	ldr	r3, [pc, #76]	; (8000cf0 <HAL_UART_MspInit+0xec>)
 8000ca2:	2200      	movs	r2, #0
 8000ca4:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000ca6:	4b12      	ldr	r3, [pc, #72]	; (8000cf0 <HAL_UART_MspInit+0xec>)
 8000ca8:	2200      	movs	r2, #0
 8000caa:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_CIRCULAR;
 8000cac:	4b10      	ldr	r3, [pc, #64]	; (8000cf0 <HAL_UART_MspInit+0xec>)
 8000cae:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000cb2:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8000cb4:	4b0e      	ldr	r3, [pc, #56]	; (8000cf0 <HAL_UART_MspInit+0xec>)
 8000cb6:	2200      	movs	r2, #0
 8000cb8:	621a      	str	r2, [r3, #32]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000cba:	4b0d      	ldr	r3, [pc, #52]	; (8000cf0 <HAL_UART_MspInit+0xec>)
 8000cbc:	2200      	movs	r2, #0
 8000cbe:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8000cc0:	480b      	ldr	r0, [pc, #44]	; (8000cf0 <HAL_UART_MspInit+0xec>)
 8000cc2:	f001 f811 	bl	8001ce8 <HAL_DMA_Init>
 8000cc6:	4603      	mov	r3, r0
 8000cc8:	2b00      	cmp	r3, #0
 8000cca:	d001      	beq.n	8000cd0 <HAL_UART_MspInit+0xcc>
    {
      Error_Handler();
 8000ccc:	f7ff feca 	bl	8000a64 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 8000cd0:	687b      	ldr	r3, [r7, #4]
 8000cd2:	4a07      	ldr	r2, [pc, #28]	; (8000cf0 <HAL_UART_MspInit+0xec>)
 8000cd4:	635a      	str	r2, [r3, #52]	; 0x34
 8000cd6:	4a06      	ldr	r2, [pc, #24]	; (8000cf0 <HAL_UART_MspInit+0xec>)
 8000cd8:	687b      	ldr	r3, [r7, #4]
 8000cda:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000cdc:	bf00      	nop
 8000cde:	3728      	adds	r7, #40	; 0x28
 8000ce0:	46bd      	mov	sp, r7
 8000ce2:	bd80      	pop	{r7, pc}
 8000ce4:	40004400 	.word	0x40004400
 8000ce8:	40023800 	.word	0x40023800
 8000cec:	40020000 	.word	0x40020000
 8000cf0:	20000098 	.word	0x20000098
 8000cf4:	40026088 	.word	0x40026088

08000cf8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000cf8:	b480      	push	{r7}
 8000cfa:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000cfc:	bf00      	nop
 8000cfe:	46bd      	mov	sp, r7
 8000d00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d04:	4770      	bx	lr

08000d06 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000d06:	b480      	push	{r7}
 8000d08:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000d0a:	e7fe      	b.n	8000d0a <HardFault_Handler+0x4>

08000d0c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000d0c:	b480      	push	{r7}
 8000d0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000d10:	e7fe      	b.n	8000d10 <MemManage_Handler+0x4>

08000d12 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000d12:	b480      	push	{r7}
 8000d14:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000d16:	e7fe      	b.n	8000d16 <BusFault_Handler+0x4>

08000d18 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000d18:	b480      	push	{r7}
 8000d1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000d1c:	e7fe      	b.n	8000d1c <UsageFault_Handler+0x4>

08000d1e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000d1e:	b480      	push	{r7}
 8000d20:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000d22:	bf00      	nop
 8000d24:	46bd      	mov	sp, r7
 8000d26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d2a:	4770      	bx	lr

08000d2c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000d2c:	b480      	push	{r7}
 8000d2e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000d30:	bf00      	nop
 8000d32:	46bd      	mov	sp, r7
 8000d34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d38:	4770      	bx	lr

08000d3a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000d3a:	b480      	push	{r7}
 8000d3c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000d3e:	bf00      	nop
 8000d40:	46bd      	mov	sp, r7
 8000d42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d46:	4770      	bx	lr

08000d48 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000d48:	b580      	push	{r7, lr}
 8000d4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000d4c:	f000 f94c 	bl	8000fe8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000d50:	bf00      	nop
 8000d52:	bd80      	pop	{r7, pc}

08000d54 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8000d54:	b580      	push	{r7, lr}
 8000d56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8000d58:	4802      	ldr	r0, [pc, #8]	; (8000d64 <DMA1_Stream5_IRQHandler+0x10>)
 8000d5a:	f001 f8cb 	bl	8001ef4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 8000d5e:	bf00      	nop
 8000d60:	bd80      	pop	{r7, pc}
 8000d62:	bf00      	nop
 8000d64:	20000098 	.word	0x20000098

08000d68 <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1, ADC2 and ADC3 interrupts.
  */
void ADC_IRQHandler(void)
{
 8000d68:	b580      	push	{r7, lr}
 8000d6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8000d6c:	4802      	ldr	r0, [pc, #8]	; (8000d78 <ADC_IRQHandler+0x10>)
 8000d6e:	f000 f99e 	bl	80010ae <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 8000d72:	bf00      	nop
 8000d74:	bd80      	pop	{r7, pc}
 8000d76:	bf00      	nop
 8000d78:	200000fc 	.word	0x200000fc

08000d7c <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8000d7c:	b580      	push	{r7, lr}
 8000d7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8000d80:	4802      	ldr	r0, [pc, #8]	; (8000d8c <DMA2_Stream0_IRQHandler+0x10>)
 8000d82:	f001 f8b7 	bl	8001ef4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8000d86:	bf00      	nop
 8000d88:	bd80      	pop	{r7, pc}
 8000d8a:	bf00      	nop
 8000d8c:	20000148 	.word	0x20000148

08000d90 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000d90:	b580      	push	{r7, lr}
 8000d92:	b086      	sub	sp, #24
 8000d94:	af00      	add	r7, sp, #0
 8000d96:	60f8      	str	r0, [r7, #12]
 8000d98:	60b9      	str	r1, [r7, #8]
 8000d9a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000d9c:	2300      	movs	r3, #0
 8000d9e:	617b      	str	r3, [r7, #20]
 8000da0:	e00a      	b.n	8000db8 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000da2:	f3af 8000 	nop.w
 8000da6:	4601      	mov	r1, r0
 8000da8:	68bb      	ldr	r3, [r7, #8]
 8000daa:	1c5a      	adds	r2, r3, #1
 8000dac:	60ba      	str	r2, [r7, #8]
 8000dae:	b2ca      	uxtb	r2, r1
 8000db0:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000db2:	697b      	ldr	r3, [r7, #20]
 8000db4:	3301      	adds	r3, #1
 8000db6:	617b      	str	r3, [r7, #20]
 8000db8:	697a      	ldr	r2, [r7, #20]
 8000dba:	687b      	ldr	r3, [r7, #4]
 8000dbc:	429a      	cmp	r2, r3
 8000dbe:	dbf0      	blt.n	8000da2 <_read+0x12>
	}

return len;
 8000dc0:	687b      	ldr	r3, [r7, #4]
}
 8000dc2:	4618      	mov	r0, r3
 8000dc4:	3718      	adds	r7, #24
 8000dc6:	46bd      	mov	sp, r7
 8000dc8:	bd80      	pop	{r7, pc}

08000dca <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000dca:	b580      	push	{r7, lr}
 8000dcc:	b086      	sub	sp, #24
 8000dce:	af00      	add	r7, sp, #0
 8000dd0:	60f8      	str	r0, [r7, #12]
 8000dd2:	60b9      	str	r1, [r7, #8]
 8000dd4:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000dd6:	2300      	movs	r3, #0
 8000dd8:	617b      	str	r3, [r7, #20]
 8000dda:	e009      	b.n	8000df0 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8000ddc:	68bb      	ldr	r3, [r7, #8]
 8000dde:	1c5a      	adds	r2, r3, #1
 8000de0:	60ba      	str	r2, [r7, #8]
 8000de2:	781b      	ldrb	r3, [r3, #0]
 8000de4:	4618      	mov	r0, r3
 8000de6:	f7ff fe0b 	bl	8000a00 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000dea:	697b      	ldr	r3, [r7, #20]
 8000dec:	3301      	adds	r3, #1
 8000dee:	617b      	str	r3, [r7, #20]
 8000df0:	697a      	ldr	r2, [r7, #20]
 8000df2:	687b      	ldr	r3, [r7, #4]
 8000df4:	429a      	cmp	r2, r3
 8000df6:	dbf1      	blt.n	8000ddc <_write+0x12>
	}
	return len;
 8000df8:	687b      	ldr	r3, [r7, #4]
}
 8000dfa:	4618      	mov	r0, r3
 8000dfc:	3718      	adds	r7, #24
 8000dfe:	46bd      	mov	sp, r7
 8000e00:	bd80      	pop	{r7, pc}

08000e02 <_close>:

int _close(int file)
{
 8000e02:	b480      	push	{r7}
 8000e04:	b083      	sub	sp, #12
 8000e06:	af00      	add	r7, sp, #0
 8000e08:	6078      	str	r0, [r7, #4]
	return -1;
 8000e0a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8000e0e:	4618      	mov	r0, r3
 8000e10:	370c      	adds	r7, #12
 8000e12:	46bd      	mov	sp, r7
 8000e14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e18:	4770      	bx	lr

08000e1a <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000e1a:	b480      	push	{r7}
 8000e1c:	b083      	sub	sp, #12
 8000e1e:	af00      	add	r7, sp, #0
 8000e20:	6078      	str	r0, [r7, #4]
 8000e22:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000e24:	683b      	ldr	r3, [r7, #0]
 8000e26:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000e2a:	605a      	str	r2, [r3, #4]
	return 0;
 8000e2c:	2300      	movs	r3, #0
}
 8000e2e:	4618      	mov	r0, r3
 8000e30:	370c      	adds	r7, #12
 8000e32:	46bd      	mov	sp, r7
 8000e34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e38:	4770      	bx	lr

08000e3a <_isatty>:

int _isatty(int file)
{
 8000e3a:	b480      	push	{r7}
 8000e3c:	b083      	sub	sp, #12
 8000e3e:	af00      	add	r7, sp, #0
 8000e40:	6078      	str	r0, [r7, #4]
	return 1;
 8000e42:	2301      	movs	r3, #1
}
 8000e44:	4618      	mov	r0, r3
 8000e46:	370c      	adds	r7, #12
 8000e48:	46bd      	mov	sp, r7
 8000e4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e4e:	4770      	bx	lr

08000e50 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000e50:	b480      	push	{r7}
 8000e52:	b085      	sub	sp, #20
 8000e54:	af00      	add	r7, sp, #0
 8000e56:	60f8      	str	r0, [r7, #12]
 8000e58:	60b9      	str	r1, [r7, #8]
 8000e5a:	607a      	str	r2, [r7, #4]
	return 0;
 8000e5c:	2300      	movs	r3, #0
}
 8000e5e:	4618      	mov	r0, r3
 8000e60:	3714      	adds	r7, #20
 8000e62:	46bd      	mov	sp, r7
 8000e64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e68:	4770      	bx	lr
	...

08000e6c <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8000e6c:	b580      	push	{r7, lr}
 8000e6e:	b084      	sub	sp, #16
 8000e70:	af00      	add	r7, sp, #0
 8000e72:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8000e74:	4b11      	ldr	r3, [pc, #68]	; (8000ebc <_sbrk+0x50>)
 8000e76:	681b      	ldr	r3, [r3, #0]
 8000e78:	2b00      	cmp	r3, #0
 8000e7a:	d102      	bne.n	8000e82 <_sbrk+0x16>
		heap_end = &end;
 8000e7c:	4b0f      	ldr	r3, [pc, #60]	; (8000ebc <_sbrk+0x50>)
 8000e7e:	4a10      	ldr	r2, [pc, #64]	; (8000ec0 <_sbrk+0x54>)
 8000e80:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8000e82:	4b0e      	ldr	r3, [pc, #56]	; (8000ebc <_sbrk+0x50>)
 8000e84:	681b      	ldr	r3, [r3, #0]
 8000e86:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8000e88:	4b0c      	ldr	r3, [pc, #48]	; (8000ebc <_sbrk+0x50>)
 8000e8a:	681a      	ldr	r2, [r3, #0]
 8000e8c:	687b      	ldr	r3, [r7, #4]
 8000e8e:	4413      	add	r3, r2
 8000e90:	466a      	mov	r2, sp
 8000e92:	4293      	cmp	r3, r2
 8000e94:	d907      	bls.n	8000ea6 <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8000e96:	f003 fa43 	bl	8004320 <__errno>
 8000e9a:	4602      	mov	r2, r0
 8000e9c:	230c      	movs	r3, #12
 8000e9e:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8000ea0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000ea4:	e006      	b.n	8000eb4 <_sbrk+0x48>
	}

	heap_end += incr;
 8000ea6:	4b05      	ldr	r3, [pc, #20]	; (8000ebc <_sbrk+0x50>)
 8000ea8:	681a      	ldr	r2, [r3, #0]
 8000eaa:	687b      	ldr	r3, [r7, #4]
 8000eac:	4413      	add	r3, r2
 8000eae:	4a03      	ldr	r2, [pc, #12]	; (8000ebc <_sbrk+0x50>)
 8000eb0:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8000eb2:	68fb      	ldr	r3, [r7, #12]
}
 8000eb4:	4618      	mov	r0, r3
 8000eb6:	3710      	adds	r7, #16
 8000eb8:	46bd      	mov	sp, r7
 8000eba:	bd80      	pop	{r7, pc}
 8000ebc:	2000008c 	.word	0x2000008c
 8000ec0:	20000248 	.word	0x20000248

08000ec4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000ec4:	b480      	push	{r7}
 8000ec6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000ec8:	4b08      	ldr	r3, [pc, #32]	; (8000eec <SystemInit+0x28>)
 8000eca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000ece:	4a07      	ldr	r2, [pc, #28]	; (8000eec <SystemInit+0x28>)
 8000ed0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000ed4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000ed8:	4b04      	ldr	r3, [pc, #16]	; (8000eec <SystemInit+0x28>)
 8000eda:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000ede:	609a      	str	r2, [r3, #8]
#endif
}
 8000ee0:	bf00      	nop
 8000ee2:	46bd      	mov	sp, r7
 8000ee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ee8:	4770      	bx	lr
 8000eea:	bf00      	nop
 8000eec:	e000ed00 	.word	0xe000ed00

08000ef0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000ef0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000f28 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8000ef4:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8000ef6:	e003      	b.n	8000f00 <LoopCopyDataInit>

08000ef8 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8000ef8:	4b0c      	ldr	r3, [pc, #48]	; (8000f2c <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8000efa:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8000efc:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8000efe:	3104      	adds	r1, #4

08000f00 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8000f00:	480b      	ldr	r0, [pc, #44]	; (8000f30 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8000f02:	4b0c      	ldr	r3, [pc, #48]	; (8000f34 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8000f04:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8000f06:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8000f08:	d3f6      	bcc.n	8000ef8 <CopyDataInit>
  ldr  r2, =_sbss
 8000f0a:	4a0b      	ldr	r2, [pc, #44]	; (8000f38 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8000f0c:	e002      	b.n	8000f14 <LoopFillZerobss>

08000f0e <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8000f0e:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8000f10:	f842 3b04 	str.w	r3, [r2], #4

08000f14 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8000f14:	4b09      	ldr	r3, [pc, #36]	; (8000f3c <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8000f16:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8000f18:	d3f9      	bcc.n	8000f0e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000f1a:	f7ff ffd3 	bl	8000ec4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000f1e:	f003 fa05 	bl	800432c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000f22:	f7ff fb45 	bl	80005b0 <main>
  bx  lr    
 8000f26:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000f28:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8000f2c:	08005238 	.word	0x08005238
  ldr  r0, =_sdata
 8000f30:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8000f34:	20000070 	.word	0x20000070
  ldr  r2, =_sbss
 8000f38:	20000070 	.word	0x20000070
  ldr  r3, = _ebss
 8000f3c:	20000244 	.word	0x20000244

08000f40 <CAN1_RX0_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000f40:	e7fe      	b.n	8000f40 <CAN1_RX0_IRQHandler>
	...

08000f44 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000f44:	b580      	push	{r7, lr}
 8000f46:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000f48:	4b0e      	ldr	r3, [pc, #56]	; (8000f84 <HAL_Init+0x40>)
 8000f4a:	681b      	ldr	r3, [r3, #0]
 8000f4c:	4a0d      	ldr	r2, [pc, #52]	; (8000f84 <HAL_Init+0x40>)
 8000f4e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000f52:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000f54:	4b0b      	ldr	r3, [pc, #44]	; (8000f84 <HAL_Init+0x40>)
 8000f56:	681b      	ldr	r3, [r3, #0]
 8000f58:	4a0a      	ldr	r2, [pc, #40]	; (8000f84 <HAL_Init+0x40>)
 8000f5a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000f5e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000f60:	4b08      	ldr	r3, [pc, #32]	; (8000f84 <HAL_Init+0x40>)
 8000f62:	681b      	ldr	r3, [r3, #0]
 8000f64:	4a07      	ldr	r2, [pc, #28]	; (8000f84 <HAL_Init+0x40>)
 8000f66:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000f6a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000f6c:	2003      	movs	r0, #3
 8000f6e:	f000 fe79 	bl	8001c64 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000f72:	2000      	movs	r0, #0
 8000f74:	f000 f808 	bl	8000f88 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000f78:	f7ff fd7c 	bl	8000a74 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000f7c:	2300      	movs	r3, #0
}
 8000f7e:	4618      	mov	r0, r3
 8000f80:	bd80      	pop	{r7, pc}
 8000f82:	bf00      	nop
 8000f84:	40023c00 	.word	0x40023c00

08000f88 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000f88:	b580      	push	{r7, lr}
 8000f8a:	b082      	sub	sp, #8
 8000f8c:	af00      	add	r7, sp, #0
 8000f8e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000f90:	4b12      	ldr	r3, [pc, #72]	; (8000fdc <HAL_InitTick+0x54>)
 8000f92:	681a      	ldr	r2, [r3, #0]
 8000f94:	4b12      	ldr	r3, [pc, #72]	; (8000fe0 <HAL_InitTick+0x58>)
 8000f96:	781b      	ldrb	r3, [r3, #0]
 8000f98:	4619      	mov	r1, r3
 8000f9a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000f9e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000fa2:	fbb2 f3f3 	udiv	r3, r2, r3
 8000fa6:	4618      	mov	r0, r3
 8000fa8:	f000 fe91 	bl	8001cce <HAL_SYSTICK_Config>
 8000fac:	4603      	mov	r3, r0
 8000fae:	2b00      	cmp	r3, #0
 8000fb0:	d001      	beq.n	8000fb6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000fb2:	2301      	movs	r3, #1
 8000fb4:	e00e      	b.n	8000fd4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000fb6:	687b      	ldr	r3, [r7, #4]
 8000fb8:	2b0f      	cmp	r3, #15
 8000fba:	d80a      	bhi.n	8000fd2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000fbc:	2200      	movs	r2, #0
 8000fbe:	6879      	ldr	r1, [r7, #4]
 8000fc0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000fc4:	f000 fe59 	bl	8001c7a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000fc8:	4a06      	ldr	r2, [pc, #24]	; (8000fe4 <HAL_InitTick+0x5c>)
 8000fca:	687b      	ldr	r3, [r7, #4]
 8000fcc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000fce:	2300      	movs	r3, #0
 8000fd0:	e000      	b.n	8000fd4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000fd2:	2301      	movs	r3, #1
}
 8000fd4:	4618      	mov	r0, r3
 8000fd6:	3708      	adds	r7, #8
 8000fd8:	46bd      	mov	sp, r7
 8000fda:	bd80      	pop	{r7, pc}
 8000fdc:	20000000 	.word	0x20000000
 8000fe0:	20000008 	.word	0x20000008
 8000fe4:	20000004 	.word	0x20000004

08000fe8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000fe8:	b480      	push	{r7}
 8000fea:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000fec:	4b06      	ldr	r3, [pc, #24]	; (8001008 <HAL_IncTick+0x20>)
 8000fee:	781b      	ldrb	r3, [r3, #0]
 8000ff0:	461a      	mov	r2, r3
 8000ff2:	4b06      	ldr	r3, [pc, #24]	; (800100c <HAL_IncTick+0x24>)
 8000ff4:	681b      	ldr	r3, [r3, #0]
 8000ff6:	4413      	add	r3, r2
 8000ff8:	4a04      	ldr	r2, [pc, #16]	; (800100c <HAL_IncTick+0x24>)
 8000ffa:	6013      	str	r3, [r2, #0]
}
 8000ffc:	bf00      	nop
 8000ffe:	46bd      	mov	sp, r7
 8001000:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001004:	4770      	bx	lr
 8001006:	bf00      	nop
 8001008:	20000008 	.word	0x20000008
 800100c:	2000023c 	.word	0x2000023c

08001010 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001010:	b480      	push	{r7}
 8001012:	af00      	add	r7, sp, #0
  return uwTick;
 8001014:	4b03      	ldr	r3, [pc, #12]	; (8001024 <HAL_GetTick+0x14>)
 8001016:	681b      	ldr	r3, [r3, #0]
}
 8001018:	4618      	mov	r0, r3
 800101a:	46bd      	mov	sp, r7
 800101c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001020:	4770      	bx	lr
 8001022:	bf00      	nop
 8001024:	2000023c 	.word	0x2000023c

08001028 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001028:	b580      	push	{r7, lr}
 800102a:	b084      	sub	sp, #16
 800102c:	af00      	add	r7, sp, #0
 800102e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001030:	2300      	movs	r3, #0
 8001032:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	2b00      	cmp	r3, #0
 8001038:	d101      	bne.n	800103e <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 800103a:	2301      	movs	r3, #1
 800103c:	e033      	b.n	80010a6 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 800103e:	687b      	ldr	r3, [r7, #4]
 8001040:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001042:	2b00      	cmp	r3, #0
 8001044:	d109      	bne.n	800105a <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001046:	6878      	ldr	r0, [r7, #4]
 8001048:	f7ff fd3c 	bl	8000ac4 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	2200      	movs	r2, #0
 8001050:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001052:	687b      	ldr	r3, [r7, #4]
 8001054:	2200      	movs	r2, #0
 8001056:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800105e:	f003 0310 	and.w	r3, r3, #16
 8001062:	2b00      	cmp	r3, #0
 8001064:	d118      	bne.n	8001098 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800106a:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800106e:	f023 0302 	bic.w	r3, r3, #2
 8001072:	f043 0202 	orr.w	r2, r3, #2
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 800107a:	6878      	ldr	r0, [r7, #4]
 800107c:	f000 fb9a 	bl	80017b4 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	2200      	movs	r2, #0
 8001084:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800108a:	f023 0303 	bic.w	r3, r3, #3
 800108e:	f043 0201 	orr.w	r2, r3, #1
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	641a      	str	r2, [r3, #64]	; 0x40
 8001096:	e001      	b.n	800109c <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001098:	2301      	movs	r3, #1
 800109a:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	2200      	movs	r2, #0
 80010a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 80010a4:	7bfb      	ldrb	r3, [r7, #15]
}
 80010a6:	4618      	mov	r0, r3
 80010a8:	3710      	adds	r7, #16
 80010aa:	46bd      	mov	sp, r7
 80010ac:	bd80      	pop	{r7, pc}

080010ae <HAL_ADC_IRQHandler>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 80010ae:	b580      	push	{r7, lr}
 80010b0:	b084      	sub	sp, #16
 80010b2:	af00      	add	r7, sp, #0
 80010b4:	6078      	str	r0, [r7, #4]
  uint32_t tmp1 = 0U, tmp2 = 0U;
 80010b6:	2300      	movs	r3, #0
 80010b8:	60fb      	str	r3, [r7, #12]
 80010ba:	2300      	movs	r3, #0
 80010bc:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC);
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	681b      	ldr	r3, [r3, #0]
 80010c2:	681b      	ldr	r3, [r3, #0]
 80010c4:	f003 0302 	and.w	r3, r3, #2
 80010c8:	2b02      	cmp	r3, #2
 80010ca:	bf0c      	ite	eq
 80010cc:	2301      	moveq	r3, #1
 80010ce:	2300      	movne	r3, #0
 80010d0:	b2db      	uxtb	r3, r3
 80010d2:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC);
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	681b      	ldr	r3, [r3, #0]
 80010d8:	685b      	ldr	r3, [r3, #4]
 80010da:	f003 0320 	and.w	r3, r3, #32
 80010de:	2b20      	cmp	r3, #32
 80010e0:	bf0c      	ite	eq
 80010e2:	2301      	moveq	r3, #1
 80010e4:	2300      	movne	r3, #0
 80010e6:	b2db      	uxtb	r3, r3
 80010e8:	60bb      	str	r3, [r7, #8]
  /* Check End of conversion flag for regular channels */
  if(tmp1 && tmp2)
 80010ea:	68fb      	ldr	r3, [r7, #12]
 80010ec:	2b00      	cmp	r3, #0
 80010ee:	d049      	beq.n	8001184 <HAL_ADC_IRQHandler+0xd6>
 80010f0:	68bb      	ldr	r3, [r7, #8]
 80010f2:	2b00      	cmp	r3, #0
 80010f4:	d046      	beq.n	8001184 <HAL_ADC_IRQHandler+0xd6>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010fa:	f003 0310 	and.w	r3, r3, #16
 80010fe:	2b00      	cmp	r3, #0
 8001100:	d105      	bne.n	800110e <HAL_ADC_IRQHandler+0x60>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001106:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	681b      	ldr	r3, [r3, #0]
 8001112:	689b      	ldr	r3, [r3, #8]
 8001114:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001118:	2b00      	cmp	r3, #0
 800111a:	d12b      	bne.n	8001174 <HAL_ADC_IRQHandler+0xc6>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001120:	2b00      	cmp	r3, #0
 8001122:	d127      	bne.n	8001174 <HAL_ADC_IRQHandler+0xc6>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	681b      	ldr	r3, [r3, #0]
 8001128:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800112a:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800112e:	2b00      	cmp	r3, #0
 8001130:	d006      	beq.n	8001140 <HAL_ADC_IRQHandler+0x92>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	681b      	ldr	r3, [r3, #0]
 8001136:	689b      	ldr	r3, [r3, #8]
 8001138:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 800113c:	2b00      	cmp	r3, #0
 800113e:	d119      	bne.n	8001174 <HAL_ADC_IRQHandler+0xc6>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	681b      	ldr	r3, [r3, #0]
 8001144:	685a      	ldr	r2, [r3, #4]
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	681b      	ldr	r3, [r3, #0]
 800114a:	f022 0220 	bic.w	r2, r2, #32
 800114e:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001154:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001160:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001164:	2b00      	cmp	r3, #0
 8001166:	d105      	bne.n	8001174 <HAL_ADC_IRQHandler+0xc6>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800116c:	f043 0201 	orr.w	r2, r3, #1
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8001174:	6878      	ldr	r0, [r7, #4]
 8001176:	f7ff fc67 	bl	8000a48 <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	681b      	ldr	r3, [r3, #0]
 800117e:	f06f 0212 	mvn.w	r2, #18
 8001182:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOC);
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	681b      	ldr	r3, [r3, #0]
 8001188:	681b      	ldr	r3, [r3, #0]
 800118a:	f003 0304 	and.w	r3, r3, #4
 800118e:	2b04      	cmp	r3, #4
 8001190:	bf0c      	ite	eq
 8001192:	2301      	moveq	r3, #1
 8001194:	2300      	movne	r3, #0
 8001196:	b2db      	uxtb	r3, r3
 8001198:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JEOC);                               
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	681b      	ldr	r3, [r3, #0]
 800119e:	685b      	ldr	r3, [r3, #4]
 80011a0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80011a4:	2b80      	cmp	r3, #128	; 0x80
 80011a6:	bf0c      	ite	eq
 80011a8:	2301      	moveq	r3, #1
 80011aa:	2300      	movne	r3, #0
 80011ac:	b2db      	uxtb	r3, r3
 80011ae:	60bb      	str	r3, [r7, #8]
  /* Check End of conversion flag for injected channels */
  if(tmp1 && tmp2)
 80011b0:	68fb      	ldr	r3, [r7, #12]
 80011b2:	2b00      	cmp	r3, #0
 80011b4:	d057      	beq.n	8001266 <HAL_ADC_IRQHandler+0x1b8>
 80011b6:	68bb      	ldr	r3, [r7, #8]
 80011b8:	2b00      	cmp	r3, #0
 80011ba:	d054      	beq.n	8001266 <HAL_ADC_IRQHandler+0x1b8>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011c0:	f003 0310 	and.w	r3, r3, #16
 80011c4:	2b00      	cmp	r3, #0
 80011c6:	d105      	bne.n	80011d4 <HAL_ADC_IRQHandler+0x126>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011cc:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Determine whether any further conversion upcoming on group injected  */
    /* by external trigger, scan sequence on going or by automatic injected */
    /* conversion from group regular (same conditions as group regular      */
    /* interruption disabling above).                                       */
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	681b      	ldr	r3, [r3, #0]
 80011d8:	689b      	ldr	r3, [r3, #8]
 80011da:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 80011de:	2b00      	cmp	r3, #0
 80011e0:	d139      	bne.n	8001256 <HAL_ADC_IRQHandler+0x1a8>
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	681b      	ldr	r3, [r3, #0]
 80011e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80011e8:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 80011ec:	2b00      	cmp	r3, #0
 80011ee:	d006      	beq.n	80011fe <HAL_ADC_IRQHandler+0x150>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	681b      	ldr	r3, [r3, #0]
 80011f4:	689b      	ldr	r3, [r3, #8]
 80011f6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 80011fa:	2b00      	cmp	r3, #0
 80011fc:	d12b      	bne.n	8001256 <HAL_ADC_IRQHandler+0x1a8>
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	681b      	ldr	r3, [r3, #0]
 8001202:	685b      	ldr	r3, [r3, #4]
 8001204:	f403 6380 	and.w	r3, r3, #1024	; 0x400
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 8001208:	2b00      	cmp	r3, #0
 800120a:	d124      	bne.n	8001256 <HAL_ADC_IRQHandler+0x1a8>
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	681b      	ldr	r3, [r3, #0]
 8001210:	689b      	ldr	r3, [r3, #8]
 8001212:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8001216:	2b00      	cmp	r3, #0
 8001218:	d11d      	bne.n	8001256 <HAL_ADC_IRQHandler+0x1a8>
        (hadc->Init.ContinuousConvMode == DISABLE)   )       )   )
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	7e1b      	ldrb	r3, [r3, #24]
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 800121e:	2b00      	cmp	r3, #0
 8001220:	d119      	bne.n	8001256 <HAL_ADC_IRQHandler+0x1a8>
    {
      /* Disable ADC end of single conversion interrupt on group injected */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	681b      	ldr	r3, [r3, #0]
 8001226:	685a      	ldr	r2, [r3, #4]
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	681b      	ldr	r3, [r3, #0]
 800122c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001230:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001236:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	641a      	str	r2, [r3, #64]	; 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001242:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001246:	2b00      	cmp	r3, #0
 8001248:	d105      	bne.n	8001256 <HAL_ADC_IRQHandler+0x1a8>
      { 
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800124e:	f043 0201 	orr.w	r2, r3, #1
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	641a      	str	r2, [r3, #64]	; 0x40
    /* Conversion complete callback */ 
    /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8001256:	6878      	ldr	r0, [r7, #4]
 8001258:	f000 fc2a 	bl	8001ab0 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	681b      	ldr	r3, [r3, #0]
 8001260:	f06f 020c 	mvn.w	r2, #12
 8001264:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD);
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	681b      	ldr	r3, [r3, #0]
 800126a:	681b      	ldr	r3, [r3, #0]
 800126c:	f003 0301 	and.w	r3, r3, #1
 8001270:	2b01      	cmp	r3, #1
 8001272:	bf0c      	ite	eq
 8001274:	2301      	moveq	r3, #1
 8001276:	2300      	movne	r3, #0
 8001278:	b2db      	uxtb	r3, r3
 800127a:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD);                          
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	681b      	ldr	r3, [r3, #0]
 8001280:	685b      	ldr	r3, [r3, #4]
 8001282:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001286:	2b40      	cmp	r3, #64	; 0x40
 8001288:	bf0c      	ite	eq
 800128a:	2301      	moveq	r3, #1
 800128c:	2300      	movne	r3, #0
 800128e:	b2db      	uxtb	r3, r3
 8001290:	60bb      	str	r3, [r7, #8]
  /* Check Analog watchdog flag */
  if(tmp1 && tmp2)
 8001292:	68fb      	ldr	r3, [r7, #12]
 8001294:	2b00      	cmp	r3, #0
 8001296:	d017      	beq.n	80012c8 <HAL_ADC_IRQHandler+0x21a>
 8001298:	68bb      	ldr	r3, [r7, #8]
 800129a:	2b00      	cmp	r3, #0
 800129c:	d014      	beq.n	80012c8 <HAL_ADC_IRQHandler+0x21a>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	681b      	ldr	r3, [r3, #0]
 80012a2:	681b      	ldr	r3, [r3, #0]
 80012a4:	f003 0301 	and.w	r3, r3, #1
 80012a8:	2b01      	cmp	r3, #1
 80012aa:	d10d      	bne.n	80012c8 <HAL_ADC_IRQHandler+0x21a>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012b0:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Level out of window callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 80012b8:	6878      	ldr	r0, [r7, #4]
 80012ba:	f000 f935 	bl	8001528 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	681b      	ldr	r3, [r3, #0]
 80012c2:	f06f 0201 	mvn.w	r2, #1
 80012c6:	601a      	str	r2, [r3, #0]
    }
  }
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_OVR);
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	681b      	ldr	r3, [r3, #0]
 80012cc:	681b      	ldr	r3, [r3, #0]
 80012ce:	f003 0320 	and.w	r3, r3, #32
 80012d2:	2b20      	cmp	r3, #32
 80012d4:	bf0c      	ite	eq
 80012d6:	2301      	moveq	r3, #1
 80012d8:	2300      	movne	r3, #0
 80012da:	b2db      	uxtb	r3, r3
 80012dc:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_OVR);
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	681b      	ldr	r3, [r3, #0]
 80012e2:	685b      	ldr	r3, [r3, #4]
 80012e4:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80012e8:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80012ec:	bf0c      	ite	eq
 80012ee:	2301      	moveq	r3, #1
 80012f0:	2300      	movne	r3, #0
 80012f2:	b2db      	uxtb	r3, r3
 80012f4:	60bb      	str	r3, [r7, #8]
  /* Check Overrun flag */
  if(tmp1 && tmp2)
 80012f6:	68fb      	ldr	r3, [r7, #12]
 80012f8:	2b00      	cmp	r3, #0
 80012fa:	d015      	beq.n	8001328 <HAL_ADC_IRQHandler+0x27a>
 80012fc:	68bb      	ldr	r3, [r7, #8]
 80012fe:	2b00      	cmp	r3, #0
 8001300:	d012      	beq.n	8001328 <HAL_ADC_IRQHandler+0x27a>
    /* Note: On STM32F4, ADC overrun can be set through other parameters    */
    /*       refer to description of parameter "EOCSelection" for more      */
    /*       details.                                                       */
    
    /* Set ADC error code to overrun */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001306:	f043 0202 	orr.w	r2, r3, #2
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	681b      	ldr	r3, [r3, #0]
 8001312:	f06f 0220 	mvn.w	r2, #32
 8001316:	601a      	str	r2, [r3, #0]
    
    /* Error callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8001318:	6878      	ldr	r0, [r7, #4]
 800131a:	f000 f90f 	bl	800153c <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	681b      	ldr	r3, [r3, #0]
 8001322:	f06f 0220 	mvn.w	r2, #32
 8001326:	601a      	str	r2, [r3, #0]
  }
}
 8001328:	bf00      	nop
 800132a:	3710      	adds	r7, #16
 800132c:	46bd      	mov	sp, r7
 800132e:	bd80      	pop	{r7, pc}

08001330 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8001330:	b580      	push	{r7, lr}
 8001332:	b086      	sub	sp, #24
 8001334:	af00      	add	r7, sp, #0
 8001336:	60f8      	str	r0, [r7, #12]
 8001338:	60b9      	str	r1, [r7, #8]
 800133a:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 800133c:	2300      	movs	r3, #0
 800133e:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001340:	68fb      	ldr	r3, [r7, #12]
 8001342:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001346:	2b01      	cmp	r3, #1
 8001348:	d101      	bne.n	800134e <HAL_ADC_Start_DMA+0x1e>
 800134a:	2302      	movs	r3, #2
 800134c:	e0cc      	b.n	80014e8 <HAL_ADC_Start_DMA+0x1b8>
 800134e:	68fb      	ldr	r3, [r7, #12]
 8001350:	2201      	movs	r2, #1
 8001352:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8001356:	68fb      	ldr	r3, [r7, #12]
 8001358:	681b      	ldr	r3, [r3, #0]
 800135a:	689b      	ldr	r3, [r3, #8]
 800135c:	f003 0301 	and.w	r3, r3, #1
 8001360:	2b01      	cmp	r3, #1
 8001362:	d018      	beq.n	8001396 <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001364:	68fb      	ldr	r3, [r7, #12]
 8001366:	681b      	ldr	r3, [r3, #0]
 8001368:	689a      	ldr	r2, [r3, #8]
 800136a:	68fb      	ldr	r3, [r7, #12]
 800136c:	681b      	ldr	r3, [r3, #0]
 800136e:	f042 0201 	orr.w	r2, r2, #1
 8001372:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001374:	4b5e      	ldr	r3, [pc, #376]	; (80014f0 <HAL_ADC_Start_DMA+0x1c0>)
 8001376:	681b      	ldr	r3, [r3, #0]
 8001378:	4a5e      	ldr	r2, [pc, #376]	; (80014f4 <HAL_ADC_Start_DMA+0x1c4>)
 800137a:	fba2 2303 	umull	r2, r3, r2, r3
 800137e:	0c9a      	lsrs	r2, r3, #18
 8001380:	4613      	mov	r3, r2
 8001382:	005b      	lsls	r3, r3, #1
 8001384:	4413      	add	r3, r2
 8001386:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8001388:	e002      	b.n	8001390 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 800138a:	693b      	ldr	r3, [r7, #16]
 800138c:	3b01      	subs	r3, #1
 800138e:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8001390:	693b      	ldr	r3, [r7, #16]
 8001392:	2b00      	cmp	r3, #0
 8001394:	d1f9      	bne.n	800138a <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8001396:	68fb      	ldr	r3, [r7, #12]
 8001398:	681b      	ldr	r3, [r3, #0]
 800139a:	689b      	ldr	r3, [r3, #8]
 800139c:	f003 0301 	and.w	r3, r3, #1
 80013a0:	2b01      	cmp	r3, #1
 80013a2:	f040 80a0 	bne.w	80014e6 <HAL_ADC_Start_DMA+0x1b6>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 80013a6:	68fb      	ldr	r3, [r7, #12]
 80013a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013aa:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80013ae:	f023 0301 	bic.w	r3, r3, #1
 80013b2:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80013b6:	68fb      	ldr	r3, [r7, #12]
 80013b8:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80013ba:	68fb      	ldr	r3, [r7, #12]
 80013bc:	681b      	ldr	r3, [r3, #0]
 80013be:	685b      	ldr	r3, [r3, #4]
 80013c0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80013c4:	2b00      	cmp	r3, #0
 80013c6:	d007      	beq.n	80013d8 <HAL_ADC_Start_DMA+0xa8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80013c8:	68fb      	ldr	r3, [r7, #12]
 80013ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013cc:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80013d0:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80013d4:	68fb      	ldr	r3, [r7, #12]
 80013d6:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80013d8:	68fb      	ldr	r3, [r7, #12]
 80013da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013dc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80013e0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80013e4:	d106      	bne.n	80013f4 <HAL_ADC_Start_DMA+0xc4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80013e6:	68fb      	ldr	r3, [r7, #12]
 80013e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013ea:	f023 0206 	bic.w	r2, r3, #6
 80013ee:	68fb      	ldr	r3, [r7, #12]
 80013f0:	645a      	str	r2, [r3, #68]	; 0x44
 80013f2:	e002      	b.n	80013fa <HAL_ADC_Start_DMA+0xca>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80013f4:	68fb      	ldr	r3, [r7, #12]
 80013f6:	2200      	movs	r2, #0
 80013f8:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 80013fa:	68fb      	ldr	r3, [r7, #12]
 80013fc:	2200      	movs	r2, #0
 80013fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001402:	4b3d      	ldr	r3, [pc, #244]	; (80014f8 <HAL_ADC_Start_DMA+0x1c8>)
 8001404:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8001406:	68fb      	ldr	r3, [r7, #12]
 8001408:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800140a:	4a3c      	ldr	r2, [pc, #240]	; (80014fc <HAL_ADC_Start_DMA+0x1cc>)
 800140c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 800140e:	68fb      	ldr	r3, [r7, #12]
 8001410:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001412:	4a3b      	ldr	r2, [pc, #236]	; (8001500 <HAL_ADC_Start_DMA+0x1d0>)
 8001414:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8001416:	68fb      	ldr	r3, [r7, #12]
 8001418:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800141a:	4a3a      	ldr	r2, [pc, #232]	; (8001504 <HAL_ADC_Start_DMA+0x1d4>)
 800141c:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 800141e:	68fb      	ldr	r3, [r7, #12]
 8001420:	681b      	ldr	r3, [r3, #0]
 8001422:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8001426:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8001428:	68fb      	ldr	r3, [r7, #12]
 800142a:	681b      	ldr	r3, [r3, #0]
 800142c:	685a      	ldr	r2, [r3, #4]
 800142e:	68fb      	ldr	r3, [r7, #12]
 8001430:	681b      	ldr	r3, [r3, #0]
 8001432:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8001436:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8001438:	68fb      	ldr	r3, [r7, #12]
 800143a:	681b      	ldr	r3, [r3, #0]
 800143c:	689a      	ldr	r2, [r3, #8]
 800143e:	68fb      	ldr	r3, [r7, #12]
 8001440:	681b      	ldr	r3, [r3, #0]
 8001442:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001446:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8001448:	68fb      	ldr	r3, [r7, #12]
 800144a:	6b98      	ldr	r0, [r3, #56]	; 0x38
 800144c:	68fb      	ldr	r3, [r7, #12]
 800144e:	681b      	ldr	r3, [r3, #0]
 8001450:	334c      	adds	r3, #76	; 0x4c
 8001452:	4619      	mov	r1, r3
 8001454:	68ba      	ldr	r2, [r7, #8]
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	f000 fcf4 	bl	8001e44 <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 800145c:	697b      	ldr	r3, [r7, #20]
 800145e:	685b      	ldr	r3, [r3, #4]
 8001460:	f003 031f 	and.w	r3, r3, #31
 8001464:	2b00      	cmp	r3, #0
 8001466:	d12a      	bne.n	80014be <HAL_ADC_Start_DMA+0x18e>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8001468:	68fb      	ldr	r3, [r7, #12]
 800146a:	681b      	ldr	r3, [r3, #0]
 800146c:	4a26      	ldr	r2, [pc, #152]	; (8001508 <HAL_ADC_Start_DMA+0x1d8>)
 800146e:	4293      	cmp	r3, r2
 8001470:	d015      	beq.n	800149e <HAL_ADC_Start_DMA+0x16e>
 8001472:	68fb      	ldr	r3, [r7, #12]
 8001474:	681b      	ldr	r3, [r3, #0]
 8001476:	4a25      	ldr	r2, [pc, #148]	; (800150c <HAL_ADC_Start_DMA+0x1dc>)
 8001478:	4293      	cmp	r3, r2
 800147a:	d105      	bne.n	8001488 <HAL_ADC_Start_DMA+0x158>
 800147c:	4b1e      	ldr	r3, [pc, #120]	; (80014f8 <HAL_ADC_Start_DMA+0x1c8>)
 800147e:	685b      	ldr	r3, [r3, #4]
 8001480:	f003 031f 	and.w	r3, r3, #31
 8001484:	2b00      	cmp	r3, #0
 8001486:	d00a      	beq.n	800149e <HAL_ADC_Start_DMA+0x16e>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8001488:	68fb      	ldr	r3, [r7, #12]
 800148a:	681b      	ldr	r3, [r3, #0]
 800148c:	4a20      	ldr	r2, [pc, #128]	; (8001510 <HAL_ADC_Start_DMA+0x1e0>)
 800148e:	4293      	cmp	r3, r2
 8001490:	d129      	bne.n	80014e6 <HAL_ADC_Start_DMA+0x1b6>
 8001492:	4b19      	ldr	r3, [pc, #100]	; (80014f8 <HAL_ADC_Start_DMA+0x1c8>)
 8001494:	685b      	ldr	r3, [r3, #4]
 8001496:	f003 031f 	and.w	r3, r3, #31
 800149a:	2b0f      	cmp	r3, #15
 800149c:	d823      	bhi.n	80014e6 <HAL_ADC_Start_DMA+0x1b6>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 800149e:	68fb      	ldr	r3, [r7, #12]
 80014a0:	681b      	ldr	r3, [r3, #0]
 80014a2:	689b      	ldr	r3, [r3, #8]
 80014a4:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80014a8:	2b00      	cmp	r3, #0
 80014aa:	d11c      	bne.n	80014e6 <HAL_ADC_Start_DMA+0x1b6>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80014ac:	68fb      	ldr	r3, [r7, #12]
 80014ae:	681b      	ldr	r3, [r3, #0]
 80014b0:	689a      	ldr	r2, [r3, #8]
 80014b2:	68fb      	ldr	r3, [r7, #12]
 80014b4:	681b      	ldr	r3, [r3, #0]
 80014b6:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80014ba:	609a      	str	r2, [r3, #8]
 80014bc:	e013      	b.n	80014e6 <HAL_ADC_Start_DMA+0x1b6>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80014be:	68fb      	ldr	r3, [r7, #12]
 80014c0:	681b      	ldr	r3, [r3, #0]
 80014c2:	4a11      	ldr	r2, [pc, #68]	; (8001508 <HAL_ADC_Start_DMA+0x1d8>)
 80014c4:	4293      	cmp	r3, r2
 80014c6:	d10e      	bne.n	80014e6 <HAL_ADC_Start_DMA+0x1b6>
 80014c8:	68fb      	ldr	r3, [r7, #12]
 80014ca:	681b      	ldr	r3, [r3, #0]
 80014cc:	689b      	ldr	r3, [r3, #8]
 80014ce:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80014d2:	2b00      	cmp	r3, #0
 80014d4:	d107      	bne.n	80014e6 <HAL_ADC_Start_DMA+0x1b6>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80014d6:	68fb      	ldr	r3, [r7, #12]
 80014d8:	681b      	ldr	r3, [r3, #0]
 80014da:	689a      	ldr	r2, [r3, #8]
 80014dc:	68fb      	ldr	r3, [r7, #12]
 80014de:	681b      	ldr	r3, [r3, #0]
 80014e0:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80014e4:	609a      	str	r2, [r3, #8]
      }
    }
  }
  
  /* Return function status */
  return HAL_OK;
 80014e6:	2300      	movs	r3, #0
}
 80014e8:	4618      	mov	r0, r3
 80014ea:	3718      	adds	r7, #24
 80014ec:	46bd      	mov	sp, r7
 80014ee:	bd80      	pop	{r7, pc}
 80014f0:	20000000 	.word	0x20000000
 80014f4:	431bde83 	.word	0x431bde83
 80014f8:	40012300 	.word	0x40012300
 80014fc:	080019ad 	.word	0x080019ad
 8001500:	08001a67 	.word	0x08001a67
 8001504:	08001a83 	.word	0x08001a83
 8001508:	40012000 	.word	0x40012000
 800150c:	40012100 	.word	0x40012100
 8001510:	40012200 	.word	0x40012200

08001514 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001514:	b480      	push	{r7}
 8001516:	b083      	sub	sp, #12
 8001518:	af00      	add	r7, sp, #0
 800151a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 800151c:	bf00      	nop
 800151e:	370c      	adds	r7, #12
 8001520:	46bd      	mov	sp, r7
 8001522:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001526:	4770      	bx	lr

08001528 <HAL_ADC_LevelOutOfWindowCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 8001528:	b480      	push	{r7}
 800152a:	b083      	sub	sp, #12
 800152c:	af00      	add	r7, sp, #0
 800152e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_LevelOoutOfWindowCallback could be implemented in the user file
   */
}
 8001530:	bf00      	nop
 8001532:	370c      	adds	r7, #12
 8001534:	46bd      	mov	sp, r7
 8001536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800153a:	4770      	bx	lr

0800153c <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 800153c:	b480      	push	{r7}
 800153e:	b083      	sub	sp, #12
 8001540:	af00      	add	r7, sp, #0
 8001542:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8001544:	bf00      	nop
 8001546:	370c      	adds	r7, #12
 8001548:	46bd      	mov	sp, r7
 800154a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800154e:	4770      	bx	lr

08001550 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8001550:	b480      	push	{r7}
 8001552:	b085      	sub	sp, #20
 8001554:	af00      	add	r7, sp, #0
 8001556:	6078      	str	r0, [r7, #4]
 8001558:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 800155a:	2300      	movs	r3, #0
 800155c:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001564:	2b01      	cmp	r3, #1
 8001566:	d101      	bne.n	800156c <HAL_ADC_ConfigChannel+0x1c>
 8001568:	2302      	movs	r3, #2
 800156a:	e113      	b.n	8001794 <HAL_ADC_ConfigChannel+0x244>
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	2201      	movs	r2, #1
 8001570:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8001574:	683b      	ldr	r3, [r7, #0]
 8001576:	681b      	ldr	r3, [r3, #0]
 8001578:	2b09      	cmp	r3, #9
 800157a:	d925      	bls.n	80015c8 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	681b      	ldr	r3, [r3, #0]
 8001580:	68d9      	ldr	r1, [r3, #12]
 8001582:	683b      	ldr	r3, [r7, #0]
 8001584:	681b      	ldr	r3, [r3, #0]
 8001586:	b29b      	uxth	r3, r3
 8001588:	461a      	mov	r2, r3
 800158a:	4613      	mov	r3, r2
 800158c:	005b      	lsls	r3, r3, #1
 800158e:	4413      	add	r3, r2
 8001590:	3b1e      	subs	r3, #30
 8001592:	2207      	movs	r2, #7
 8001594:	fa02 f303 	lsl.w	r3, r2, r3
 8001598:	43da      	mvns	r2, r3
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	681b      	ldr	r3, [r3, #0]
 800159e:	400a      	ands	r2, r1
 80015a0:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	681b      	ldr	r3, [r3, #0]
 80015a6:	68d9      	ldr	r1, [r3, #12]
 80015a8:	683b      	ldr	r3, [r7, #0]
 80015aa:	689a      	ldr	r2, [r3, #8]
 80015ac:	683b      	ldr	r3, [r7, #0]
 80015ae:	681b      	ldr	r3, [r3, #0]
 80015b0:	b29b      	uxth	r3, r3
 80015b2:	4618      	mov	r0, r3
 80015b4:	4603      	mov	r3, r0
 80015b6:	005b      	lsls	r3, r3, #1
 80015b8:	4403      	add	r3, r0
 80015ba:	3b1e      	subs	r3, #30
 80015bc:	409a      	lsls	r2, r3
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	681b      	ldr	r3, [r3, #0]
 80015c2:	430a      	orrs	r2, r1
 80015c4:	60da      	str	r2, [r3, #12]
 80015c6:	e022      	b.n	800160e <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	681b      	ldr	r3, [r3, #0]
 80015cc:	6919      	ldr	r1, [r3, #16]
 80015ce:	683b      	ldr	r3, [r7, #0]
 80015d0:	681b      	ldr	r3, [r3, #0]
 80015d2:	b29b      	uxth	r3, r3
 80015d4:	461a      	mov	r2, r3
 80015d6:	4613      	mov	r3, r2
 80015d8:	005b      	lsls	r3, r3, #1
 80015da:	4413      	add	r3, r2
 80015dc:	2207      	movs	r2, #7
 80015de:	fa02 f303 	lsl.w	r3, r2, r3
 80015e2:	43da      	mvns	r2, r3
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	681b      	ldr	r3, [r3, #0]
 80015e8:	400a      	ands	r2, r1
 80015ea:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	681b      	ldr	r3, [r3, #0]
 80015f0:	6919      	ldr	r1, [r3, #16]
 80015f2:	683b      	ldr	r3, [r7, #0]
 80015f4:	689a      	ldr	r2, [r3, #8]
 80015f6:	683b      	ldr	r3, [r7, #0]
 80015f8:	681b      	ldr	r3, [r3, #0]
 80015fa:	b29b      	uxth	r3, r3
 80015fc:	4618      	mov	r0, r3
 80015fe:	4603      	mov	r3, r0
 8001600:	005b      	lsls	r3, r3, #1
 8001602:	4403      	add	r3, r0
 8001604:	409a      	lsls	r2, r3
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	681b      	ldr	r3, [r3, #0]
 800160a:	430a      	orrs	r2, r1
 800160c:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800160e:	683b      	ldr	r3, [r7, #0]
 8001610:	685b      	ldr	r3, [r3, #4]
 8001612:	2b06      	cmp	r3, #6
 8001614:	d824      	bhi.n	8001660 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	681b      	ldr	r3, [r3, #0]
 800161a:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800161c:	683b      	ldr	r3, [r7, #0]
 800161e:	685a      	ldr	r2, [r3, #4]
 8001620:	4613      	mov	r3, r2
 8001622:	009b      	lsls	r3, r3, #2
 8001624:	4413      	add	r3, r2
 8001626:	3b05      	subs	r3, #5
 8001628:	221f      	movs	r2, #31
 800162a:	fa02 f303 	lsl.w	r3, r2, r3
 800162e:	43da      	mvns	r2, r3
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	681b      	ldr	r3, [r3, #0]
 8001634:	400a      	ands	r2, r1
 8001636:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	681b      	ldr	r3, [r3, #0]
 800163c:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800163e:	683b      	ldr	r3, [r7, #0]
 8001640:	681b      	ldr	r3, [r3, #0]
 8001642:	b29b      	uxth	r3, r3
 8001644:	4618      	mov	r0, r3
 8001646:	683b      	ldr	r3, [r7, #0]
 8001648:	685a      	ldr	r2, [r3, #4]
 800164a:	4613      	mov	r3, r2
 800164c:	009b      	lsls	r3, r3, #2
 800164e:	4413      	add	r3, r2
 8001650:	3b05      	subs	r3, #5
 8001652:	fa00 f203 	lsl.w	r2, r0, r3
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	681b      	ldr	r3, [r3, #0]
 800165a:	430a      	orrs	r2, r1
 800165c:	635a      	str	r2, [r3, #52]	; 0x34
 800165e:	e04c      	b.n	80016fa <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001660:	683b      	ldr	r3, [r7, #0]
 8001662:	685b      	ldr	r3, [r3, #4]
 8001664:	2b0c      	cmp	r3, #12
 8001666:	d824      	bhi.n	80016b2 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	681b      	ldr	r3, [r3, #0]
 800166c:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800166e:	683b      	ldr	r3, [r7, #0]
 8001670:	685a      	ldr	r2, [r3, #4]
 8001672:	4613      	mov	r3, r2
 8001674:	009b      	lsls	r3, r3, #2
 8001676:	4413      	add	r3, r2
 8001678:	3b23      	subs	r3, #35	; 0x23
 800167a:	221f      	movs	r2, #31
 800167c:	fa02 f303 	lsl.w	r3, r2, r3
 8001680:	43da      	mvns	r2, r3
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	681b      	ldr	r3, [r3, #0]
 8001686:	400a      	ands	r2, r1
 8001688:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	681b      	ldr	r3, [r3, #0]
 800168e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001690:	683b      	ldr	r3, [r7, #0]
 8001692:	681b      	ldr	r3, [r3, #0]
 8001694:	b29b      	uxth	r3, r3
 8001696:	4618      	mov	r0, r3
 8001698:	683b      	ldr	r3, [r7, #0]
 800169a:	685a      	ldr	r2, [r3, #4]
 800169c:	4613      	mov	r3, r2
 800169e:	009b      	lsls	r3, r3, #2
 80016a0:	4413      	add	r3, r2
 80016a2:	3b23      	subs	r3, #35	; 0x23
 80016a4:	fa00 f203 	lsl.w	r2, r0, r3
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	681b      	ldr	r3, [r3, #0]
 80016ac:	430a      	orrs	r2, r1
 80016ae:	631a      	str	r2, [r3, #48]	; 0x30
 80016b0:	e023      	b.n	80016fa <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	681b      	ldr	r3, [r3, #0]
 80016b6:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80016b8:	683b      	ldr	r3, [r7, #0]
 80016ba:	685a      	ldr	r2, [r3, #4]
 80016bc:	4613      	mov	r3, r2
 80016be:	009b      	lsls	r3, r3, #2
 80016c0:	4413      	add	r3, r2
 80016c2:	3b41      	subs	r3, #65	; 0x41
 80016c4:	221f      	movs	r2, #31
 80016c6:	fa02 f303 	lsl.w	r3, r2, r3
 80016ca:	43da      	mvns	r2, r3
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	681b      	ldr	r3, [r3, #0]
 80016d0:	400a      	ands	r2, r1
 80016d2:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	681b      	ldr	r3, [r3, #0]
 80016d8:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80016da:	683b      	ldr	r3, [r7, #0]
 80016dc:	681b      	ldr	r3, [r3, #0]
 80016de:	b29b      	uxth	r3, r3
 80016e0:	4618      	mov	r0, r3
 80016e2:	683b      	ldr	r3, [r7, #0]
 80016e4:	685a      	ldr	r2, [r3, #4]
 80016e6:	4613      	mov	r3, r2
 80016e8:	009b      	lsls	r3, r3, #2
 80016ea:	4413      	add	r3, r2
 80016ec:	3b41      	subs	r3, #65	; 0x41
 80016ee:	fa00 f203 	lsl.w	r2, r0, r3
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	681b      	ldr	r3, [r3, #0]
 80016f6:	430a      	orrs	r2, r1
 80016f8:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80016fa:	4b29      	ldr	r3, [pc, #164]	; (80017a0 <HAL_ADC_ConfigChannel+0x250>)
 80016fc:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	681b      	ldr	r3, [r3, #0]
 8001702:	4a28      	ldr	r2, [pc, #160]	; (80017a4 <HAL_ADC_ConfigChannel+0x254>)
 8001704:	4293      	cmp	r3, r2
 8001706:	d10f      	bne.n	8001728 <HAL_ADC_ConfigChannel+0x1d8>
 8001708:	683b      	ldr	r3, [r7, #0]
 800170a:	681b      	ldr	r3, [r3, #0]
 800170c:	2b12      	cmp	r3, #18
 800170e:	d10b      	bne.n	8001728 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8001710:	68fb      	ldr	r3, [r7, #12]
 8001712:	685b      	ldr	r3, [r3, #4]
 8001714:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8001718:	68fb      	ldr	r3, [r7, #12]
 800171a:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 800171c:	68fb      	ldr	r3, [r7, #12]
 800171e:	685b      	ldr	r3, [r3, #4]
 8001720:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8001724:	68fb      	ldr	r3, [r7, #12]
 8001726:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	681b      	ldr	r3, [r3, #0]
 800172c:	4a1d      	ldr	r2, [pc, #116]	; (80017a4 <HAL_ADC_ConfigChannel+0x254>)
 800172e:	4293      	cmp	r3, r2
 8001730:	d12b      	bne.n	800178a <HAL_ADC_ConfigChannel+0x23a>
 8001732:	683b      	ldr	r3, [r7, #0]
 8001734:	681b      	ldr	r3, [r3, #0]
 8001736:	4a1c      	ldr	r2, [pc, #112]	; (80017a8 <HAL_ADC_ConfigChannel+0x258>)
 8001738:	4293      	cmp	r3, r2
 800173a:	d003      	beq.n	8001744 <HAL_ADC_ConfigChannel+0x1f4>
 800173c:	683b      	ldr	r3, [r7, #0]
 800173e:	681b      	ldr	r3, [r3, #0]
 8001740:	2b11      	cmp	r3, #17
 8001742:	d122      	bne.n	800178a <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8001744:	68fb      	ldr	r3, [r7, #12]
 8001746:	685b      	ldr	r3, [r3, #4]
 8001748:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 800174c:	68fb      	ldr	r3, [r7, #12]
 800174e:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8001750:	68fb      	ldr	r3, [r7, #12]
 8001752:	685b      	ldr	r3, [r3, #4]
 8001754:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8001758:	68fb      	ldr	r3, [r7, #12]
 800175a:	605a      	str	r2, [r3, #4]
    
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 800175c:	683b      	ldr	r3, [r7, #0]
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	4a11      	ldr	r2, [pc, #68]	; (80017a8 <HAL_ADC_ConfigChannel+0x258>)
 8001762:	4293      	cmp	r3, r2
 8001764:	d111      	bne.n	800178a <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001766:	4b11      	ldr	r3, [pc, #68]	; (80017ac <HAL_ADC_ConfigChannel+0x25c>)
 8001768:	681b      	ldr	r3, [r3, #0]
 800176a:	4a11      	ldr	r2, [pc, #68]	; (80017b0 <HAL_ADC_ConfigChannel+0x260>)
 800176c:	fba2 2303 	umull	r2, r3, r2, r3
 8001770:	0c9a      	lsrs	r2, r3, #18
 8001772:	4613      	mov	r3, r2
 8001774:	009b      	lsls	r3, r3, #2
 8001776:	4413      	add	r3, r2
 8001778:	005b      	lsls	r3, r3, #1
 800177a:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 800177c:	e002      	b.n	8001784 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 800177e:	68bb      	ldr	r3, [r7, #8]
 8001780:	3b01      	subs	r3, #1
 8001782:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8001784:	68bb      	ldr	r3, [r7, #8]
 8001786:	2b00      	cmp	r3, #0
 8001788:	d1f9      	bne.n	800177e <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	2200      	movs	r2, #0
 800178e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8001792:	2300      	movs	r3, #0
}
 8001794:	4618      	mov	r0, r3
 8001796:	3714      	adds	r7, #20
 8001798:	46bd      	mov	sp, r7
 800179a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800179e:	4770      	bx	lr
 80017a0:	40012300 	.word	0x40012300
 80017a4:	40012000 	.word	0x40012000
 80017a8:	10000012 	.word	0x10000012
 80017ac:	20000000 	.word	0x20000000
 80017b0:	431bde83 	.word	0x431bde83

080017b4 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 80017b4:	b480      	push	{r7}
 80017b6:	b085      	sub	sp, #20
 80017b8:	af00      	add	r7, sp, #0
 80017ba:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80017bc:	4b79      	ldr	r3, [pc, #484]	; (80019a4 <ADC_Init+0x1f0>)
 80017be:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 80017c0:	68fb      	ldr	r3, [r7, #12]
 80017c2:	685b      	ldr	r3, [r3, #4]
 80017c4:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80017c8:	68fb      	ldr	r3, [r7, #12]
 80017ca:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 80017cc:	68fb      	ldr	r3, [r7, #12]
 80017ce:	685a      	ldr	r2, [r3, #4]
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	685b      	ldr	r3, [r3, #4]
 80017d4:	431a      	orrs	r2, r3
 80017d6:	68fb      	ldr	r3, [r7, #12]
 80017d8:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	681b      	ldr	r3, [r3, #0]
 80017de:	685a      	ldr	r2, [r3, #4]
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80017e8:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	681b      	ldr	r3, [r3, #0]
 80017ee:	6859      	ldr	r1, [r3, #4]
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	691b      	ldr	r3, [r3, #16]
 80017f4:	021a      	lsls	r2, r3, #8
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	681b      	ldr	r3, [r3, #0]
 80017fa:	430a      	orrs	r2, r1
 80017fc:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	681b      	ldr	r3, [r3, #0]
 8001802:	685a      	ldr	r2, [r3, #4]
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	681b      	ldr	r3, [r3, #0]
 8001808:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 800180c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	681b      	ldr	r3, [r3, #0]
 8001812:	6859      	ldr	r1, [r3, #4]
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	689a      	ldr	r2, [r3, #8]
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	681b      	ldr	r3, [r3, #0]
 800181c:	430a      	orrs	r2, r1
 800181e:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	689a      	ldr	r2, [r3, #8]
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	681b      	ldr	r3, [r3, #0]
 800182a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800182e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	681b      	ldr	r3, [r3, #0]
 8001834:	6899      	ldr	r1, [r3, #8]
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	68da      	ldr	r2, [r3, #12]
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	681b      	ldr	r3, [r3, #0]
 800183e:	430a      	orrs	r2, r1
 8001840:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001846:	4a58      	ldr	r2, [pc, #352]	; (80019a8 <ADC_Init+0x1f4>)
 8001848:	4293      	cmp	r3, r2
 800184a:	d022      	beq.n	8001892 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	689a      	ldr	r2, [r3, #8]
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	681b      	ldr	r3, [r3, #0]
 8001856:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800185a:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	681b      	ldr	r3, [r3, #0]
 8001860:	6899      	ldr	r1, [r3, #8]
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	681b      	ldr	r3, [r3, #0]
 800186a:	430a      	orrs	r2, r1
 800186c:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	681b      	ldr	r3, [r3, #0]
 8001872:	689a      	ldr	r2, [r3, #8]
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800187c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	681b      	ldr	r3, [r3, #0]
 8001882:	6899      	ldr	r1, [r3, #8]
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	681b      	ldr	r3, [r3, #0]
 800188c:	430a      	orrs	r2, r1
 800188e:	609a      	str	r2, [r3, #8]
 8001890:	e00f      	b.n	80018b2 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	681b      	ldr	r3, [r3, #0]
 8001896:	689a      	ldr	r2, [r3, #8]
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	681b      	ldr	r3, [r3, #0]
 800189c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80018a0:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	681b      	ldr	r3, [r3, #0]
 80018a6:	689a      	ldr	r2, [r3, #8]
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	681b      	ldr	r3, [r3, #0]
 80018ac:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80018b0:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	689a      	ldr	r2, [r3, #8]
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	681b      	ldr	r3, [r3, #0]
 80018bc:	f022 0202 	bic.w	r2, r2, #2
 80018c0:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	681b      	ldr	r3, [r3, #0]
 80018c6:	6899      	ldr	r1, [r3, #8]
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	7e1b      	ldrb	r3, [r3, #24]
 80018cc:	005a      	lsls	r2, r3, #1
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	681b      	ldr	r3, [r3, #0]
 80018d2:	430a      	orrs	r2, r1
 80018d4:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	f893 3020 	ldrb.w	r3, [r3, #32]
 80018dc:	2b00      	cmp	r3, #0
 80018de:	d01b      	beq.n	8001918 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	685a      	ldr	r2, [r3, #4]
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	681b      	ldr	r3, [r3, #0]
 80018ea:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80018ee:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	685a      	ldr	r2, [r3, #4]
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	681b      	ldr	r3, [r3, #0]
 80018fa:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 80018fe:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	681b      	ldr	r3, [r3, #0]
 8001904:	6859      	ldr	r1, [r3, #4]
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800190a:	3b01      	subs	r3, #1
 800190c:	035a      	lsls	r2, r3, #13
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	681b      	ldr	r3, [r3, #0]
 8001912:	430a      	orrs	r2, r1
 8001914:	605a      	str	r2, [r3, #4]
 8001916:	e007      	b.n	8001928 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	681b      	ldr	r3, [r3, #0]
 800191c:	685a      	ldr	r2, [r3, #4]
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	681b      	ldr	r3, [r3, #0]
 8001922:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001926:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	681b      	ldr	r3, [r3, #0]
 8001932:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8001936:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	69db      	ldr	r3, [r3, #28]
 8001942:	3b01      	subs	r3, #1
 8001944:	051a      	lsls	r2, r3, #20
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	681b      	ldr	r3, [r3, #0]
 800194a:	430a      	orrs	r2, r1
 800194c:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	681b      	ldr	r3, [r3, #0]
 8001952:	689a      	ldr	r2, [r3, #8]
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800195c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	6899      	ldr	r1, [r3, #8]
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800196a:	025a      	lsls	r2, r3, #9
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	681b      	ldr	r3, [r3, #0]
 8001970:	430a      	orrs	r2, r1
 8001972:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	681b      	ldr	r3, [r3, #0]
 8001978:	689a      	ldr	r2, [r3, #8]
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	681b      	ldr	r3, [r3, #0]
 800197e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001982:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	681b      	ldr	r3, [r3, #0]
 8001988:	6899      	ldr	r1, [r3, #8]
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	695b      	ldr	r3, [r3, #20]
 800198e:	029a      	lsls	r2, r3, #10
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	430a      	orrs	r2, r1
 8001996:	609a      	str	r2, [r3, #8]
}
 8001998:	bf00      	nop
 800199a:	3714      	adds	r7, #20
 800199c:	46bd      	mov	sp, r7
 800199e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019a2:	4770      	bx	lr
 80019a4:	40012300 	.word	0x40012300
 80019a8:	0f000001 	.word	0x0f000001

080019ac <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 80019ac:	b580      	push	{r7, lr}
 80019ae:	b084      	sub	sp, #16
 80019b0:	af00      	add	r7, sp, #0
 80019b2:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80019b8:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 80019ba:	68fb      	ldr	r3, [r7, #12]
 80019bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019be:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80019c2:	2b00      	cmp	r3, #0
 80019c4:	d13c      	bne.n	8001a40 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80019c6:	68fb      	ldr	r3, [r7, #12]
 80019c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019ca:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80019ce:	68fb      	ldr	r3, [r7, #12]
 80019d0:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80019d2:	68fb      	ldr	r3, [r7, #12]
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	689b      	ldr	r3, [r3, #8]
 80019d8:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80019dc:	2b00      	cmp	r3, #0
 80019de:	d12b      	bne.n	8001a38 <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80019e0:	68fb      	ldr	r3, [r7, #12]
 80019e2:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80019e4:	2b00      	cmp	r3, #0
 80019e6:	d127      	bne.n	8001a38 <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 80019e8:	68fb      	ldr	r3, [r7, #12]
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80019ee:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80019f2:	2b00      	cmp	r3, #0
 80019f4:	d006      	beq.n	8001a04 <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 80019f6:	68fb      	ldr	r3, [r7, #12]
 80019f8:	681b      	ldr	r3, [r3, #0]
 80019fa:	689b      	ldr	r3, [r3, #8]
 80019fc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8001a00:	2b00      	cmp	r3, #0
 8001a02:	d119      	bne.n	8001a38 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8001a04:	68fb      	ldr	r3, [r7, #12]
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	685a      	ldr	r2, [r3, #4]
 8001a0a:	68fb      	ldr	r3, [r7, #12]
 8001a0c:	681b      	ldr	r3, [r3, #0]
 8001a0e:	f022 0220 	bic.w	r2, r2, #32
 8001a12:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8001a14:	68fb      	ldr	r3, [r7, #12]
 8001a16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a18:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001a1c:	68fb      	ldr	r3, [r7, #12]
 8001a1e:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001a20:	68fb      	ldr	r3, [r7, #12]
 8001a22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a24:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001a28:	2b00      	cmp	r3, #0
 8001a2a:	d105      	bne.n	8001a38 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001a2c:	68fb      	ldr	r3, [r7, #12]
 8001a2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a30:	f043 0201 	orr.w	r2, r3, #1
 8001a34:	68fb      	ldr	r3, [r7, #12]
 8001a36:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8001a38:	68f8      	ldr	r0, [r7, #12]
 8001a3a:	f7ff f805 	bl	8000a48 <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8001a3e:	e00e      	b.n	8001a5e <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8001a40:	68fb      	ldr	r3, [r7, #12]
 8001a42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a44:	f003 0310 	and.w	r3, r3, #16
 8001a48:	2b00      	cmp	r3, #0
 8001a4a:	d003      	beq.n	8001a54 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8001a4c:	68f8      	ldr	r0, [r7, #12]
 8001a4e:	f7ff fd75 	bl	800153c <HAL_ADC_ErrorCallback>
}
 8001a52:	e004      	b.n	8001a5e <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8001a54:	68fb      	ldr	r3, [r7, #12]
 8001a56:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001a58:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a5a:	6878      	ldr	r0, [r7, #4]
 8001a5c:	4798      	blx	r3
}
 8001a5e:	bf00      	nop
 8001a60:	3710      	adds	r7, #16
 8001a62:	46bd      	mov	sp, r7
 8001a64:	bd80      	pop	{r7, pc}

08001a66 <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8001a66:	b580      	push	{r7, lr}
 8001a68:	b084      	sub	sp, #16
 8001a6a:	af00      	add	r7, sp, #0
 8001a6c:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001a72:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8001a74:	68f8      	ldr	r0, [r7, #12]
 8001a76:	f7ff fd4d 	bl	8001514 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8001a7a:	bf00      	nop
 8001a7c:	3710      	adds	r7, #16
 8001a7e:	46bd      	mov	sp, r7
 8001a80:	bd80      	pop	{r7, pc}

08001a82 <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8001a82:	b580      	push	{r7, lr}
 8001a84:	b084      	sub	sp, #16
 8001a86:	af00      	add	r7, sp, #0
 8001a88:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001a8e:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 8001a90:	68fb      	ldr	r3, [r7, #12]
 8001a92:	2240      	movs	r2, #64	; 0x40
 8001a94:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 8001a96:	68fb      	ldr	r3, [r7, #12]
 8001a98:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a9a:	f043 0204 	orr.w	r2, r3, #4
 8001a9e:	68fb      	ldr	r3, [r7, #12]
 8001aa0:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8001aa2:	68f8      	ldr	r0, [r7, #12]
 8001aa4:	f7ff fd4a 	bl	800153c <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8001aa8:	bf00      	nop
 8001aaa:	3710      	adds	r7, #16
 8001aac:	46bd      	mov	sp, r7
 8001aae:	bd80      	pop	{r7, pc}

08001ab0 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001ab0:	b480      	push	{r7}
 8001ab2:	b083      	sub	sp, #12
 8001ab4:	af00      	add	r7, sp, #0
 8001ab6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_InjectedConvCpltCallback could be implemented in the user file
   */
}
 8001ab8:	bf00      	nop
 8001aba:	370c      	adds	r7, #12
 8001abc:	46bd      	mov	sp, r7
 8001abe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ac2:	4770      	bx	lr

08001ac4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001ac4:	b480      	push	{r7}
 8001ac6:	b085      	sub	sp, #20
 8001ac8:	af00      	add	r7, sp, #0
 8001aca:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	f003 0307 	and.w	r3, r3, #7
 8001ad2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001ad4:	4b0c      	ldr	r3, [pc, #48]	; (8001b08 <__NVIC_SetPriorityGrouping+0x44>)
 8001ad6:	68db      	ldr	r3, [r3, #12]
 8001ad8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001ada:	68ba      	ldr	r2, [r7, #8]
 8001adc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001ae0:	4013      	ands	r3, r2
 8001ae2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001ae4:	68fb      	ldr	r3, [r7, #12]
 8001ae6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001ae8:	68bb      	ldr	r3, [r7, #8]
 8001aea:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001aec:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001af0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001af4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001af6:	4a04      	ldr	r2, [pc, #16]	; (8001b08 <__NVIC_SetPriorityGrouping+0x44>)
 8001af8:	68bb      	ldr	r3, [r7, #8]
 8001afa:	60d3      	str	r3, [r2, #12]
}
 8001afc:	bf00      	nop
 8001afe:	3714      	adds	r7, #20
 8001b00:	46bd      	mov	sp, r7
 8001b02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b06:	4770      	bx	lr
 8001b08:	e000ed00 	.word	0xe000ed00

08001b0c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001b0c:	b480      	push	{r7}
 8001b0e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001b10:	4b04      	ldr	r3, [pc, #16]	; (8001b24 <__NVIC_GetPriorityGrouping+0x18>)
 8001b12:	68db      	ldr	r3, [r3, #12]
 8001b14:	0a1b      	lsrs	r3, r3, #8
 8001b16:	f003 0307 	and.w	r3, r3, #7
}
 8001b1a:	4618      	mov	r0, r3
 8001b1c:	46bd      	mov	sp, r7
 8001b1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b22:	4770      	bx	lr
 8001b24:	e000ed00 	.word	0xe000ed00

08001b28 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001b28:	b480      	push	{r7}
 8001b2a:	b083      	sub	sp, #12
 8001b2c:	af00      	add	r7, sp, #0
 8001b2e:	4603      	mov	r3, r0
 8001b30:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001b32:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b36:	2b00      	cmp	r3, #0
 8001b38:	db0b      	blt.n	8001b52 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001b3a:	79fb      	ldrb	r3, [r7, #7]
 8001b3c:	f003 021f 	and.w	r2, r3, #31
 8001b40:	4907      	ldr	r1, [pc, #28]	; (8001b60 <__NVIC_EnableIRQ+0x38>)
 8001b42:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b46:	095b      	lsrs	r3, r3, #5
 8001b48:	2001      	movs	r0, #1
 8001b4a:	fa00 f202 	lsl.w	r2, r0, r2
 8001b4e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001b52:	bf00      	nop
 8001b54:	370c      	adds	r7, #12
 8001b56:	46bd      	mov	sp, r7
 8001b58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b5c:	4770      	bx	lr
 8001b5e:	bf00      	nop
 8001b60:	e000e100 	.word	0xe000e100

08001b64 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001b64:	b480      	push	{r7}
 8001b66:	b083      	sub	sp, #12
 8001b68:	af00      	add	r7, sp, #0
 8001b6a:	4603      	mov	r3, r0
 8001b6c:	6039      	str	r1, [r7, #0]
 8001b6e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001b70:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b74:	2b00      	cmp	r3, #0
 8001b76:	db0a      	blt.n	8001b8e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b78:	683b      	ldr	r3, [r7, #0]
 8001b7a:	b2da      	uxtb	r2, r3
 8001b7c:	490c      	ldr	r1, [pc, #48]	; (8001bb0 <__NVIC_SetPriority+0x4c>)
 8001b7e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b82:	0112      	lsls	r2, r2, #4
 8001b84:	b2d2      	uxtb	r2, r2
 8001b86:	440b      	add	r3, r1
 8001b88:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001b8c:	e00a      	b.n	8001ba4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b8e:	683b      	ldr	r3, [r7, #0]
 8001b90:	b2da      	uxtb	r2, r3
 8001b92:	4908      	ldr	r1, [pc, #32]	; (8001bb4 <__NVIC_SetPriority+0x50>)
 8001b94:	79fb      	ldrb	r3, [r7, #7]
 8001b96:	f003 030f 	and.w	r3, r3, #15
 8001b9a:	3b04      	subs	r3, #4
 8001b9c:	0112      	lsls	r2, r2, #4
 8001b9e:	b2d2      	uxtb	r2, r2
 8001ba0:	440b      	add	r3, r1
 8001ba2:	761a      	strb	r2, [r3, #24]
}
 8001ba4:	bf00      	nop
 8001ba6:	370c      	adds	r7, #12
 8001ba8:	46bd      	mov	sp, r7
 8001baa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bae:	4770      	bx	lr
 8001bb0:	e000e100 	.word	0xe000e100
 8001bb4:	e000ed00 	.word	0xe000ed00

08001bb8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001bb8:	b480      	push	{r7}
 8001bba:	b089      	sub	sp, #36	; 0x24
 8001bbc:	af00      	add	r7, sp, #0
 8001bbe:	60f8      	str	r0, [r7, #12]
 8001bc0:	60b9      	str	r1, [r7, #8]
 8001bc2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001bc4:	68fb      	ldr	r3, [r7, #12]
 8001bc6:	f003 0307 	and.w	r3, r3, #7
 8001bca:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001bcc:	69fb      	ldr	r3, [r7, #28]
 8001bce:	f1c3 0307 	rsb	r3, r3, #7
 8001bd2:	2b04      	cmp	r3, #4
 8001bd4:	bf28      	it	cs
 8001bd6:	2304      	movcs	r3, #4
 8001bd8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001bda:	69fb      	ldr	r3, [r7, #28]
 8001bdc:	3304      	adds	r3, #4
 8001bde:	2b06      	cmp	r3, #6
 8001be0:	d902      	bls.n	8001be8 <NVIC_EncodePriority+0x30>
 8001be2:	69fb      	ldr	r3, [r7, #28]
 8001be4:	3b03      	subs	r3, #3
 8001be6:	e000      	b.n	8001bea <NVIC_EncodePriority+0x32>
 8001be8:	2300      	movs	r3, #0
 8001bea:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001bec:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001bf0:	69bb      	ldr	r3, [r7, #24]
 8001bf2:	fa02 f303 	lsl.w	r3, r2, r3
 8001bf6:	43da      	mvns	r2, r3
 8001bf8:	68bb      	ldr	r3, [r7, #8]
 8001bfa:	401a      	ands	r2, r3
 8001bfc:	697b      	ldr	r3, [r7, #20]
 8001bfe:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001c00:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001c04:	697b      	ldr	r3, [r7, #20]
 8001c06:	fa01 f303 	lsl.w	r3, r1, r3
 8001c0a:	43d9      	mvns	r1, r3
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001c10:	4313      	orrs	r3, r2
         );
}
 8001c12:	4618      	mov	r0, r3
 8001c14:	3724      	adds	r7, #36	; 0x24
 8001c16:	46bd      	mov	sp, r7
 8001c18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c1c:	4770      	bx	lr
	...

08001c20 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001c20:	b580      	push	{r7, lr}
 8001c22:	b082      	sub	sp, #8
 8001c24:	af00      	add	r7, sp, #0
 8001c26:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	3b01      	subs	r3, #1
 8001c2c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001c30:	d301      	bcc.n	8001c36 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001c32:	2301      	movs	r3, #1
 8001c34:	e00f      	b.n	8001c56 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001c36:	4a0a      	ldr	r2, [pc, #40]	; (8001c60 <SysTick_Config+0x40>)
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	3b01      	subs	r3, #1
 8001c3c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001c3e:	210f      	movs	r1, #15
 8001c40:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001c44:	f7ff ff8e 	bl	8001b64 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001c48:	4b05      	ldr	r3, [pc, #20]	; (8001c60 <SysTick_Config+0x40>)
 8001c4a:	2200      	movs	r2, #0
 8001c4c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001c4e:	4b04      	ldr	r3, [pc, #16]	; (8001c60 <SysTick_Config+0x40>)
 8001c50:	2207      	movs	r2, #7
 8001c52:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001c54:	2300      	movs	r3, #0
}
 8001c56:	4618      	mov	r0, r3
 8001c58:	3708      	adds	r7, #8
 8001c5a:	46bd      	mov	sp, r7
 8001c5c:	bd80      	pop	{r7, pc}
 8001c5e:	bf00      	nop
 8001c60:	e000e010 	.word	0xe000e010

08001c64 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001c64:	b580      	push	{r7, lr}
 8001c66:	b082      	sub	sp, #8
 8001c68:	af00      	add	r7, sp, #0
 8001c6a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001c6c:	6878      	ldr	r0, [r7, #4]
 8001c6e:	f7ff ff29 	bl	8001ac4 <__NVIC_SetPriorityGrouping>
}
 8001c72:	bf00      	nop
 8001c74:	3708      	adds	r7, #8
 8001c76:	46bd      	mov	sp, r7
 8001c78:	bd80      	pop	{r7, pc}

08001c7a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001c7a:	b580      	push	{r7, lr}
 8001c7c:	b086      	sub	sp, #24
 8001c7e:	af00      	add	r7, sp, #0
 8001c80:	4603      	mov	r3, r0
 8001c82:	60b9      	str	r1, [r7, #8]
 8001c84:	607a      	str	r2, [r7, #4]
 8001c86:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001c88:	2300      	movs	r3, #0
 8001c8a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001c8c:	f7ff ff3e 	bl	8001b0c <__NVIC_GetPriorityGrouping>
 8001c90:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001c92:	687a      	ldr	r2, [r7, #4]
 8001c94:	68b9      	ldr	r1, [r7, #8]
 8001c96:	6978      	ldr	r0, [r7, #20]
 8001c98:	f7ff ff8e 	bl	8001bb8 <NVIC_EncodePriority>
 8001c9c:	4602      	mov	r2, r0
 8001c9e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001ca2:	4611      	mov	r1, r2
 8001ca4:	4618      	mov	r0, r3
 8001ca6:	f7ff ff5d 	bl	8001b64 <__NVIC_SetPriority>
}
 8001caa:	bf00      	nop
 8001cac:	3718      	adds	r7, #24
 8001cae:	46bd      	mov	sp, r7
 8001cb0:	bd80      	pop	{r7, pc}

08001cb2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001cb2:	b580      	push	{r7, lr}
 8001cb4:	b082      	sub	sp, #8
 8001cb6:	af00      	add	r7, sp, #0
 8001cb8:	4603      	mov	r3, r0
 8001cba:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001cbc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001cc0:	4618      	mov	r0, r3
 8001cc2:	f7ff ff31 	bl	8001b28 <__NVIC_EnableIRQ>
}
 8001cc6:	bf00      	nop
 8001cc8:	3708      	adds	r7, #8
 8001cca:	46bd      	mov	sp, r7
 8001ccc:	bd80      	pop	{r7, pc}

08001cce <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001cce:	b580      	push	{r7, lr}
 8001cd0:	b082      	sub	sp, #8
 8001cd2:	af00      	add	r7, sp, #0
 8001cd4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001cd6:	6878      	ldr	r0, [r7, #4]
 8001cd8:	f7ff ffa2 	bl	8001c20 <SysTick_Config>
 8001cdc:	4603      	mov	r3, r0
}
 8001cde:	4618      	mov	r0, r3
 8001ce0:	3708      	adds	r7, #8
 8001ce2:	46bd      	mov	sp, r7
 8001ce4:	bd80      	pop	{r7, pc}
	...

08001ce8 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001ce8:	b580      	push	{r7, lr}
 8001cea:	b086      	sub	sp, #24
 8001cec:	af00      	add	r7, sp, #0
 8001cee:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001cf0:	2300      	movs	r3, #0
 8001cf2:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8001cf4:	f7ff f98c 	bl	8001010 <HAL_GetTick>
 8001cf8:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	2b00      	cmp	r3, #0
 8001cfe:	d101      	bne.n	8001d04 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8001d00:	2301      	movs	r3, #1
 8001d02:	e099      	b.n	8001e38 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	2200      	movs	r2, #0
 8001d08:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	2202      	movs	r2, #2
 8001d10:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	681a      	ldr	r2, [r3, #0]
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	f022 0201 	bic.w	r2, r2, #1
 8001d22:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001d24:	e00f      	b.n	8001d46 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001d26:	f7ff f973 	bl	8001010 <HAL_GetTick>
 8001d2a:	4602      	mov	r2, r0
 8001d2c:	693b      	ldr	r3, [r7, #16]
 8001d2e:	1ad3      	subs	r3, r2, r3
 8001d30:	2b05      	cmp	r3, #5
 8001d32:	d908      	bls.n	8001d46 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	2220      	movs	r2, #32
 8001d38:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	2203      	movs	r2, #3
 8001d3e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8001d42:	2303      	movs	r3, #3
 8001d44:	e078      	b.n	8001e38 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	f003 0301 	and.w	r3, r3, #1
 8001d50:	2b00      	cmp	r3, #0
 8001d52:	d1e8      	bne.n	8001d26 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001d5c:	697a      	ldr	r2, [r7, #20]
 8001d5e:	4b38      	ldr	r3, [pc, #224]	; (8001e40 <HAL_DMA_Init+0x158>)
 8001d60:	4013      	ands	r3, r2
 8001d62:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	685a      	ldr	r2, [r3, #4]
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	689b      	ldr	r3, [r3, #8]
 8001d6c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001d72:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	691b      	ldr	r3, [r3, #16]
 8001d78:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001d7e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	699b      	ldr	r3, [r3, #24]
 8001d84:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001d8a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	6a1b      	ldr	r3, [r3, #32]
 8001d90:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001d92:	697a      	ldr	r2, [r7, #20]
 8001d94:	4313      	orrs	r3, r2
 8001d96:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d9c:	2b04      	cmp	r3, #4
 8001d9e:	d107      	bne.n	8001db0 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001da8:	4313      	orrs	r3, r2
 8001daa:	697a      	ldr	r2, [r7, #20]
 8001dac:	4313      	orrs	r3, r2
 8001dae:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	697a      	ldr	r2, [r7, #20]
 8001db6:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	695b      	ldr	r3, [r3, #20]
 8001dbe:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001dc0:	697b      	ldr	r3, [r7, #20]
 8001dc2:	f023 0307 	bic.w	r3, r3, #7
 8001dc6:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001dcc:	697a      	ldr	r2, [r7, #20]
 8001dce:	4313      	orrs	r3, r2
 8001dd0:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001dd6:	2b04      	cmp	r3, #4
 8001dd8:	d117      	bne.n	8001e0a <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001dde:	697a      	ldr	r2, [r7, #20]
 8001de0:	4313      	orrs	r3, r2
 8001de2:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001de8:	2b00      	cmp	r3, #0
 8001dea:	d00e      	beq.n	8001e0a <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001dec:	6878      	ldr	r0, [r7, #4]
 8001dee:	f000 fa6f 	bl	80022d0 <DMA_CheckFifoParam>
 8001df2:	4603      	mov	r3, r0
 8001df4:	2b00      	cmp	r3, #0
 8001df6:	d008      	beq.n	8001e0a <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	2240      	movs	r2, #64	; 0x40
 8001dfc:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	2201      	movs	r2, #1
 8001e02:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8001e06:	2301      	movs	r3, #1
 8001e08:	e016      	b.n	8001e38 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	697a      	ldr	r2, [r7, #20]
 8001e10:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001e12:	6878      	ldr	r0, [r7, #4]
 8001e14:	f000 fa26 	bl	8002264 <DMA_CalcBaseAndBitshift>
 8001e18:	4603      	mov	r3, r0
 8001e1a:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001e20:	223f      	movs	r2, #63	; 0x3f
 8001e22:	409a      	lsls	r2, r3
 8001e24:	68fb      	ldr	r3, [r7, #12]
 8001e26:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	2200      	movs	r2, #0
 8001e2c:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	2201      	movs	r2, #1
 8001e32:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8001e36:	2300      	movs	r3, #0
}
 8001e38:	4618      	mov	r0, r3
 8001e3a:	3718      	adds	r7, #24
 8001e3c:	46bd      	mov	sp, r7
 8001e3e:	bd80      	pop	{r7, pc}
 8001e40:	f010803f 	.word	0xf010803f

08001e44 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001e44:	b580      	push	{r7, lr}
 8001e46:	b086      	sub	sp, #24
 8001e48:	af00      	add	r7, sp, #0
 8001e4a:	60f8      	str	r0, [r7, #12]
 8001e4c:	60b9      	str	r1, [r7, #8]
 8001e4e:	607a      	str	r2, [r7, #4]
 8001e50:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001e52:	2300      	movs	r3, #0
 8001e54:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001e56:	68fb      	ldr	r3, [r7, #12]
 8001e58:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e5a:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8001e5c:	68fb      	ldr	r3, [r7, #12]
 8001e5e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8001e62:	2b01      	cmp	r3, #1
 8001e64:	d101      	bne.n	8001e6a <HAL_DMA_Start_IT+0x26>
 8001e66:	2302      	movs	r3, #2
 8001e68:	e040      	b.n	8001eec <HAL_DMA_Start_IT+0xa8>
 8001e6a:	68fb      	ldr	r3, [r7, #12]
 8001e6c:	2201      	movs	r2, #1
 8001e6e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8001e72:	68fb      	ldr	r3, [r7, #12]
 8001e74:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001e78:	b2db      	uxtb	r3, r3
 8001e7a:	2b01      	cmp	r3, #1
 8001e7c:	d12f      	bne.n	8001ede <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001e7e:	68fb      	ldr	r3, [r7, #12]
 8001e80:	2202      	movs	r2, #2
 8001e82:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001e86:	68fb      	ldr	r3, [r7, #12]
 8001e88:	2200      	movs	r2, #0
 8001e8a:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001e8c:	683b      	ldr	r3, [r7, #0]
 8001e8e:	687a      	ldr	r2, [r7, #4]
 8001e90:	68b9      	ldr	r1, [r7, #8]
 8001e92:	68f8      	ldr	r0, [r7, #12]
 8001e94:	f000 f9b8 	bl	8002208 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001e98:	68fb      	ldr	r3, [r7, #12]
 8001e9a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001e9c:	223f      	movs	r2, #63	; 0x3f
 8001e9e:	409a      	lsls	r2, r3
 8001ea0:	693b      	ldr	r3, [r7, #16]
 8001ea2:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8001ea4:	68fb      	ldr	r3, [r7, #12]
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	681a      	ldr	r2, [r3, #0]
 8001eaa:	68fb      	ldr	r3, [r7, #12]
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	f042 0216 	orr.w	r2, r2, #22
 8001eb2:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8001eb4:	68fb      	ldr	r3, [r7, #12]
 8001eb6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001eb8:	2b00      	cmp	r3, #0
 8001eba:	d007      	beq.n	8001ecc <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8001ebc:	68fb      	ldr	r3, [r7, #12]
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	681a      	ldr	r2, [r3, #0]
 8001ec2:	68fb      	ldr	r3, [r7, #12]
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	f042 0208 	orr.w	r2, r2, #8
 8001eca:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001ecc:	68fb      	ldr	r3, [r7, #12]
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	681a      	ldr	r2, [r3, #0]
 8001ed2:	68fb      	ldr	r3, [r7, #12]
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	f042 0201 	orr.w	r2, r2, #1
 8001eda:	601a      	str	r2, [r3, #0]
 8001edc:	e005      	b.n	8001eea <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8001ede:	68fb      	ldr	r3, [r7, #12]
 8001ee0:	2200      	movs	r2, #0
 8001ee2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8001ee6:	2302      	movs	r3, #2
 8001ee8:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8001eea:	7dfb      	ldrb	r3, [r7, #23]
}
 8001eec:	4618      	mov	r0, r3
 8001eee:	3718      	adds	r7, #24
 8001ef0:	46bd      	mov	sp, r7
 8001ef2:	bd80      	pop	{r7, pc}

08001ef4 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001ef4:	b580      	push	{r7, lr}
 8001ef6:	b086      	sub	sp, #24
 8001ef8:	af00      	add	r7, sp, #0
 8001efa:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8001efc:	2300      	movs	r3, #0
 8001efe:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8001f00:	4b92      	ldr	r3, [pc, #584]	; (800214c <HAL_DMA_IRQHandler+0x258>)
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	4a92      	ldr	r2, [pc, #584]	; (8002150 <HAL_DMA_IRQHandler+0x25c>)
 8001f06:	fba2 2303 	umull	r2, r3, r2, r3
 8001f0a:	0a9b      	lsrs	r3, r3, #10
 8001f0c:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f12:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8001f14:	693b      	ldr	r3, [r7, #16]
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001f1e:	2208      	movs	r2, #8
 8001f20:	409a      	lsls	r2, r3
 8001f22:	68fb      	ldr	r3, [r7, #12]
 8001f24:	4013      	ands	r3, r2
 8001f26:	2b00      	cmp	r3, #0
 8001f28:	d01a      	beq.n	8001f60 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	f003 0304 	and.w	r3, r3, #4
 8001f34:	2b00      	cmp	r3, #0
 8001f36:	d013      	beq.n	8001f60 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	681a      	ldr	r2, [r3, #0]
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	f022 0204 	bic.w	r2, r2, #4
 8001f46:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001f4c:	2208      	movs	r2, #8
 8001f4e:	409a      	lsls	r2, r3
 8001f50:	693b      	ldr	r3, [r7, #16]
 8001f52:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001f58:	f043 0201 	orr.w	r2, r3, #1
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001f64:	2201      	movs	r2, #1
 8001f66:	409a      	lsls	r2, r3
 8001f68:	68fb      	ldr	r3, [r7, #12]
 8001f6a:	4013      	ands	r3, r2
 8001f6c:	2b00      	cmp	r3, #0
 8001f6e:	d012      	beq.n	8001f96 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	695b      	ldr	r3, [r3, #20]
 8001f76:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001f7a:	2b00      	cmp	r3, #0
 8001f7c:	d00b      	beq.n	8001f96 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001f82:	2201      	movs	r2, #1
 8001f84:	409a      	lsls	r2, r3
 8001f86:	693b      	ldr	r3, [r7, #16]
 8001f88:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001f8e:	f043 0202 	orr.w	r2, r3, #2
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001f9a:	2204      	movs	r2, #4
 8001f9c:	409a      	lsls	r2, r3
 8001f9e:	68fb      	ldr	r3, [r7, #12]
 8001fa0:	4013      	ands	r3, r2
 8001fa2:	2b00      	cmp	r3, #0
 8001fa4:	d012      	beq.n	8001fcc <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	f003 0302 	and.w	r3, r3, #2
 8001fb0:	2b00      	cmp	r3, #0
 8001fb2:	d00b      	beq.n	8001fcc <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001fb8:	2204      	movs	r2, #4
 8001fba:	409a      	lsls	r2, r3
 8001fbc:	693b      	ldr	r3, [r7, #16]
 8001fbe:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001fc4:	f043 0204 	orr.w	r2, r3, #4
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001fd0:	2210      	movs	r2, #16
 8001fd2:	409a      	lsls	r2, r3
 8001fd4:	68fb      	ldr	r3, [r7, #12]
 8001fd6:	4013      	ands	r3, r2
 8001fd8:	2b00      	cmp	r3, #0
 8001fda:	d043      	beq.n	8002064 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	f003 0308 	and.w	r3, r3, #8
 8001fe6:	2b00      	cmp	r3, #0
 8001fe8:	d03c      	beq.n	8002064 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001fee:	2210      	movs	r2, #16
 8001ff0:	409a      	lsls	r2, r3
 8001ff2:	693b      	ldr	r3, [r7, #16]
 8001ff4:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002000:	2b00      	cmp	r3, #0
 8002002:	d018      	beq.n	8002036 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800200e:	2b00      	cmp	r3, #0
 8002010:	d108      	bne.n	8002024 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002016:	2b00      	cmp	r3, #0
 8002018:	d024      	beq.n	8002064 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800201e:	6878      	ldr	r0, [r7, #4]
 8002020:	4798      	blx	r3
 8002022:	e01f      	b.n	8002064 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002028:	2b00      	cmp	r3, #0
 800202a:	d01b      	beq.n	8002064 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002030:	6878      	ldr	r0, [r7, #4]
 8002032:	4798      	blx	r3
 8002034:	e016      	b.n	8002064 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002040:	2b00      	cmp	r3, #0
 8002042:	d107      	bne.n	8002054 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	681a      	ldr	r2, [r3, #0]
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	f022 0208 	bic.w	r2, r2, #8
 8002052:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002058:	2b00      	cmp	r3, #0
 800205a:	d003      	beq.n	8002064 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002060:	6878      	ldr	r0, [r7, #4]
 8002062:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002068:	2220      	movs	r2, #32
 800206a:	409a      	lsls	r2, r3
 800206c:	68fb      	ldr	r3, [r7, #12]
 800206e:	4013      	ands	r3, r2
 8002070:	2b00      	cmp	r3, #0
 8002072:	f000 808e 	beq.w	8002192 <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	f003 0310 	and.w	r3, r3, #16
 8002080:	2b00      	cmp	r3, #0
 8002082:	f000 8086 	beq.w	8002192 <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800208a:	2220      	movs	r2, #32
 800208c:	409a      	lsls	r2, r3
 800208e:	693b      	ldr	r3, [r7, #16]
 8002090:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002098:	b2db      	uxtb	r3, r3
 800209a:	2b05      	cmp	r3, #5
 800209c:	d136      	bne.n	800210c <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	681a      	ldr	r2, [r3, #0]
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	f022 0216 	bic.w	r2, r2, #22
 80020ac:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	695a      	ldr	r2, [r3, #20]
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80020bc:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020c2:	2b00      	cmp	r3, #0
 80020c4:	d103      	bne.n	80020ce <HAL_DMA_IRQHandler+0x1da>
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80020ca:	2b00      	cmp	r3, #0
 80020cc:	d007      	beq.n	80020de <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	681a      	ldr	r2, [r3, #0]
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	f022 0208 	bic.w	r2, r2, #8
 80020dc:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80020e2:	223f      	movs	r2, #63	; 0x3f
 80020e4:	409a      	lsls	r2, r3
 80020e6:	693b      	ldr	r3, [r7, #16]
 80020e8:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	2200      	movs	r2, #0
 80020ee:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	2201      	movs	r2, #1
 80020f6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80020fe:	2b00      	cmp	r3, #0
 8002100:	d07d      	beq.n	80021fe <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002106:	6878      	ldr	r0, [r7, #4]
 8002108:	4798      	blx	r3
        }
        return;
 800210a:	e078      	b.n	80021fe <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002116:	2b00      	cmp	r3, #0
 8002118:	d01c      	beq.n	8002154 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002124:	2b00      	cmp	r3, #0
 8002126:	d108      	bne.n	800213a <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800212c:	2b00      	cmp	r3, #0
 800212e:	d030      	beq.n	8002192 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002134:	6878      	ldr	r0, [r7, #4]
 8002136:	4798      	blx	r3
 8002138:	e02b      	b.n	8002192 <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800213e:	2b00      	cmp	r3, #0
 8002140:	d027      	beq.n	8002192 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002146:	6878      	ldr	r0, [r7, #4]
 8002148:	4798      	blx	r3
 800214a:	e022      	b.n	8002192 <HAL_DMA_IRQHandler+0x29e>
 800214c:	20000000 	.word	0x20000000
 8002150:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800215e:	2b00      	cmp	r3, #0
 8002160:	d10f      	bne.n	8002182 <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	681a      	ldr	r2, [r3, #0]
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	f022 0210 	bic.w	r2, r2, #16
 8002170:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	2200      	movs	r2, #0
 8002176:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	2201      	movs	r2, #1
 800217e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002186:	2b00      	cmp	r3, #0
 8002188:	d003      	beq.n	8002192 <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800218e:	6878      	ldr	r0, [r7, #4]
 8002190:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002196:	2b00      	cmp	r3, #0
 8002198:	d032      	beq.n	8002200 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800219e:	f003 0301 	and.w	r3, r3, #1
 80021a2:	2b00      	cmp	r3, #0
 80021a4:	d022      	beq.n	80021ec <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	2205      	movs	r2, #5
 80021aa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	681a      	ldr	r2, [r3, #0]
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	f022 0201 	bic.w	r2, r2, #1
 80021bc:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80021be:	68bb      	ldr	r3, [r7, #8]
 80021c0:	3301      	adds	r3, #1
 80021c2:	60bb      	str	r3, [r7, #8]
 80021c4:	697a      	ldr	r2, [r7, #20]
 80021c6:	429a      	cmp	r2, r3
 80021c8:	d307      	bcc.n	80021da <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	f003 0301 	and.w	r3, r3, #1
 80021d4:	2b00      	cmp	r3, #0
 80021d6:	d1f2      	bne.n	80021be <HAL_DMA_IRQHandler+0x2ca>
 80021d8:	e000      	b.n	80021dc <HAL_DMA_IRQHandler+0x2e8>
          break;
 80021da:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	2200      	movs	r2, #0
 80021e0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	2201      	movs	r2, #1
 80021e8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80021f0:	2b00      	cmp	r3, #0
 80021f2:	d005      	beq.n	8002200 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80021f8:	6878      	ldr	r0, [r7, #4]
 80021fa:	4798      	blx	r3
 80021fc:	e000      	b.n	8002200 <HAL_DMA_IRQHandler+0x30c>
        return;
 80021fe:	bf00      	nop
    }
  }
}
 8002200:	3718      	adds	r7, #24
 8002202:	46bd      	mov	sp, r7
 8002204:	bd80      	pop	{r7, pc}
 8002206:	bf00      	nop

08002208 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002208:	b480      	push	{r7}
 800220a:	b085      	sub	sp, #20
 800220c:	af00      	add	r7, sp, #0
 800220e:	60f8      	str	r0, [r7, #12]
 8002210:	60b9      	str	r1, [r7, #8]
 8002212:	607a      	str	r2, [r7, #4]
 8002214:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8002216:	68fb      	ldr	r3, [r7, #12]
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	681a      	ldr	r2, [r3, #0]
 800221c:	68fb      	ldr	r3, [r7, #12]
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002224:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8002226:	68fb      	ldr	r3, [r7, #12]
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	683a      	ldr	r2, [r7, #0]
 800222c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800222e:	68fb      	ldr	r3, [r7, #12]
 8002230:	689b      	ldr	r3, [r3, #8]
 8002232:	2b40      	cmp	r3, #64	; 0x40
 8002234:	d108      	bne.n	8002248 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8002236:	68fb      	ldr	r3, [r7, #12]
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	687a      	ldr	r2, [r7, #4]
 800223c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800223e:	68fb      	ldr	r3, [r7, #12]
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	68ba      	ldr	r2, [r7, #8]
 8002244:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8002246:	e007      	b.n	8002258 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8002248:	68fb      	ldr	r3, [r7, #12]
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	68ba      	ldr	r2, [r7, #8]
 800224e:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8002250:	68fb      	ldr	r3, [r7, #12]
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	687a      	ldr	r2, [r7, #4]
 8002256:	60da      	str	r2, [r3, #12]
}
 8002258:	bf00      	nop
 800225a:	3714      	adds	r7, #20
 800225c:	46bd      	mov	sp, r7
 800225e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002262:	4770      	bx	lr

08002264 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002264:	b480      	push	{r7}
 8002266:	b085      	sub	sp, #20
 8002268:	af00      	add	r7, sp, #0
 800226a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	b2db      	uxtb	r3, r3
 8002272:	3b10      	subs	r3, #16
 8002274:	4a14      	ldr	r2, [pc, #80]	; (80022c8 <DMA_CalcBaseAndBitshift+0x64>)
 8002276:	fba2 2303 	umull	r2, r3, r2, r3
 800227a:	091b      	lsrs	r3, r3, #4
 800227c:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800227e:	4a13      	ldr	r2, [pc, #76]	; (80022cc <DMA_CalcBaseAndBitshift+0x68>)
 8002280:	68fb      	ldr	r3, [r7, #12]
 8002282:	4413      	add	r3, r2
 8002284:	781b      	ldrb	r3, [r3, #0]
 8002286:	461a      	mov	r2, r3
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 800228c:	68fb      	ldr	r3, [r7, #12]
 800228e:	2b03      	cmp	r3, #3
 8002290:	d909      	bls.n	80022a6 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800229a:	f023 0303 	bic.w	r3, r3, #3
 800229e:	1d1a      	adds	r2, r3, #4
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	659a      	str	r2, [r3, #88]	; 0x58
 80022a4:	e007      	b.n	80022b6 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80022ae:	f023 0303 	bic.w	r3, r3, #3
 80022b2:	687a      	ldr	r2, [r7, #4]
 80022b4:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80022ba:	4618      	mov	r0, r3
 80022bc:	3714      	adds	r7, #20
 80022be:	46bd      	mov	sp, r7
 80022c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022c4:	4770      	bx	lr
 80022c6:	bf00      	nop
 80022c8:	aaaaaaab 	.word	0xaaaaaaab
 80022cc:	08005188 	.word	0x08005188

080022d0 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80022d0:	b480      	push	{r7}
 80022d2:	b085      	sub	sp, #20
 80022d4:	af00      	add	r7, sp, #0
 80022d6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80022d8:	2300      	movs	r3, #0
 80022da:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80022e0:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	699b      	ldr	r3, [r3, #24]
 80022e6:	2b00      	cmp	r3, #0
 80022e8:	d11f      	bne.n	800232a <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80022ea:	68bb      	ldr	r3, [r7, #8]
 80022ec:	2b03      	cmp	r3, #3
 80022ee:	d855      	bhi.n	800239c <DMA_CheckFifoParam+0xcc>
 80022f0:	a201      	add	r2, pc, #4	; (adr r2, 80022f8 <DMA_CheckFifoParam+0x28>)
 80022f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80022f6:	bf00      	nop
 80022f8:	08002309 	.word	0x08002309
 80022fc:	0800231b 	.word	0x0800231b
 8002300:	08002309 	.word	0x08002309
 8002304:	0800239d 	.word	0x0800239d
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800230c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002310:	2b00      	cmp	r3, #0
 8002312:	d045      	beq.n	80023a0 <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 8002314:	2301      	movs	r3, #1
 8002316:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002318:	e042      	b.n	80023a0 <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800231e:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002322:	d13f      	bne.n	80023a4 <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 8002324:	2301      	movs	r3, #1
 8002326:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002328:	e03c      	b.n	80023a4 <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	699b      	ldr	r3, [r3, #24]
 800232e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002332:	d121      	bne.n	8002378 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8002334:	68bb      	ldr	r3, [r7, #8]
 8002336:	2b03      	cmp	r3, #3
 8002338:	d836      	bhi.n	80023a8 <DMA_CheckFifoParam+0xd8>
 800233a:	a201      	add	r2, pc, #4	; (adr r2, 8002340 <DMA_CheckFifoParam+0x70>)
 800233c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002340:	08002351 	.word	0x08002351
 8002344:	08002357 	.word	0x08002357
 8002348:	08002351 	.word	0x08002351
 800234c:	08002369 	.word	0x08002369
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002350:	2301      	movs	r3, #1
 8002352:	73fb      	strb	r3, [r7, #15]
      break;
 8002354:	e02f      	b.n	80023b6 <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800235a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800235e:	2b00      	cmp	r3, #0
 8002360:	d024      	beq.n	80023ac <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 8002362:	2301      	movs	r3, #1
 8002364:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002366:	e021      	b.n	80023ac <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800236c:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002370:	d11e      	bne.n	80023b0 <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 8002372:	2301      	movs	r3, #1
 8002374:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8002376:	e01b      	b.n	80023b0 <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002378:	68bb      	ldr	r3, [r7, #8]
 800237a:	2b02      	cmp	r3, #2
 800237c:	d902      	bls.n	8002384 <DMA_CheckFifoParam+0xb4>
 800237e:	2b03      	cmp	r3, #3
 8002380:	d003      	beq.n	800238a <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002382:	e018      	b.n	80023b6 <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 8002384:	2301      	movs	r3, #1
 8002386:	73fb      	strb	r3, [r7, #15]
      break;
 8002388:	e015      	b.n	80023b6 <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800238e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002392:	2b00      	cmp	r3, #0
 8002394:	d00e      	beq.n	80023b4 <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 8002396:	2301      	movs	r3, #1
 8002398:	73fb      	strb	r3, [r7, #15]
      break;
 800239a:	e00b      	b.n	80023b4 <DMA_CheckFifoParam+0xe4>
      break;
 800239c:	bf00      	nop
 800239e:	e00a      	b.n	80023b6 <DMA_CheckFifoParam+0xe6>
      break;
 80023a0:	bf00      	nop
 80023a2:	e008      	b.n	80023b6 <DMA_CheckFifoParam+0xe6>
      break;
 80023a4:	bf00      	nop
 80023a6:	e006      	b.n	80023b6 <DMA_CheckFifoParam+0xe6>
      break;
 80023a8:	bf00      	nop
 80023aa:	e004      	b.n	80023b6 <DMA_CheckFifoParam+0xe6>
      break;
 80023ac:	bf00      	nop
 80023ae:	e002      	b.n	80023b6 <DMA_CheckFifoParam+0xe6>
      break;   
 80023b0:	bf00      	nop
 80023b2:	e000      	b.n	80023b6 <DMA_CheckFifoParam+0xe6>
      break;
 80023b4:	bf00      	nop
    }
  } 
  
  return status; 
 80023b6:	7bfb      	ldrb	r3, [r7, #15]
}
 80023b8:	4618      	mov	r0, r3
 80023ba:	3714      	adds	r7, #20
 80023bc:	46bd      	mov	sp, r7
 80023be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023c2:	4770      	bx	lr

080023c4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80023c4:	b480      	push	{r7}
 80023c6:	b089      	sub	sp, #36	; 0x24
 80023c8:	af00      	add	r7, sp, #0
 80023ca:	6078      	str	r0, [r7, #4]
 80023cc:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80023ce:	2300      	movs	r3, #0
 80023d0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80023d2:	2300      	movs	r3, #0
 80023d4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80023d6:	2300      	movs	r3, #0
 80023d8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80023da:	2300      	movs	r3, #0
 80023dc:	61fb      	str	r3, [r7, #28]
 80023de:	e165      	b.n	80026ac <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80023e0:	2201      	movs	r2, #1
 80023e2:	69fb      	ldr	r3, [r7, #28]
 80023e4:	fa02 f303 	lsl.w	r3, r2, r3
 80023e8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80023ea:	683b      	ldr	r3, [r7, #0]
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	697a      	ldr	r2, [r7, #20]
 80023f0:	4013      	ands	r3, r2
 80023f2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80023f4:	693a      	ldr	r2, [r7, #16]
 80023f6:	697b      	ldr	r3, [r7, #20]
 80023f8:	429a      	cmp	r2, r3
 80023fa:	f040 8154 	bne.w	80026a6 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80023fe:	683b      	ldr	r3, [r7, #0]
 8002400:	685b      	ldr	r3, [r3, #4]
 8002402:	2b01      	cmp	r3, #1
 8002404:	d00b      	beq.n	800241e <HAL_GPIO_Init+0x5a>
 8002406:	683b      	ldr	r3, [r7, #0]
 8002408:	685b      	ldr	r3, [r3, #4]
 800240a:	2b02      	cmp	r3, #2
 800240c:	d007      	beq.n	800241e <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800240e:	683b      	ldr	r3, [r7, #0]
 8002410:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002412:	2b11      	cmp	r3, #17
 8002414:	d003      	beq.n	800241e <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002416:	683b      	ldr	r3, [r7, #0]
 8002418:	685b      	ldr	r3, [r3, #4]
 800241a:	2b12      	cmp	r3, #18
 800241c:	d130      	bne.n	8002480 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	689b      	ldr	r3, [r3, #8]
 8002422:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002424:	69fb      	ldr	r3, [r7, #28]
 8002426:	005b      	lsls	r3, r3, #1
 8002428:	2203      	movs	r2, #3
 800242a:	fa02 f303 	lsl.w	r3, r2, r3
 800242e:	43db      	mvns	r3, r3
 8002430:	69ba      	ldr	r2, [r7, #24]
 8002432:	4013      	ands	r3, r2
 8002434:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002436:	683b      	ldr	r3, [r7, #0]
 8002438:	68da      	ldr	r2, [r3, #12]
 800243a:	69fb      	ldr	r3, [r7, #28]
 800243c:	005b      	lsls	r3, r3, #1
 800243e:	fa02 f303 	lsl.w	r3, r2, r3
 8002442:	69ba      	ldr	r2, [r7, #24]
 8002444:	4313      	orrs	r3, r2
 8002446:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	69ba      	ldr	r2, [r7, #24]
 800244c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	685b      	ldr	r3, [r3, #4]
 8002452:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002454:	2201      	movs	r2, #1
 8002456:	69fb      	ldr	r3, [r7, #28]
 8002458:	fa02 f303 	lsl.w	r3, r2, r3
 800245c:	43db      	mvns	r3, r3
 800245e:	69ba      	ldr	r2, [r7, #24]
 8002460:	4013      	ands	r3, r2
 8002462:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8002464:	683b      	ldr	r3, [r7, #0]
 8002466:	685b      	ldr	r3, [r3, #4]
 8002468:	091b      	lsrs	r3, r3, #4
 800246a:	f003 0201 	and.w	r2, r3, #1
 800246e:	69fb      	ldr	r3, [r7, #28]
 8002470:	fa02 f303 	lsl.w	r3, r2, r3
 8002474:	69ba      	ldr	r2, [r7, #24]
 8002476:	4313      	orrs	r3, r2
 8002478:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	69ba      	ldr	r2, [r7, #24]
 800247e:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	68db      	ldr	r3, [r3, #12]
 8002484:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002486:	69fb      	ldr	r3, [r7, #28]
 8002488:	005b      	lsls	r3, r3, #1
 800248a:	2203      	movs	r2, #3
 800248c:	fa02 f303 	lsl.w	r3, r2, r3
 8002490:	43db      	mvns	r3, r3
 8002492:	69ba      	ldr	r2, [r7, #24]
 8002494:	4013      	ands	r3, r2
 8002496:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002498:	683b      	ldr	r3, [r7, #0]
 800249a:	689a      	ldr	r2, [r3, #8]
 800249c:	69fb      	ldr	r3, [r7, #28]
 800249e:	005b      	lsls	r3, r3, #1
 80024a0:	fa02 f303 	lsl.w	r3, r2, r3
 80024a4:	69ba      	ldr	r2, [r7, #24]
 80024a6:	4313      	orrs	r3, r2
 80024a8:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	69ba      	ldr	r2, [r7, #24]
 80024ae:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80024b0:	683b      	ldr	r3, [r7, #0]
 80024b2:	685b      	ldr	r3, [r3, #4]
 80024b4:	2b02      	cmp	r3, #2
 80024b6:	d003      	beq.n	80024c0 <HAL_GPIO_Init+0xfc>
 80024b8:	683b      	ldr	r3, [r7, #0]
 80024ba:	685b      	ldr	r3, [r3, #4]
 80024bc:	2b12      	cmp	r3, #18
 80024be:	d123      	bne.n	8002508 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80024c0:	69fb      	ldr	r3, [r7, #28]
 80024c2:	08da      	lsrs	r2, r3, #3
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	3208      	adds	r2, #8
 80024c8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80024cc:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80024ce:	69fb      	ldr	r3, [r7, #28]
 80024d0:	f003 0307 	and.w	r3, r3, #7
 80024d4:	009b      	lsls	r3, r3, #2
 80024d6:	220f      	movs	r2, #15
 80024d8:	fa02 f303 	lsl.w	r3, r2, r3
 80024dc:	43db      	mvns	r3, r3
 80024de:	69ba      	ldr	r2, [r7, #24]
 80024e0:	4013      	ands	r3, r2
 80024e2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80024e4:	683b      	ldr	r3, [r7, #0]
 80024e6:	691a      	ldr	r2, [r3, #16]
 80024e8:	69fb      	ldr	r3, [r7, #28]
 80024ea:	f003 0307 	and.w	r3, r3, #7
 80024ee:	009b      	lsls	r3, r3, #2
 80024f0:	fa02 f303 	lsl.w	r3, r2, r3
 80024f4:	69ba      	ldr	r2, [r7, #24]
 80024f6:	4313      	orrs	r3, r2
 80024f8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80024fa:	69fb      	ldr	r3, [r7, #28]
 80024fc:	08da      	lsrs	r2, r3, #3
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	3208      	adds	r2, #8
 8002502:	69b9      	ldr	r1, [r7, #24]
 8002504:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800250e:	69fb      	ldr	r3, [r7, #28]
 8002510:	005b      	lsls	r3, r3, #1
 8002512:	2203      	movs	r2, #3
 8002514:	fa02 f303 	lsl.w	r3, r2, r3
 8002518:	43db      	mvns	r3, r3
 800251a:	69ba      	ldr	r2, [r7, #24]
 800251c:	4013      	ands	r3, r2
 800251e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002520:	683b      	ldr	r3, [r7, #0]
 8002522:	685b      	ldr	r3, [r3, #4]
 8002524:	f003 0203 	and.w	r2, r3, #3
 8002528:	69fb      	ldr	r3, [r7, #28]
 800252a:	005b      	lsls	r3, r3, #1
 800252c:	fa02 f303 	lsl.w	r3, r2, r3
 8002530:	69ba      	ldr	r2, [r7, #24]
 8002532:	4313      	orrs	r3, r2
 8002534:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	69ba      	ldr	r2, [r7, #24]
 800253a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800253c:	683b      	ldr	r3, [r7, #0]
 800253e:	685b      	ldr	r3, [r3, #4]
 8002540:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002544:	2b00      	cmp	r3, #0
 8002546:	f000 80ae 	beq.w	80026a6 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800254a:	2300      	movs	r3, #0
 800254c:	60fb      	str	r3, [r7, #12]
 800254e:	4b5c      	ldr	r3, [pc, #368]	; (80026c0 <HAL_GPIO_Init+0x2fc>)
 8002550:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002552:	4a5b      	ldr	r2, [pc, #364]	; (80026c0 <HAL_GPIO_Init+0x2fc>)
 8002554:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002558:	6453      	str	r3, [r2, #68]	; 0x44
 800255a:	4b59      	ldr	r3, [pc, #356]	; (80026c0 <HAL_GPIO_Init+0x2fc>)
 800255c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800255e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002562:	60fb      	str	r3, [r7, #12]
 8002564:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002566:	4a57      	ldr	r2, [pc, #348]	; (80026c4 <HAL_GPIO_Init+0x300>)
 8002568:	69fb      	ldr	r3, [r7, #28]
 800256a:	089b      	lsrs	r3, r3, #2
 800256c:	3302      	adds	r3, #2
 800256e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002572:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002574:	69fb      	ldr	r3, [r7, #28]
 8002576:	f003 0303 	and.w	r3, r3, #3
 800257a:	009b      	lsls	r3, r3, #2
 800257c:	220f      	movs	r2, #15
 800257e:	fa02 f303 	lsl.w	r3, r2, r3
 8002582:	43db      	mvns	r3, r3
 8002584:	69ba      	ldr	r2, [r7, #24]
 8002586:	4013      	ands	r3, r2
 8002588:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	4a4e      	ldr	r2, [pc, #312]	; (80026c8 <HAL_GPIO_Init+0x304>)
 800258e:	4293      	cmp	r3, r2
 8002590:	d025      	beq.n	80025de <HAL_GPIO_Init+0x21a>
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	4a4d      	ldr	r2, [pc, #308]	; (80026cc <HAL_GPIO_Init+0x308>)
 8002596:	4293      	cmp	r3, r2
 8002598:	d01f      	beq.n	80025da <HAL_GPIO_Init+0x216>
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	4a4c      	ldr	r2, [pc, #304]	; (80026d0 <HAL_GPIO_Init+0x30c>)
 800259e:	4293      	cmp	r3, r2
 80025a0:	d019      	beq.n	80025d6 <HAL_GPIO_Init+0x212>
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	4a4b      	ldr	r2, [pc, #300]	; (80026d4 <HAL_GPIO_Init+0x310>)
 80025a6:	4293      	cmp	r3, r2
 80025a8:	d013      	beq.n	80025d2 <HAL_GPIO_Init+0x20e>
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	4a4a      	ldr	r2, [pc, #296]	; (80026d8 <HAL_GPIO_Init+0x314>)
 80025ae:	4293      	cmp	r3, r2
 80025b0:	d00d      	beq.n	80025ce <HAL_GPIO_Init+0x20a>
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	4a49      	ldr	r2, [pc, #292]	; (80026dc <HAL_GPIO_Init+0x318>)
 80025b6:	4293      	cmp	r3, r2
 80025b8:	d007      	beq.n	80025ca <HAL_GPIO_Init+0x206>
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	4a48      	ldr	r2, [pc, #288]	; (80026e0 <HAL_GPIO_Init+0x31c>)
 80025be:	4293      	cmp	r3, r2
 80025c0:	d101      	bne.n	80025c6 <HAL_GPIO_Init+0x202>
 80025c2:	2306      	movs	r3, #6
 80025c4:	e00c      	b.n	80025e0 <HAL_GPIO_Init+0x21c>
 80025c6:	2307      	movs	r3, #7
 80025c8:	e00a      	b.n	80025e0 <HAL_GPIO_Init+0x21c>
 80025ca:	2305      	movs	r3, #5
 80025cc:	e008      	b.n	80025e0 <HAL_GPIO_Init+0x21c>
 80025ce:	2304      	movs	r3, #4
 80025d0:	e006      	b.n	80025e0 <HAL_GPIO_Init+0x21c>
 80025d2:	2303      	movs	r3, #3
 80025d4:	e004      	b.n	80025e0 <HAL_GPIO_Init+0x21c>
 80025d6:	2302      	movs	r3, #2
 80025d8:	e002      	b.n	80025e0 <HAL_GPIO_Init+0x21c>
 80025da:	2301      	movs	r3, #1
 80025dc:	e000      	b.n	80025e0 <HAL_GPIO_Init+0x21c>
 80025de:	2300      	movs	r3, #0
 80025e0:	69fa      	ldr	r2, [r7, #28]
 80025e2:	f002 0203 	and.w	r2, r2, #3
 80025e6:	0092      	lsls	r2, r2, #2
 80025e8:	4093      	lsls	r3, r2
 80025ea:	69ba      	ldr	r2, [r7, #24]
 80025ec:	4313      	orrs	r3, r2
 80025ee:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80025f0:	4934      	ldr	r1, [pc, #208]	; (80026c4 <HAL_GPIO_Init+0x300>)
 80025f2:	69fb      	ldr	r3, [r7, #28]
 80025f4:	089b      	lsrs	r3, r3, #2
 80025f6:	3302      	adds	r3, #2
 80025f8:	69ba      	ldr	r2, [r7, #24]
 80025fa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80025fe:	4b39      	ldr	r3, [pc, #228]	; (80026e4 <HAL_GPIO_Init+0x320>)
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002604:	693b      	ldr	r3, [r7, #16]
 8002606:	43db      	mvns	r3, r3
 8002608:	69ba      	ldr	r2, [r7, #24]
 800260a:	4013      	ands	r3, r2
 800260c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800260e:	683b      	ldr	r3, [r7, #0]
 8002610:	685b      	ldr	r3, [r3, #4]
 8002612:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002616:	2b00      	cmp	r3, #0
 8002618:	d003      	beq.n	8002622 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 800261a:	69ba      	ldr	r2, [r7, #24]
 800261c:	693b      	ldr	r3, [r7, #16]
 800261e:	4313      	orrs	r3, r2
 8002620:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002622:	4a30      	ldr	r2, [pc, #192]	; (80026e4 <HAL_GPIO_Init+0x320>)
 8002624:	69bb      	ldr	r3, [r7, #24]
 8002626:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8002628:	4b2e      	ldr	r3, [pc, #184]	; (80026e4 <HAL_GPIO_Init+0x320>)
 800262a:	685b      	ldr	r3, [r3, #4]
 800262c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800262e:	693b      	ldr	r3, [r7, #16]
 8002630:	43db      	mvns	r3, r3
 8002632:	69ba      	ldr	r2, [r7, #24]
 8002634:	4013      	ands	r3, r2
 8002636:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002638:	683b      	ldr	r3, [r7, #0]
 800263a:	685b      	ldr	r3, [r3, #4]
 800263c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002640:	2b00      	cmp	r3, #0
 8002642:	d003      	beq.n	800264c <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8002644:	69ba      	ldr	r2, [r7, #24]
 8002646:	693b      	ldr	r3, [r7, #16]
 8002648:	4313      	orrs	r3, r2
 800264a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800264c:	4a25      	ldr	r2, [pc, #148]	; (80026e4 <HAL_GPIO_Init+0x320>)
 800264e:	69bb      	ldr	r3, [r7, #24]
 8002650:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002652:	4b24      	ldr	r3, [pc, #144]	; (80026e4 <HAL_GPIO_Init+0x320>)
 8002654:	689b      	ldr	r3, [r3, #8]
 8002656:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002658:	693b      	ldr	r3, [r7, #16]
 800265a:	43db      	mvns	r3, r3
 800265c:	69ba      	ldr	r2, [r7, #24]
 800265e:	4013      	ands	r3, r2
 8002660:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002662:	683b      	ldr	r3, [r7, #0]
 8002664:	685b      	ldr	r3, [r3, #4]
 8002666:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800266a:	2b00      	cmp	r3, #0
 800266c:	d003      	beq.n	8002676 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 800266e:	69ba      	ldr	r2, [r7, #24]
 8002670:	693b      	ldr	r3, [r7, #16]
 8002672:	4313      	orrs	r3, r2
 8002674:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002676:	4a1b      	ldr	r2, [pc, #108]	; (80026e4 <HAL_GPIO_Init+0x320>)
 8002678:	69bb      	ldr	r3, [r7, #24]
 800267a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800267c:	4b19      	ldr	r3, [pc, #100]	; (80026e4 <HAL_GPIO_Init+0x320>)
 800267e:	68db      	ldr	r3, [r3, #12]
 8002680:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002682:	693b      	ldr	r3, [r7, #16]
 8002684:	43db      	mvns	r3, r3
 8002686:	69ba      	ldr	r2, [r7, #24]
 8002688:	4013      	ands	r3, r2
 800268a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800268c:	683b      	ldr	r3, [r7, #0]
 800268e:	685b      	ldr	r3, [r3, #4]
 8002690:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002694:	2b00      	cmp	r3, #0
 8002696:	d003      	beq.n	80026a0 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8002698:	69ba      	ldr	r2, [r7, #24]
 800269a:	693b      	ldr	r3, [r7, #16]
 800269c:	4313      	orrs	r3, r2
 800269e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80026a0:	4a10      	ldr	r2, [pc, #64]	; (80026e4 <HAL_GPIO_Init+0x320>)
 80026a2:	69bb      	ldr	r3, [r7, #24]
 80026a4:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80026a6:	69fb      	ldr	r3, [r7, #28]
 80026a8:	3301      	adds	r3, #1
 80026aa:	61fb      	str	r3, [r7, #28]
 80026ac:	69fb      	ldr	r3, [r7, #28]
 80026ae:	2b0f      	cmp	r3, #15
 80026b0:	f67f ae96 	bls.w	80023e0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80026b4:	bf00      	nop
 80026b6:	3724      	adds	r7, #36	; 0x24
 80026b8:	46bd      	mov	sp, r7
 80026ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026be:	4770      	bx	lr
 80026c0:	40023800 	.word	0x40023800
 80026c4:	40013800 	.word	0x40013800
 80026c8:	40020000 	.word	0x40020000
 80026cc:	40020400 	.word	0x40020400
 80026d0:	40020800 	.word	0x40020800
 80026d4:	40020c00 	.word	0x40020c00
 80026d8:	40021000 	.word	0x40021000
 80026dc:	40021400 	.word	0x40021400
 80026e0:	40021800 	.word	0x40021800
 80026e4:	40013c00 	.word	0x40013c00

080026e8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80026e8:	b480      	push	{r7}
 80026ea:	b085      	sub	sp, #20
 80026ec:	af00      	add	r7, sp, #0
 80026ee:	6078      	str	r0, [r7, #4]
 80026f0:	460b      	mov	r3, r1
 80026f2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	691a      	ldr	r2, [r3, #16]
 80026f8:	887b      	ldrh	r3, [r7, #2]
 80026fa:	4013      	ands	r3, r2
 80026fc:	2b00      	cmp	r3, #0
 80026fe:	d002      	beq.n	8002706 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002700:	2301      	movs	r3, #1
 8002702:	73fb      	strb	r3, [r7, #15]
 8002704:	e001      	b.n	800270a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002706:	2300      	movs	r3, #0
 8002708:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800270a:	7bfb      	ldrb	r3, [r7, #15]
}
 800270c:	4618      	mov	r0, r3
 800270e:	3714      	adds	r7, #20
 8002710:	46bd      	mov	sp, r7
 8002712:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002716:	4770      	bx	lr

08002718 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002718:	b480      	push	{r7}
 800271a:	b083      	sub	sp, #12
 800271c:	af00      	add	r7, sp, #0
 800271e:	6078      	str	r0, [r7, #4]
 8002720:	460b      	mov	r3, r1
 8002722:	807b      	strh	r3, [r7, #2]
 8002724:	4613      	mov	r3, r2
 8002726:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002728:	787b      	ldrb	r3, [r7, #1]
 800272a:	2b00      	cmp	r3, #0
 800272c:	d003      	beq.n	8002736 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800272e:	887a      	ldrh	r2, [r7, #2]
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002734:	e003      	b.n	800273e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002736:	887b      	ldrh	r3, [r7, #2]
 8002738:	041a      	lsls	r2, r3, #16
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	619a      	str	r2, [r3, #24]
}
 800273e:	bf00      	nop
 8002740:	370c      	adds	r7, #12
 8002742:	46bd      	mov	sp, r7
 8002744:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002748:	4770      	bx	lr

0800274a <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800274a:	b480      	push	{r7}
 800274c:	b083      	sub	sp, #12
 800274e:	af00      	add	r7, sp, #0
 8002750:	6078      	str	r0, [r7, #4]
 8002752:	460b      	mov	r3, r1
 8002754:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) == GPIO_Pin)
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	695a      	ldr	r2, [r3, #20]
 800275a:	887b      	ldrh	r3, [r7, #2]
 800275c:	401a      	ands	r2, r3
 800275e:	887b      	ldrh	r3, [r7, #2]
 8002760:	429a      	cmp	r2, r3
 8002762:	d104      	bne.n	800276e <HAL_GPIO_TogglePin+0x24>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8002764:	887b      	ldrh	r3, [r7, #2]
 8002766:	041a      	lsls	r2, r3, #16
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = GPIO_Pin;
  }
}
 800276c:	e002      	b.n	8002774 <HAL_GPIO_TogglePin+0x2a>
    GPIOx->BSRR = GPIO_Pin;
 800276e:	887a      	ldrh	r2, [r7, #2]
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	619a      	str	r2, [r3, #24]
}
 8002774:	bf00      	nop
 8002776:	370c      	adds	r7, #12
 8002778:	46bd      	mov	sp, r7
 800277a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800277e:	4770      	bx	lr

08002780 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002780:	b580      	push	{r7, lr}
 8002782:	b084      	sub	sp, #16
 8002784:	af00      	add	r7, sp, #0
 8002786:	6078      	str	r0, [r7, #4]
 8002788:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	2b00      	cmp	r3, #0
 800278e:	d101      	bne.n	8002794 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002790:	2301      	movs	r3, #1
 8002792:	e0cc      	b.n	800292e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002794:	4b68      	ldr	r3, [pc, #416]	; (8002938 <HAL_RCC_ClockConfig+0x1b8>)
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	f003 030f 	and.w	r3, r3, #15
 800279c:	683a      	ldr	r2, [r7, #0]
 800279e:	429a      	cmp	r2, r3
 80027a0:	d90c      	bls.n	80027bc <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80027a2:	4b65      	ldr	r3, [pc, #404]	; (8002938 <HAL_RCC_ClockConfig+0x1b8>)
 80027a4:	683a      	ldr	r2, [r7, #0]
 80027a6:	b2d2      	uxtb	r2, r2
 80027a8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80027aa:	4b63      	ldr	r3, [pc, #396]	; (8002938 <HAL_RCC_ClockConfig+0x1b8>)
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	f003 030f 	and.w	r3, r3, #15
 80027b2:	683a      	ldr	r2, [r7, #0]
 80027b4:	429a      	cmp	r2, r3
 80027b6:	d001      	beq.n	80027bc <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80027b8:	2301      	movs	r3, #1
 80027ba:	e0b8      	b.n	800292e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	f003 0302 	and.w	r3, r3, #2
 80027c4:	2b00      	cmp	r3, #0
 80027c6:	d020      	beq.n	800280a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	f003 0304 	and.w	r3, r3, #4
 80027d0:	2b00      	cmp	r3, #0
 80027d2:	d005      	beq.n	80027e0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80027d4:	4b59      	ldr	r3, [pc, #356]	; (800293c <HAL_RCC_ClockConfig+0x1bc>)
 80027d6:	689b      	ldr	r3, [r3, #8]
 80027d8:	4a58      	ldr	r2, [pc, #352]	; (800293c <HAL_RCC_ClockConfig+0x1bc>)
 80027da:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80027de:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	f003 0308 	and.w	r3, r3, #8
 80027e8:	2b00      	cmp	r3, #0
 80027ea:	d005      	beq.n	80027f8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80027ec:	4b53      	ldr	r3, [pc, #332]	; (800293c <HAL_RCC_ClockConfig+0x1bc>)
 80027ee:	689b      	ldr	r3, [r3, #8]
 80027f0:	4a52      	ldr	r2, [pc, #328]	; (800293c <HAL_RCC_ClockConfig+0x1bc>)
 80027f2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80027f6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80027f8:	4b50      	ldr	r3, [pc, #320]	; (800293c <HAL_RCC_ClockConfig+0x1bc>)
 80027fa:	689b      	ldr	r3, [r3, #8]
 80027fc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	689b      	ldr	r3, [r3, #8]
 8002804:	494d      	ldr	r1, [pc, #308]	; (800293c <HAL_RCC_ClockConfig+0x1bc>)
 8002806:	4313      	orrs	r3, r2
 8002808:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	f003 0301 	and.w	r3, r3, #1
 8002812:	2b00      	cmp	r3, #0
 8002814:	d044      	beq.n	80028a0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	685b      	ldr	r3, [r3, #4]
 800281a:	2b01      	cmp	r3, #1
 800281c:	d107      	bne.n	800282e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800281e:	4b47      	ldr	r3, [pc, #284]	; (800293c <HAL_RCC_ClockConfig+0x1bc>)
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002826:	2b00      	cmp	r3, #0
 8002828:	d119      	bne.n	800285e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800282a:	2301      	movs	r3, #1
 800282c:	e07f      	b.n	800292e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	685b      	ldr	r3, [r3, #4]
 8002832:	2b02      	cmp	r3, #2
 8002834:	d003      	beq.n	800283e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800283a:	2b03      	cmp	r3, #3
 800283c:	d107      	bne.n	800284e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800283e:	4b3f      	ldr	r3, [pc, #252]	; (800293c <HAL_RCC_ClockConfig+0x1bc>)
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002846:	2b00      	cmp	r3, #0
 8002848:	d109      	bne.n	800285e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800284a:	2301      	movs	r3, #1
 800284c:	e06f      	b.n	800292e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800284e:	4b3b      	ldr	r3, [pc, #236]	; (800293c <HAL_RCC_ClockConfig+0x1bc>)
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	f003 0302 	and.w	r3, r3, #2
 8002856:	2b00      	cmp	r3, #0
 8002858:	d101      	bne.n	800285e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800285a:	2301      	movs	r3, #1
 800285c:	e067      	b.n	800292e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800285e:	4b37      	ldr	r3, [pc, #220]	; (800293c <HAL_RCC_ClockConfig+0x1bc>)
 8002860:	689b      	ldr	r3, [r3, #8]
 8002862:	f023 0203 	bic.w	r2, r3, #3
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	685b      	ldr	r3, [r3, #4]
 800286a:	4934      	ldr	r1, [pc, #208]	; (800293c <HAL_RCC_ClockConfig+0x1bc>)
 800286c:	4313      	orrs	r3, r2
 800286e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002870:	f7fe fbce 	bl	8001010 <HAL_GetTick>
 8002874:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002876:	e00a      	b.n	800288e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002878:	f7fe fbca 	bl	8001010 <HAL_GetTick>
 800287c:	4602      	mov	r2, r0
 800287e:	68fb      	ldr	r3, [r7, #12]
 8002880:	1ad3      	subs	r3, r2, r3
 8002882:	f241 3288 	movw	r2, #5000	; 0x1388
 8002886:	4293      	cmp	r3, r2
 8002888:	d901      	bls.n	800288e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800288a:	2303      	movs	r3, #3
 800288c:	e04f      	b.n	800292e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800288e:	4b2b      	ldr	r3, [pc, #172]	; (800293c <HAL_RCC_ClockConfig+0x1bc>)
 8002890:	689b      	ldr	r3, [r3, #8]
 8002892:	f003 020c 	and.w	r2, r3, #12
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	685b      	ldr	r3, [r3, #4]
 800289a:	009b      	lsls	r3, r3, #2
 800289c:	429a      	cmp	r2, r3
 800289e:	d1eb      	bne.n	8002878 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80028a0:	4b25      	ldr	r3, [pc, #148]	; (8002938 <HAL_RCC_ClockConfig+0x1b8>)
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	f003 030f 	and.w	r3, r3, #15
 80028a8:	683a      	ldr	r2, [r7, #0]
 80028aa:	429a      	cmp	r2, r3
 80028ac:	d20c      	bcs.n	80028c8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80028ae:	4b22      	ldr	r3, [pc, #136]	; (8002938 <HAL_RCC_ClockConfig+0x1b8>)
 80028b0:	683a      	ldr	r2, [r7, #0]
 80028b2:	b2d2      	uxtb	r2, r2
 80028b4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80028b6:	4b20      	ldr	r3, [pc, #128]	; (8002938 <HAL_RCC_ClockConfig+0x1b8>)
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	f003 030f 	and.w	r3, r3, #15
 80028be:	683a      	ldr	r2, [r7, #0]
 80028c0:	429a      	cmp	r2, r3
 80028c2:	d001      	beq.n	80028c8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80028c4:	2301      	movs	r3, #1
 80028c6:	e032      	b.n	800292e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	f003 0304 	and.w	r3, r3, #4
 80028d0:	2b00      	cmp	r3, #0
 80028d2:	d008      	beq.n	80028e6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80028d4:	4b19      	ldr	r3, [pc, #100]	; (800293c <HAL_RCC_ClockConfig+0x1bc>)
 80028d6:	689b      	ldr	r3, [r3, #8]
 80028d8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	68db      	ldr	r3, [r3, #12]
 80028e0:	4916      	ldr	r1, [pc, #88]	; (800293c <HAL_RCC_ClockConfig+0x1bc>)
 80028e2:	4313      	orrs	r3, r2
 80028e4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	f003 0308 	and.w	r3, r3, #8
 80028ee:	2b00      	cmp	r3, #0
 80028f0:	d009      	beq.n	8002906 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80028f2:	4b12      	ldr	r3, [pc, #72]	; (800293c <HAL_RCC_ClockConfig+0x1bc>)
 80028f4:	689b      	ldr	r3, [r3, #8]
 80028f6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	691b      	ldr	r3, [r3, #16]
 80028fe:	00db      	lsls	r3, r3, #3
 8002900:	490e      	ldr	r1, [pc, #56]	; (800293c <HAL_RCC_ClockConfig+0x1bc>)
 8002902:	4313      	orrs	r3, r2
 8002904:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002906:	f000 f855 	bl	80029b4 <HAL_RCC_GetSysClockFreq>
 800290a:	4601      	mov	r1, r0
 800290c:	4b0b      	ldr	r3, [pc, #44]	; (800293c <HAL_RCC_ClockConfig+0x1bc>)
 800290e:	689b      	ldr	r3, [r3, #8]
 8002910:	091b      	lsrs	r3, r3, #4
 8002912:	f003 030f 	and.w	r3, r3, #15
 8002916:	4a0a      	ldr	r2, [pc, #40]	; (8002940 <HAL_RCC_ClockConfig+0x1c0>)
 8002918:	5cd3      	ldrb	r3, [r2, r3]
 800291a:	fa21 f303 	lsr.w	r3, r1, r3
 800291e:	4a09      	ldr	r2, [pc, #36]	; (8002944 <HAL_RCC_ClockConfig+0x1c4>)
 8002920:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002922:	4b09      	ldr	r3, [pc, #36]	; (8002948 <HAL_RCC_ClockConfig+0x1c8>)
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	4618      	mov	r0, r3
 8002928:	f7fe fb2e 	bl	8000f88 <HAL_InitTick>

  return HAL_OK;
 800292c:	2300      	movs	r3, #0
}
 800292e:	4618      	mov	r0, r3
 8002930:	3710      	adds	r7, #16
 8002932:	46bd      	mov	sp, r7
 8002934:	bd80      	pop	{r7, pc}
 8002936:	bf00      	nop
 8002938:	40023c00 	.word	0x40023c00
 800293c:	40023800 	.word	0x40023800
 8002940:	08005170 	.word	0x08005170
 8002944:	20000000 	.word	0x20000000
 8002948:	20000004 	.word	0x20000004

0800294c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800294c:	b480      	push	{r7}
 800294e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002950:	4b03      	ldr	r3, [pc, #12]	; (8002960 <HAL_RCC_GetHCLKFreq+0x14>)
 8002952:	681b      	ldr	r3, [r3, #0]
}
 8002954:	4618      	mov	r0, r3
 8002956:	46bd      	mov	sp, r7
 8002958:	f85d 7b04 	ldr.w	r7, [sp], #4
 800295c:	4770      	bx	lr
 800295e:	bf00      	nop
 8002960:	20000000 	.word	0x20000000

08002964 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002964:	b580      	push	{r7, lr}
 8002966:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002968:	f7ff fff0 	bl	800294c <HAL_RCC_GetHCLKFreq>
 800296c:	4601      	mov	r1, r0
 800296e:	4b05      	ldr	r3, [pc, #20]	; (8002984 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002970:	689b      	ldr	r3, [r3, #8]
 8002972:	0a9b      	lsrs	r3, r3, #10
 8002974:	f003 0307 	and.w	r3, r3, #7
 8002978:	4a03      	ldr	r2, [pc, #12]	; (8002988 <HAL_RCC_GetPCLK1Freq+0x24>)
 800297a:	5cd3      	ldrb	r3, [r2, r3]
 800297c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002980:	4618      	mov	r0, r3
 8002982:	bd80      	pop	{r7, pc}
 8002984:	40023800 	.word	0x40023800
 8002988:	08005180 	.word	0x08005180

0800298c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800298c:	b580      	push	{r7, lr}
 800298e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002990:	f7ff ffdc 	bl	800294c <HAL_RCC_GetHCLKFreq>
 8002994:	4601      	mov	r1, r0
 8002996:	4b05      	ldr	r3, [pc, #20]	; (80029ac <HAL_RCC_GetPCLK2Freq+0x20>)
 8002998:	689b      	ldr	r3, [r3, #8]
 800299a:	0b5b      	lsrs	r3, r3, #13
 800299c:	f003 0307 	and.w	r3, r3, #7
 80029a0:	4a03      	ldr	r2, [pc, #12]	; (80029b0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80029a2:	5cd3      	ldrb	r3, [r2, r3]
 80029a4:	fa21 f303 	lsr.w	r3, r1, r3
}
 80029a8:	4618      	mov	r0, r3
 80029aa:	bd80      	pop	{r7, pc}
 80029ac:	40023800 	.word	0x40023800
 80029b0:	08005180 	.word	0x08005180

080029b4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80029b4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80029b6:	b087      	sub	sp, #28
 80029b8:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80029ba:	2300      	movs	r3, #0
 80029bc:	60fb      	str	r3, [r7, #12]
  uint32_t pllvco = 0U;
 80029be:	2300      	movs	r3, #0
 80029c0:	617b      	str	r3, [r7, #20]
  uint32_t pllp = 0U;
 80029c2:	2300      	movs	r3, #0
 80029c4:	60bb      	str	r3, [r7, #8]
  uint32_t pllr = 0U;
 80029c6:	2300      	movs	r3, #0
 80029c8:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80029ca:	2300      	movs	r3, #0
 80029cc:	613b      	str	r3, [r7, #16]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80029ce:	4bc6      	ldr	r3, [pc, #792]	; (8002ce8 <HAL_RCC_GetSysClockFreq+0x334>)
 80029d0:	689b      	ldr	r3, [r3, #8]
 80029d2:	f003 030c 	and.w	r3, r3, #12
 80029d6:	2b0c      	cmp	r3, #12
 80029d8:	f200 817e 	bhi.w	8002cd8 <HAL_RCC_GetSysClockFreq+0x324>
 80029dc:	a201      	add	r2, pc, #4	; (adr r2, 80029e4 <HAL_RCC_GetSysClockFreq+0x30>)
 80029de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80029e2:	bf00      	nop
 80029e4:	08002a19 	.word	0x08002a19
 80029e8:	08002cd9 	.word	0x08002cd9
 80029ec:	08002cd9 	.word	0x08002cd9
 80029f0:	08002cd9 	.word	0x08002cd9
 80029f4:	08002a1f 	.word	0x08002a1f
 80029f8:	08002cd9 	.word	0x08002cd9
 80029fc:	08002cd9 	.word	0x08002cd9
 8002a00:	08002cd9 	.word	0x08002cd9
 8002a04:	08002a25 	.word	0x08002a25
 8002a08:	08002cd9 	.word	0x08002cd9
 8002a0c:	08002cd9 	.word	0x08002cd9
 8002a10:	08002cd9 	.word	0x08002cd9
 8002a14:	08002b81 	.word	0x08002b81
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002a18:	4bb4      	ldr	r3, [pc, #720]	; (8002cec <HAL_RCC_GetSysClockFreq+0x338>)
 8002a1a:	613b      	str	r3, [r7, #16]
       break;
 8002a1c:	e15f      	b.n	8002cde <HAL_RCC_GetSysClockFreq+0x32a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002a1e:	4bb4      	ldr	r3, [pc, #720]	; (8002cf0 <HAL_RCC_GetSysClockFreq+0x33c>)
 8002a20:	613b      	str	r3, [r7, #16]
      break;
 8002a22:	e15c      	b.n	8002cde <HAL_RCC_GetSysClockFreq+0x32a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002a24:	4bb0      	ldr	r3, [pc, #704]	; (8002ce8 <HAL_RCC_GetSysClockFreq+0x334>)
 8002a26:	685b      	ldr	r3, [r3, #4]
 8002a28:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002a2c:	60fb      	str	r3, [r7, #12]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002a2e:	4bae      	ldr	r3, [pc, #696]	; (8002ce8 <HAL_RCC_GetSysClockFreq+0x334>)
 8002a30:	685b      	ldr	r3, [r3, #4]
 8002a32:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002a36:	2b00      	cmp	r3, #0
 8002a38:	d04a      	beq.n	8002ad0 <HAL_RCC_GetSysClockFreq+0x11c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002a3a:	4bab      	ldr	r3, [pc, #684]	; (8002ce8 <HAL_RCC_GetSysClockFreq+0x334>)
 8002a3c:	685b      	ldr	r3, [r3, #4]
 8002a3e:	099b      	lsrs	r3, r3, #6
 8002a40:	f04f 0400 	mov.w	r4, #0
 8002a44:	f240 11ff 	movw	r1, #511	; 0x1ff
 8002a48:	f04f 0200 	mov.w	r2, #0
 8002a4c:	ea03 0501 	and.w	r5, r3, r1
 8002a50:	ea04 0602 	and.w	r6, r4, r2
 8002a54:	4629      	mov	r1, r5
 8002a56:	4632      	mov	r2, r6
 8002a58:	f04f 0300 	mov.w	r3, #0
 8002a5c:	f04f 0400 	mov.w	r4, #0
 8002a60:	0154      	lsls	r4, r2, #5
 8002a62:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8002a66:	014b      	lsls	r3, r1, #5
 8002a68:	4619      	mov	r1, r3
 8002a6a:	4622      	mov	r2, r4
 8002a6c:	1b49      	subs	r1, r1, r5
 8002a6e:	eb62 0206 	sbc.w	r2, r2, r6
 8002a72:	f04f 0300 	mov.w	r3, #0
 8002a76:	f04f 0400 	mov.w	r4, #0
 8002a7a:	0194      	lsls	r4, r2, #6
 8002a7c:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8002a80:	018b      	lsls	r3, r1, #6
 8002a82:	1a5b      	subs	r3, r3, r1
 8002a84:	eb64 0402 	sbc.w	r4, r4, r2
 8002a88:	f04f 0100 	mov.w	r1, #0
 8002a8c:	f04f 0200 	mov.w	r2, #0
 8002a90:	00e2      	lsls	r2, r4, #3
 8002a92:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8002a96:	00d9      	lsls	r1, r3, #3
 8002a98:	460b      	mov	r3, r1
 8002a9a:	4614      	mov	r4, r2
 8002a9c:	195b      	adds	r3, r3, r5
 8002a9e:	eb44 0406 	adc.w	r4, r4, r6
 8002aa2:	f04f 0100 	mov.w	r1, #0
 8002aa6:	f04f 0200 	mov.w	r2, #0
 8002aaa:	0262      	lsls	r2, r4, #9
 8002aac:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8002ab0:	0259      	lsls	r1, r3, #9
 8002ab2:	460b      	mov	r3, r1
 8002ab4:	4614      	mov	r4, r2
 8002ab6:	4618      	mov	r0, r3
 8002ab8:	4621      	mov	r1, r4
 8002aba:	68fb      	ldr	r3, [r7, #12]
 8002abc:	f04f 0400 	mov.w	r4, #0
 8002ac0:	461a      	mov	r2, r3
 8002ac2:	4623      	mov	r3, r4
 8002ac4:	f7fd fbf4 	bl	80002b0 <__aeabi_uldivmod>
 8002ac8:	4603      	mov	r3, r0
 8002aca:	460c      	mov	r4, r1
 8002acc:	617b      	str	r3, [r7, #20]
 8002ace:	e049      	b.n	8002b64 <HAL_RCC_GetSysClockFreq+0x1b0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002ad0:	4b85      	ldr	r3, [pc, #532]	; (8002ce8 <HAL_RCC_GetSysClockFreq+0x334>)
 8002ad2:	685b      	ldr	r3, [r3, #4]
 8002ad4:	099b      	lsrs	r3, r3, #6
 8002ad6:	f04f 0400 	mov.w	r4, #0
 8002ada:	f240 11ff 	movw	r1, #511	; 0x1ff
 8002ade:	f04f 0200 	mov.w	r2, #0
 8002ae2:	ea03 0501 	and.w	r5, r3, r1
 8002ae6:	ea04 0602 	and.w	r6, r4, r2
 8002aea:	4629      	mov	r1, r5
 8002aec:	4632      	mov	r2, r6
 8002aee:	f04f 0300 	mov.w	r3, #0
 8002af2:	f04f 0400 	mov.w	r4, #0
 8002af6:	0154      	lsls	r4, r2, #5
 8002af8:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8002afc:	014b      	lsls	r3, r1, #5
 8002afe:	4619      	mov	r1, r3
 8002b00:	4622      	mov	r2, r4
 8002b02:	1b49      	subs	r1, r1, r5
 8002b04:	eb62 0206 	sbc.w	r2, r2, r6
 8002b08:	f04f 0300 	mov.w	r3, #0
 8002b0c:	f04f 0400 	mov.w	r4, #0
 8002b10:	0194      	lsls	r4, r2, #6
 8002b12:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8002b16:	018b      	lsls	r3, r1, #6
 8002b18:	1a5b      	subs	r3, r3, r1
 8002b1a:	eb64 0402 	sbc.w	r4, r4, r2
 8002b1e:	f04f 0100 	mov.w	r1, #0
 8002b22:	f04f 0200 	mov.w	r2, #0
 8002b26:	00e2      	lsls	r2, r4, #3
 8002b28:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8002b2c:	00d9      	lsls	r1, r3, #3
 8002b2e:	460b      	mov	r3, r1
 8002b30:	4614      	mov	r4, r2
 8002b32:	195b      	adds	r3, r3, r5
 8002b34:	eb44 0406 	adc.w	r4, r4, r6
 8002b38:	f04f 0100 	mov.w	r1, #0
 8002b3c:	f04f 0200 	mov.w	r2, #0
 8002b40:	02a2      	lsls	r2, r4, #10
 8002b42:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8002b46:	0299      	lsls	r1, r3, #10
 8002b48:	460b      	mov	r3, r1
 8002b4a:	4614      	mov	r4, r2
 8002b4c:	4618      	mov	r0, r3
 8002b4e:	4621      	mov	r1, r4
 8002b50:	68fb      	ldr	r3, [r7, #12]
 8002b52:	f04f 0400 	mov.w	r4, #0
 8002b56:	461a      	mov	r2, r3
 8002b58:	4623      	mov	r3, r4
 8002b5a:	f7fd fba9 	bl	80002b0 <__aeabi_uldivmod>
 8002b5e:	4603      	mov	r3, r0
 8002b60:	460c      	mov	r4, r1
 8002b62:	617b      	str	r3, [r7, #20]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002b64:	4b60      	ldr	r3, [pc, #384]	; (8002ce8 <HAL_RCC_GetSysClockFreq+0x334>)
 8002b66:	685b      	ldr	r3, [r3, #4]
 8002b68:	0c1b      	lsrs	r3, r3, #16
 8002b6a:	f003 0303 	and.w	r3, r3, #3
 8002b6e:	3301      	adds	r3, #1
 8002b70:	005b      	lsls	r3, r3, #1
 8002b72:	60bb      	str	r3, [r7, #8]

      sysclockfreq = pllvco/pllp;
 8002b74:	697a      	ldr	r2, [r7, #20]
 8002b76:	68bb      	ldr	r3, [r7, #8]
 8002b78:	fbb2 f3f3 	udiv	r3, r2, r3
 8002b7c:	613b      	str	r3, [r7, #16]
      break;
 8002b7e:	e0ae      	b.n	8002cde <HAL_RCC_GetSysClockFreq+0x32a>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002b80:	4b59      	ldr	r3, [pc, #356]	; (8002ce8 <HAL_RCC_GetSysClockFreq+0x334>)
 8002b82:	685b      	ldr	r3, [r3, #4]
 8002b84:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002b88:	60fb      	str	r3, [r7, #12]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002b8a:	4b57      	ldr	r3, [pc, #348]	; (8002ce8 <HAL_RCC_GetSysClockFreq+0x334>)
 8002b8c:	685b      	ldr	r3, [r3, #4]
 8002b8e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002b92:	2b00      	cmp	r3, #0
 8002b94:	d04a      	beq.n	8002c2c <HAL_RCC_GetSysClockFreq+0x278>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002b96:	4b54      	ldr	r3, [pc, #336]	; (8002ce8 <HAL_RCC_GetSysClockFreq+0x334>)
 8002b98:	685b      	ldr	r3, [r3, #4]
 8002b9a:	099b      	lsrs	r3, r3, #6
 8002b9c:	f04f 0400 	mov.w	r4, #0
 8002ba0:	f240 11ff 	movw	r1, #511	; 0x1ff
 8002ba4:	f04f 0200 	mov.w	r2, #0
 8002ba8:	ea03 0501 	and.w	r5, r3, r1
 8002bac:	ea04 0602 	and.w	r6, r4, r2
 8002bb0:	4629      	mov	r1, r5
 8002bb2:	4632      	mov	r2, r6
 8002bb4:	f04f 0300 	mov.w	r3, #0
 8002bb8:	f04f 0400 	mov.w	r4, #0
 8002bbc:	0154      	lsls	r4, r2, #5
 8002bbe:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8002bc2:	014b      	lsls	r3, r1, #5
 8002bc4:	4619      	mov	r1, r3
 8002bc6:	4622      	mov	r2, r4
 8002bc8:	1b49      	subs	r1, r1, r5
 8002bca:	eb62 0206 	sbc.w	r2, r2, r6
 8002bce:	f04f 0300 	mov.w	r3, #0
 8002bd2:	f04f 0400 	mov.w	r4, #0
 8002bd6:	0194      	lsls	r4, r2, #6
 8002bd8:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8002bdc:	018b      	lsls	r3, r1, #6
 8002bde:	1a5b      	subs	r3, r3, r1
 8002be0:	eb64 0402 	sbc.w	r4, r4, r2
 8002be4:	f04f 0100 	mov.w	r1, #0
 8002be8:	f04f 0200 	mov.w	r2, #0
 8002bec:	00e2      	lsls	r2, r4, #3
 8002bee:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8002bf2:	00d9      	lsls	r1, r3, #3
 8002bf4:	460b      	mov	r3, r1
 8002bf6:	4614      	mov	r4, r2
 8002bf8:	195b      	adds	r3, r3, r5
 8002bfa:	eb44 0406 	adc.w	r4, r4, r6
 8002bfe:	f04f 0100 	mov.w	r1, #0
 8002c02:	f04f 0200 	mov.w	r2, #0
 8002c06:	0262      	lsls	r2, r4, #9
 8002c08:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8002c0c:	0259      	lsls	r1, r3, #9
 8002c0e:	460b      	mov	r3, r1
 8002c10:	4614      	mov	r4, r2
 8002c12:	4618      	mov	r0, r3
 8002c14:	4621      	mov	r1, r4
 8002c16:	68fb      	ldr	r3, [r7, #12]
 8002c18:	f04f 0400 	mov.w	r4, #0
 8002c1c:	461a      	mov	r2, r3
 8002c1e:	4623      	mov	r3, r4
 8002c20:	f7fd fb46 	bl	80002b0 <__aeabi_uldivmod>
 8002c24:	4603      	mov	r3, r0
 8002c26:	460c      	mov	r4, r1
 8002c28:	617b      	str	r3, [r7, #20]
 8002c2a:	e049      	b.n	8002cc0 <HAL_RCC_GetSysClockFreq+0x30c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002c2c:	4b2e      	ldr	r3, [pc, #184]	; (8002ce8 <HAL_RCC_GetSysClockFreq+0x334>)
 8002c2e:	685b      	ldr	r3, [r3, #4]
 8002c30:	099b      	lsrs	r3, r3, #6
 8002c32:	f04f 0400 	mov.w	r4, #0
 8002c36:	f240 11ff 	movw	r1, #511	; 0x1ff
 8002c3a:	f04f 0200 	mov.w	r2, #0
 8002c3e:	ea03 0501 	and.w	r5, r3, r1
 8002c42:	ea04 0602 	and.w	r6, r4, r2
 8002c46:	4629      	mov	r1, r5
 8002c48:	4632      	mov	r2, r6
 8002c4a:	f04f 0300 	mov.w	r3, #0
 8002c4e:	f04f 0400 	mov.w	r4, #0
 8002c52:	0154      	lsls	r4, r2, #5
 8002c54:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8002c58:	014b      	lsls	r3, r1, #5
 8002c5a:	4619      	mov	r1, r3
 8002c5c:	4622      	mov	r2, r4
 8002c5e:	1b49      	subs	r1, r1, r5
 8002c60:	eb62 0206 	sbc.w	r2, r2, r6
 8002c64:	f04f 0300 	mov.w	r3, #0
 8002c68:	f04f 0400 	mov.w	r4, #0
 8002c6c:	0194      	lsls	r4, r2, #6
 8002c6e:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8002c72:	018b      	lsls	r3, r1, #6
 8002c74:	1a5b      	subs	r3, r3, r1
 8002c76:	eb64 0402 	sbc.w	r4, r4, r2
 8002c7a:	f04f 0100 	mov.w	r1, #0
 8002c7e:	f04f 0200 	mov.w	r2, #0
 8002c82:	00e2      	lsls	r2, r4, #3
 8002c84:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8002c88:	00d9      	lsls	r1, r3, #3
 8002c8a:	460b      	mov	r3, r1
 8002c8c:	4614      	mov	r4, r2
 8002c8e:	195b      	adds	r3, r3, r5
 8002c90:	eb44 0406 	adc.w	r4, r4, r6
 8002c94:	f04f 0100 	mov.w	r1, #0
 8002c98:	f04f 0200 	mov.w	r2, #0
 8002c9c:	02a2      	lsls	r2, r4, #10
 8002c9e:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8002ca2:	0299      	lsls	r1, r3, #10
 8002ca4:	460b      	mov	r3, r1
 8002ca6:	4614      	mov	r4, r2
 8002ca8:	4618      	mov	r0, r3
 8002caa:	4621      	mov	r1, r4
 8002cac:	68fb      	ldr	r3, [r7, #12]
 8002cae:	f04f 0400 	mov.w	r4, #0
 8002cb2:	461a      	mov	r2, r3
 8002cb4:	4623      	mov	r3, r4
 8002cb6:	f7fd fafb 	bl	80002b0 <__aeabi_uldivmod>
 8002cba:	4603      	mov	r3, r0
 8002cbc:	460c      	mov	r4, r1
 8002cbe:	617b      	str	r3, [r7, #20]
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8002cc0:	4b09      	ldr	r3, [pc, #36]	; (8002ce8 <HAL_RCC_GetSysClockFreq+0x334>)
 8002cc2:	685b      	ldr	r3, [r3, #4]
 8002cc4:	0f1b      	lsrs	r3, r3, #28
 8002cc6:	f003 0307 	and.w	r3, r3, #7
 8002cca:	607b      	str	r3, [r7, #4]

      sysclockfreq = pllvco/pllr;
 8002ccc:	697a      	ldr	r2, [r7, #20]
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	fbb2 f3f3 	udiv	r3, r2, r3
 8002cd4:	613b      	str	r3, [r7, #16]
      break;
 8002cd6:	e002      	b.n	8002cde <HAL_RCC_GetSysClockFreq+0x32a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002cd8:	4b04      	ldr	r3, [pc, #16]	; (8002cec <HAL_RCC_GetSysClockFreq+0x338>)
 8002cda:	613b      	str	r3, [r7, #16]
      break;
 8002cdc:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002cde:	693b      	ldr	r3, [r7, #16]
}
 8002ce0:	4618      	mov	r0, r3
 8002ce2:	371c      	adds	r7, #28
 8002ce4:	46bd      	mov	sp, r7
 8002ce6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002ce8:	40023800 	.word	0x40023800
 8002cec:	00f42400 	.word	0x00f42400
 8002cf0:	007a1200 	.word	0x007a1200

08002cf4 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002cf4:	b580      	push	{r7, lr}
 8002cf6:	b086      	sub	sp, #24
 8002cf8:	af00      	add	r7, sp, #0
 8002cfa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002cfc:	2300      	movs	r3, #0
 8002cfe:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	f003 0301 	and.w	r3, r3, #1
 8002d08:	2b00      	cmp	r3, #0
 8002d0a:	f000 8083 	beq.w	8002e14 <HAL_RCC_OscConfig+0x120>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8002d0e:	4b95      	ldr	r3, [pc, #596]	; (8002f64 <HAL_RCC_OscConfig+0x270>)
 8002d10:	689b      	ldr	r3, [r3, #8]
 8002d12:	f003 030c 	and.w	r3, r3, #12
 8002d16:	2b04      	cmp	r3, #4
 8002d18:	d019      	beq.n	8002d4e <HAL_RCC_OscConfig+0x5a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8002d1a:	4b92      	ldr	r3, [pc, #584]	; (8002f64 <HAL_RCC_OscConfig+0x270>)
 8002d1c:	689b      	ldr	r3, [r3, #8]
 8002d1e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8002d22:	2b08      	cmp	r3, #8
 8002d24:	d106      	bne.n	8002d34 <HAL_RCC_OscConfig+0x40>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8002d26:	4b8f      	ldr	r3, [pc, #572]	; (8002f64 <HAL_RCC_OscConfig+0x270>)
 8002d28:	685b      	ldr	r3, [r3, #4]
 8002d2a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002d2e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002d32:	d00c      	beq.n	8002d4e <HAL_RCC_OscConfig+0x5a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002d34:	4b8b      	ldr	r3, [pc, #556]	; (8002f64 <HAL_RCC_OscConfig+0x270>)
 8002d36:	689b      	ldr	r3, [r3, #8]
 8002d38:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8002d3c:	2b0c      	cmp	r3, #12
 8002d3e:	d112      	bne.n	8002d66 <HAL_RCC_OscConfig+0x72>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002d40:	4b88      	ldr	r3, [pc, #544]	; (8002f64 <HAL_RCC_OscConfig+0x270>)
 8002d42:	685b      	ldr	r3, [r3, #4]
 8002d44:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002d48:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002d4c:	d10b      	bne.n	8002d66 <HAL_RCC_OscConfig+0x72>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002d4e:	4b85      	ldr	r3, [pc, #532]	; (8002f64 <HAL_RCC_OscConfig+0x270>)
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d56:	2b00      	cmp	r3, #0
 8002d58:	d05b      	beq.n	8002e12 <HAL_RCC_OscConfig+0x11e>
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	685b      	ldr	r3, [r3, #4]
 8002d5e:	2b00      	cmp	r3, #0
 8002d60:	d157      	bne.n	8002e12 <HAL_RCC_OscConfig+0x11e>
      {
        return HAL_ERROR;
 8002d62:	2301      	movs	r3, #1
 8002d64:	e216      	b.n	8003194 <HAL_RCC_OscConfig+0x4a0>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	685b      	ldr	r3, [r3, #4]
 8002d6a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002d6e:	d106      	bne.n	8002d7e <HAL_RCC_OscConfig+0x8a>
 8002d70:	4b7c      	ldr	r3, [pc, #496]	; (8002f64 <HAL_RCC_OscConfig+0x270>)
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	4a7b      	ldr	r2, [pc, #492]	; (8002f64 <HAL_RCC_OscConfig+0x270>)
 8002d76:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002d7a:	6013      	str	r3, [r2, #0]
 8002d7c:	e01d      	b.n	8002dba <HAL_RCC_OscConfig+0xc6>
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	685b      	ldr	r3, [r3, #4]
 8002d82:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002d86:	d10c      	bne.n	8002da2 <HAL_RCC_OscConfig+0xae>
 8002d88:	4b76      	ldr	r3, [pc, #472]	; (8002f64 <HAL_RCC_OscConfig+0x270>)
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	4a75      	ldr	r2, [pc, #468]	; (8002f64 <HAL_RCC_OscConfig+0x270>)
 8002d8e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002d92:	6013      	str	r3, [r2, #0]
 8002d94:	4b73      	ldr	r3, [pc, #460]	; (8002f64 <HAL_RCC_OscConfig+0x270>)
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	4a72      	ldr	r2, [pc, #456]	; (8002f64 <HAL_RCC_OscConfig+0x270>)
 8002d9a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002d9e:	6013      	str	r3, [r2, #0]
 8002da0:	e00b      	b.n	8002dba <HAL_RCC_OscConfig+0xc6>
 8002da2:	4b70      	ldr	r3, [pc, #448]	; (8002f64 <HAL_RCC_OscConfig+0x270>)
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	4a6f      	ldr	r2, [pc, #444]	; (8002f64 <HAL_RCC_OscConfig+0x270>)
 8002da8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002dac:	6013      	str	r3, [r2, #0]
 8002dae:	4b6d      	ldr	r3, [pc, #436]	; (8002f64 <HAL_RCC_OscConfig+0x270>)
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	4a6c      	ldr	r2, [pc, #432]	; (8002f64 <HAL_RCC_OscConfig+0x270>)
 8002db4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002db8:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	685b      	ldr	r3, [r3, #4]
 8002dbe:	2b00      	cmp	r3, #0
 8002dc0:	d013      	beq.n	8002dea <HAL_RCC_OscConfig+0xf6>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002dc2:	f7fe f925 	bl	8001010 <HAL_GetTick>
 8002dc6:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002dc8:	e008      	b.n	8002ddc <HAL_RCC_OscConfig+0xe8>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002dca:	f7fe f921 	bl	8001010 <HAL_GetTick>
 8002dce:	4602      	mov	r2, r0
 8002dd0:	693b      	ldr	r3, [r7, #16]
 8002dd2:	1ad3      	subs	r3, r2, r3
 8002dd4:	2b64      	cmp	r3, #100	; 0x64
 8002dd6:	d901      	bls.n	8002ddc <HAL_RCC_OscConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8002dd8:	2303      	movs	r3, #3
 8002dda:	e1db      	b.n	8003194 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002ddc:	4b61      	ldr	r3, [pc, #388]	; (8002f64 <HAL_RCC_OscConfig+0x270>)
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002de4:	2b00      	cmp	r3, #0
 8002de6:	d0f0      	beq.n	8002dca <HAL_RCC_OscConfig+0xd6>
 8002de8:	e014      	b.n	8002e14 <HAL_RCC_OscConfig+0x120>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002dea:	f7fe f911 	bl	8001010 <HAL_GetTick>
 8002dee:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002df0:	e008      	b.n	8002e04 <HAL_RCC_OscConfig+0x110>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002df2:	f7fe f90d 	bl	8001010 <HAL_GetTick>
 8002df6:	4602      	mov	r2, r0
 8002df8:	693b      	ldr	r3, [r7, #16]
 8002dfa:	1ad3      	subs	r3, r2, r3
 8002dfc:	2b64      	cmp	r3, #100	; 0x64
 8002dfe:	d901      	bls.n	8002e04 <HAL_RCC_OscConfig+0x110>
          {
            return HAL_TIMEOUT;
 8002e00:	2303      	movs	r3, #3
 8002e02:	e1c7      	b.n	8003194 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002e04:	4b57      	ldr	r3, [pc, #348]	; (8002f64 <HAL_RCC_OscConfig+0x270>)
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e0c:	2b00      	cmp	r3, #0
 8002e0e:	d1f0      	bne.n	8002df2 <HAL_RCC_OscConfig+0xfe>
 8002e10:	e000      	b.n	8002e14 <HAL_RCC_OscConfig+0x120>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002e12:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	f003 0302 	and.w	r3, r3, #2
 8002e1c:	2b00      	cmp	r3, #0
 8002e1e:	d06f      	beq.n	8002f00 <HAL_RCC_OscConfig+0x20c>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8002e20:	4b50      	ldr	r3, [pc, #320]	; (8002f64 <HAL_RCC_OscConfig+0x270>)
 8002e22:	689b      	ldr	r3, [r3, #8]
 8002e24:	f003 030c 	and.w	r3, r3, #12
 8002e28:	2b00      	cmp	r3, #0
 8002e2a:	d017      	beq.n	8002e5c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8002e2c:	4b4d      	ldr	r3, [pc, #308]	; (8002f64 <HAL_RCC_OscConfig+0x270>)
 8002e2e:	689b      	ldr	r3, [r3, #8]
 8002e30:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8002e34:	2b08      	cmp	r3, #8
 8002e36:	d105      	bne.n	8002e44 <HAL_RCC_OscConfig+0x150>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8002e38:	4b4a      	ldr	r3, [pc, #296]	; (8002f64 <HAL_RCC_OscConfig+0x270>)
 8002e3a:	685b      	ldr	r3, [r3, #4]
 8002e3c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002e40:	2b00      	cmp	r3, #0
 8002e42:	d00b      	beq.n	8002e5c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002e44:	4b47      	ldr	r3, [pc, #284]	; (8002f64 <HAL_RCC_OscConfig+0x270>)
 8002e46:	689b      	ldr	r3, [r3, #8]
 8002e48:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8002e4c:	2b0c      	cmp	r3, #12
 8002e4e:	d11c      	bne.n	8002e8a <HAL_RCC_OscConfig+0x196>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002e50:	4b44      	ldr	r3, [pc, #272]	; (8002f64 <HAL_RCC_OscConfig+0x270>)
 8002e52:	685b      	ldr	r3, [r3, #4]
 8002e54:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002e58:	2b00      	cmp	r3, #0
 8002e5a:	d116      	bne.n	8002e8a <HAL_RCC_OscConfig+0x196>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002e5c:	4b41      	ldr	r3, [pc, #260]	; (8002f64 <HAL_RCC_OscConfig+0x270>)
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	f003 0302 	and.w	r3, r3, #2
 8002e64:	2b00      	cmp	r3, #0
 8002e66:	d005      	beq.n	8002e74 <HAL_RCC_OscConfig+0x180>
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	68db      	ldr	r3, [r3, #12]
 8002e6c:	2b01      	cmp	r3, #1
 8002e6e:	d001      	beq.n	8002e74 <HAL_RCC_OscConfig+0x180>
      {
        return HAL_ERROR;
 8002e70:	2301      	movs	r3, #1
 8002e72:	e18f      	b.n	8003194 <HAL_RCC_OscConfig+0x4a0>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002e74:	4b3b      	ldr	r3, [pc, #236]	; (8002f64 <HAL_RCC_OscConfig+0x270>)
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	691b      	ldr	r3, [r3, #16]
 8002e80:	00db      	lsls	r3, r3, #3
 8002e82:	4938      	ldr	r1, [pc, #224]	; (8002f64 <HAL_RCC_OscConfig+0x270>)
 8002e84:	4313      	orrs	r3, r2
 8002e86:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002e88:	e03a      	b.n	8002f00 <HAL_RCC_OscConfig+0x20c>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	68db      	ldr	r3, [r3, #12]
 8002e8e:	2b00      	cmp	r3, #0
 8002e90:	d020      	beq.n	8002ed4 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002e92:	4b35      	ldr	r3, [pc, #212]	; (8002f68 <HAL_RCC_OscConfig+0x274>)
 8002e94:	2201      	movs	r2, #1
 8002e96:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e98:	f7fe f8ba 	bl	8001010 <HAL_GetTick>
 8002e9c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002e9e:	e008      	b.n	8002eb2 <HAL_RCC_OscConfig+0x1be>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002ea0:	f7fe f8b6 	bl	8001010 <HAL_GetTick>
 8002ea4:	4602      	mov	r2, r0
 8002ea6:	693b      	ldr	r3, [r7, #16]
 8002ea8:	1ad3      	subs	r3, r2, r3
 8002eaa:	2b02      	cmp	r3, #2
 8002eac:	d901      	bls.n	8002eb2 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8002eae:	2303      	movs	r3, #3
 8002eb0:	e170      	b.n	8003194 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002eb2:	4b2c      	ldr	r3, [pc, #176]	; (8002f64 <HAL_RCC_OscConfig+0x270>)
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	f003 0302 	and.w	r3, r3, #2
 8002eba:	2b00      	cmp	r3, #0
 8002ebc:	d0f0      	beq.n	8002ea0 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002ebe:	4b29      	ldr	r3, [pc, #164]	; (8002f64 <HAL_RCC_OscConfig+0x270>)
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	691b      	ldr	r3, [r3, #16]
 8002eca:	00db      	lsls	r3, r3, #3
 8002ecc:	4925      	ldr	r1, [pc, #148]	; (8002f64 <HAL_RCC_OscConfig+0x270>)
 8002ece:	4313      	orrs	r3, r2
 8002ed0:	600b      	str	r3, [r1, #0]
 8002ed2:	e015      	b.n	8002f00 <HAL_RCC_OscConfig+0x20c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002ed4:	4b24      	ldr	r3, [pc, #144]	; (8002f68 <HAL_RCC_OscConfig+0x274>)
 8002ed6:	2200      	movs	r2, #0
 8002ed8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002eda:	f7fe f899 	bl	8001010 <HAL_GetTick>
 8002ede:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002ee0:	e008      	b.n	8002ef4 <HAL_RCC_OscConfig+0x200>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002ee2:	f7fe f895 	bl	8001010 <HAL_GetTick>
 8002ee6:	4602      	mov	r2, r0
 8002ee8:	693b      	ldr	r3, [r7, #16]
 8002eea:	1ad3      	subs	r3, r2, r3
 8002eec:	2b02      	cmp	r3, #2
 8002eee:	d901      	bls.n	8002ef4 <HAL_RCC_OscConfig+0x200>
          {
            return HAL_TIMEOUT;
 8002ef0:	2303      	movs	r3, #3
 8002ef2:	e14f      	b.n	8003194 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002ef4:	4b1b      	ldr	r3, [pc, #108]	; (8002f64 <HAL_RCC_OscConfig+0x270>)
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	f003 0302 	and.w	r3, r3, #2
 8002efc:	2b00      	cmp	r3, #0
 8002efe:	d1f0      	bne.n	8002ee2 <HAL_RCC_OscConfig+0x1ee>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	f003 0308 	and.w	r3, r3, #8
 8002f08:	2b00      	cmp	r3, #0
 8002f0a:	d037      	beq.n	8002f7c <HAL_RCC_OscConfig+0x288>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	695b      	ldr	r3, [r3, #20]
 8002f10:	2b00      	cmp	r3, #0
 8002f12:	d016      	beq.n	8002f42 <HAL_RCC_OscConfig+0x24e>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002f14:	4b15      	ldr	r3, [pc, #84]	; (8002f6c <HAL_RCC_OscConfig+0x278>)
 8002f16:	2201      	movs	r2, #1
 8002f18:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002f1a:	f7fe f879 	bl	8001010 <HAL_GetTick>
 8002f1e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002f20:	e008      	b.n	8002f34 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002f22:	f7fe f875 	bl	8001010 <HAL_GetTick>
 8002f26:	4602      	mov	r2, r0
 8002f28:	693b      	ldr	r3, [r7, #16]
 8002f2a:	1ad3      	subs	r3, r2, r3
 8002f2c:	2b02      	cmp	r3, #2
 8002f2e:	d901      	bls.n	8002f34 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8002f30:	2303      	movs	r3, #3
 8002f32:	e12f      	b.n	8003194 <HAL_RCC_OscConfig+0x4a0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002f34:	4b0b      	ldr	r3, [pc, #44]	; (8002f64 <HAL_RCC_OscConfig+0x270>)
 8002f36:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002f38:	f003 0302 	and.w	r3, r3, #2
 8002f3c:	2b00      	cmp	r3, #0
 8002f3e:	d0f0      	beq.n	8002f22 <HAL_RCC_OscConfig+0x22e>
 8002f40:	e01c      	b.n	8002f7c <HAL_RCC_OscConfig+0x288>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002f42:	4b0a      	ldr	r3, [pc, #40]	; (8002f6c <HAL_RCC_OscConfig+0x278>)
 8002f44:	2200      	movs	r2, #0
 8002f46:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002f48:	f7fe f862 	bl	8001010 <HAL_GetTick>
 8002f4c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002f4e:	e00f      	b.n	8002f70 <HAL_RCC_OscConfig+0x27c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002f50:	f7fe f85e 	bl	8001010 <HAL_GetTick>
 8002f54:	4602      	mov	r2, r0
 8002f56:	693b      	ldr	r3, [r7, #16]
 8002f58:	1ad3      	subs	r3, r2, r3
 8002f5a:	2b02      	cmp	r3, #2
 8002f5c:	d908      	bls.n	8002f70 <HAL_RCC_OscConfig+0x27c>
        {
          return HAL_TIMEOUT;
 8002f5e:	2303      	movs	r3, #3
 8002f60:	e118      	b.n	8003194 <HAL_RCC_OscConfig+0x4a0>
 8002f62:	bf00      	nop
 8002f64:	40023800 	.word	0x40023800
 8002f68:	42470000 	.word	0x42470000
 8002f6c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002f70:	4b8a      	ldr	r3, [pc, #552]	; (800319c <HAL_RCC_OscConfig+0x4a8>)
 8002f72:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002f74:	f003 0302 	and.w	r3, r3, #2
 8002f78:	2b00      	cmp	r3, #0
 8002f7a:	d1e9      	bne.n	8002f50 <HAL_RCC_OscConfig+0x25c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	f003 0304 	and.w	r3, r3, #4
 8002f84:	2b00      	cmp	r3, #0
 8002f86:	f000 8097 	beq.w	80030b8 <HAL_RCC_OscConfig+0x3c4>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002f8a:	2300      	movs	r3, #0
 8002f8c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002f8e:	4b83      	ldr	r3, [pc, #524]	; (800319c <HAL_RCC_OscConfig+0x4a8>)
 8002f90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f92:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002f96:	2b00      	cmp	r3, #0
 8002f98:	d10f      	bne.n	8002fba <HAL_RCC_OscConfig+0x2c6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002f9a:	2300      	movs	r3, #0
 8002f9c:	60fb      	str	r3, [r7, #12]
 8002f9e:	4b7f      	ldr	r3, [pc, #508]	; (800319c <HAL_RCC_OscConfig+0x4a8>)
 8002fa0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fa2:	4a7e      	ldr	r2, [pc, #504]	; (800319c <HAL_RCC_OscConfig+0x4a8>)
 8002fa4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002fa8:	6413      	str	r3, [r2, #64]	; 0x40
 8002faa:	4b7c      	ldr	r3, [pc, #496]	; (800319c <HAL_RCC_OscConfig+0x4a8>)
 8002fac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002fb2:	60fb      	str	r3, [r7, #12]
 8002fb4:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8002fb6:	2301      	movs	r3, #1
 8002fb8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002fba:	4b79      	ldr	r3, [pc, #484]	; (80031a0 <HAL_RCC_OscConfig+0x4ac>)
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002fc2:	2b00      	cmp	r3, #0
 8002fc4:	d118      	bne.n	8002ff8 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002fc6:	4b76      	ldr	r3, [pc, #472]	; (80031a0 <HAL_RCC_OscConfig+0x4ac>)
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	4a75      	ldr	r2, [pc, #468]	; (80031a0 <HAL_RCC_OscConfig+0x4ac>)
 8002fcc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002fd0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002fd2:	f7fe f81d 	bl	8001010 <HAL_GetTick>
 8002fd6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002fd8:	e008      	b.n	8002fec <HAL_RCC_OscConfig+0x2f8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002fda:	f7fe f819 	bl	8001010 <HAL_GetTick>
 8002fde:	4602      	mov	r2, r0
 8002fe0:	693b      	ldr	r3, [r7, #16]
 8002fe2:	1ad3      	subs	r3, r2, r3
 8002fe4:	2b02      	cmp	r3, #2
 8002fe6:	d901      	bls.n	8002fec <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8002fe8:	2303      	movs	r3, #3
 8002fea:	e0d3      	b.n	8003194 <HAL_RCC_OscConfig+0x4a0>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002fec:	4b6c      	ldr	r3, [pc, #432]	; (80031a0 <HAL_RCC_OscConfig+0x4ac>)
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ff4:	2b00      	cmp	r3, #0
 8002ff6:	d0f0      	beq.n	8002fda <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	689b      	ldr	r3, [r3, #8]
 8002ffc:	2b01      	cmp	r3, #1
 8002ffe:	d106      	bne.n	800300e <HAL_RCC_OscConfig+0x31a>
 8003000:	4b66      	ldr	r3, [pc, #408]	; (800319c <HAL_RCC_OscConfig+0x4a8>)
 8003002:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003004:	4a65      	ldr	r2, [pc, #404]	; (800319c <HAL_RCC_OscConfig+0x4a8>)
 8003006:	f043 0301 	orr.w	r3, r3, #1
 800300a:	6713      	str	r3, [r2, #112]	; 0x70
 800300c:	e01c      	b.n	8003048 <HAL_RCC_OscConfig+0x354>
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	689b      	ldr	r3, [r3, #8]
 8003012:	2b05      	cmp	r3, #5
 8003014:	d10c      	bne.n	8003030 <HAL_RCC_OscConfig+0x33c>
 8003016:	4b61      	ldr	r3, [pc, #388]	; (800319c <HAL_RCC_OscConfig+0x4a8>)
 8003018:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800301a:	4a60      	ldr	r2, [pc, #384]	; (800319c <HAL_RCC_OscConfig+0x4a8>)
 800301c:	f043 0304 	orr.w	r3, r3, #4
 8003020:	6713      	str	r3, [r2, #112]	; 0x70
 8003022:	4b5e      	ldr	r3, [pc, #376]	; (800319c <HAL_RCC_OscConfig+0x4a8>)
 8003024:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003026:	4a5d      	ldr	r2, [pc, #372]	; (800319c <HAL_RCC_OscConfig+0x4a8>)
 8003028:	f043 0301 	orr.w	r3, r3, #1
 800302c:	6713      	str	r3, [r2, #112]	; 0x70
 800302e:	e00b      	b.n	8003048 <HAL_RCC_OscConfig+0x354>
 8003030:	4b5a      	ldr	r3, [pc, #360]	; (800319c <HAL_RCC_OscConfig+0x4a8>)
 8003032:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003034:	4a59      	ldr	r2, [pc, #356]	; (800319c <HAL_RCC_OscConfig+0x4a8>)
 8003036:	f023 0301 	bic.w	r3, r3, #1
 800303a:	6713      	str	r3, [r2, #112]	; 0x70
 800303c:	4b57      	ldr	r3, [pc, #348]	; (800319c <HAL_RCC_OscConfig+0x4a8>)
 800303e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003040:	4a56      	ldr	r2, [pc, #344]	; (800319c <HAL_RCC_OscConfig+0x4a8>)
 8003042:	f023 0304 	bic.w	r3, r3, #4
 8003046:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	689b      	ldr	r3, [r3, #8]
 800304c:	2b00      	cmp	r3, #0
 800304e:	d015      	beq.n	800307c <HAL_RCC_OscConfig+0x388>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003050:	f7fd ffde 	bl	8001010 <HAL_GetTick>
 8003054:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003056:	e00a      	b.n	800306e <HAL_RCC_OscConfig+0x37a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003058:	f7fd ffda 	bl	8001010 <HAL_GetTick>
 800305c:	4602      	mov	r2, r0
 800305e:	693b      	ldr	r3, [r7, #16]
 8003060:	1ad3      	subs	r3, r2, r3
 8003062:	f241 3288 	movw	r2, #5000	; 0x1388
 8003066:	4293      	cmp	r3, r2
 8003068:	d901      	bls.n	800306e <HAL_RCC_OscConfig+0x37a>
        {
          return HAL_TIMEOUT;
 800306a:	2303      	movs	r3, #3
 800306c:	e092      	b.n	8003194 <HAL_RCC_OscConfig+0x4a0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800306e:	4b4b      	ldr	r3, [pc, #300]	; (800319c <HAL_RCC_OscConfig+0x4a8>)
 8003070:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003072:	f003 0302 	and.w	r3, r3, #2
 8003076:	2b00      	cmp	r3, #0
 8003078:	d0ee      	beq.n	8003058 <HAL_RCC_OscConfig+0x364>
 800307a:	e014      	b.n	80030a6 <HAL_RCC_OscConfig+0x3b2>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800307c:	f7fd ffc8 	bl	8001010 <HAL_GetTick>
 8003080:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003082:	e00a      	b.n	800309a <HAL_RCC_OscConfig+0x3a6>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003084:	f7fd ffc4 	bl	8001010 <HAL_GetTick>
 8003088:	4602      	mov	r2, r0
 800308a:	693b      	ldr	r3, [r7, #16]
 800308c:	1ad3      	subs	r3, r2, r3
 800308e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003092:	4293      	cmp	r3, r2
 8003094:	d901      	bls.n	800309a <HAL_RCC_OscConfig+0x3a6>
        {
          return HAL_TIMEOUT;
 8003096:	2303      	movs	r3, #3
 8003098:	e07c      	b.n	8003194 <HAL_RCC_OscConfig+0x4a0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800309a:	4b40      	ldr	r3, [pc, #256]	; (800319c <HAL_RCC_OscConfig+0x4a8>)
 800309c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800309e:	f003 0302 	and.w	r3, r3, #2
 80030a2:	2b00      	cmp	r3, #0
 80030a4:	d1ee      	bne.n	8003084 <HAL_RCC_OscConfig+0x390>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80030a6:	7dfb      	ldrb	r3, [r7, #23]
 80030a8:	2b01      	cmp	r3, #1
 80030aa:	d105      	bne.n	80030b8 <HAL_RCC_OscConfig+0x3c4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80030ac:	4b3b      	ldr	r3, [pc, #236]	; (800319c <HAL_RCC_OscConfig+0x4a8>)
 80030ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030b0:	4a3a      	ldr	r2, [pc, #232]	; (800319c <HAL_RCC_OscConfig+0x4a8>)
 80030b2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80030b6:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	699b      	ldr	r3, [r3, #24]
 80030bc:	2b00      	cmp	r3, #0
 80030be:	d068      	beq.n	8003192 <HAL_RCC_OscConfig+0x49e>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80030c0:	4b36      	ldr	r3, [pc, #216]	; (800319c <HAL_RCC_OscConfig+0x4a8>)
 80030c2:	689b      	ldr	r3, [r3, #8]
 80030c4:	f003 030c 	and.w	r3, r3, #12
 80030c8:	2b08      	cmp	r3, #8
 80030ca:	d060      	beq.n	800318e <HAL_RCC_OscConfig+0x49a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	699b      	ldr	r3, [r3, #24]
 80030d0:	2b02      	cmp	r3, #2
 80030d2:	d145      	bne.n	8003160 <HAL_RCC_OscConfig+0x46c>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80030d4:	4b33      	ldr	r3, [pc, #204]	; (80031a4 <HAL_RCC_OscConfig+0x4b0>)
 80030d6:	2200      	movs	r2, #0
 80030d8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80030da:	f7fd ff99 	bl	8001010 <HAL_GetTick>
 80030de:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80030e0:	e008      	b.n	80030f4 <HAL_RCC_OscConfig+0x400>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80030e2:	f7fd ff95 	bl	8001010 <HAL_GetTick>
 80030e6:	4602      	mov	r2, r0
 80030e8:	693b      	ldr	r3, [r7, #16]
 80030ea:	1ad3      	subs	r3, r2, r3
 80030ec:	2b02      	cmp	r3, #2
 80030ee:	d901      	bls.n	80030f4 <HAL_RCC_OscConfig+0x400>
          {
            return HAL_TIMEOUT;
 80030f0:	2303      	movs	r3, #3
 80030f2:	e04f      	b.n	8003194 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80030f4:	4b29      	ldr	r3, [pc, #164]	; (800319c <HAL_RCC_OscConfig+0x4a8>)
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80030fc:	2b00      	cmp	r3, #0
 80030fe:	d1f0      	bne.n	80030e2 <HAL_RCC_OscConfig+0x3ee>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	69da      	ldr	r2, [r3, #28]
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	6a1b      	ldr	r3, [r3, #32]
 8003108:	431a      	orrs	r2, r3
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800310e:	019b      	lsls	r3, r3, #6
 8003110:	431a      	orrs	r2, r3
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003116:	085b      	lsrs	r3, r3, #1
 8003118:	3b01      	subs	r3, #1
 800311a:	041b      	lsls	r3, r3, #16
 800311c:	431a      	orrs	r2, r3
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003122:	061b      	lsls	r3, r3, #24
 8003124:	431a      	orrs	r2, r3
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800312a:	071b      	lsls	r3, r3, #28
 800312c:	491b      	ldr	r1, [pc, #108]	; (800319c <HAL_RCC_OscConfig+0x4a8>)
 800312e:	4313      	orrs	r3, r2
 8003130:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003132:	4b1c      	ldr	r3, [pc, #112]	; (80031a4 <HAL_RCC_OscConfig+0x4b0>)
 8003134:	2201      	movs	r2, #1
 8003136:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003138:	f7fd ff6a 	bl	8001010 <HAL_GetTick>
 800313c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800313e:	e008      	b.n	8003152 <HAL_RCC_OscConfig+0x45e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003140:	f7fd ff66 	bl	8001010 <HAL_GetTick>
 8003144:	4602      	mov	r2, r0
 8003146:	693b      	ldr	r3, [r7, #16]
 8003148:	1ad3      	subs	r3, r2, r3
 800314a:	2b02      	cmp	r3, #2
 800314c:	d901      	bls.n	8003152 <HAL_RCC_OscConfig+0x45e>
          {
            return HAL_TIMEOUT;
 800314e:	2303      	movs	r3, #3
 8003150:	e020      	b.n	8003194 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003152:	4b12      	ldr	r3, [pc, #72]	; (800319c <HAL_RCC_OscConfig+0x4a8>)
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800315a:	2b00      	cmp	r3, #0
 800315c:	d0f0      	beq.n	8003140 <HAL_RCC_OscConfig+0x44c>
 800315e:	e018      	b.n	8003192 <HAL_RCC_OscConfig+0x49e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003160:	4b10      	ldr	r3, [pc, #64]	; (80031a4 <HAL_RCC_OscConfig+0x4b0>)
 8003162:	2200      	movs	r2, #0
 8003164:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003166:	f7fd ff53 	bl	8001010 <HAL_GetTick>
 800316a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800316c:	e008      	b.n	8003180 <HAL_RCC_OscConfig+0x48c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800316e:	f7fd ff4f 	bl	8001010 <HAL_GetTick>
 8003172:	4602      	mov	r2, r0
 8003174:	693b      	ldr	r3, [r7, #16]
 8003176:	1ad3      	subs	r3, r2, r3
 8003178:	2b02      	cmp	r3, #2
 800317a:	d901      	bls.n	8003180 <HAL_RCC_OscConfig+0x48c>
          {
            return HAL_TIMEOUT;
 800317c:	2303      	movs	r3, #3
 800317e:	e009      	b.n	8003194 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003180:	4b06      	ldr	r3, [pc, #24]	; (800319c <HAL_RCC_OscConfig+0x4a8>)
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003188:	2b00      	cmp	r3, #0
 800318a:	d1f0      	bne.n	800316e <HAL_RCC_OscConfig+0x47a>
 800318c:	e001      	b.n	8003192 <HAL_RCC_OscConfig+0x49e>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 800318e:	2301      	movs	r3, #1
 8003190:	e000      	b.n	8003194 <HAL_RCC_OscConfig+0x4a0>
    }
  }
  return HAL_OK;
 8003192:	2300      	movs	r3, #0
}
 8003194:	4618      	mov	r0, r3
 8003196:	3718      	adds	r7, #24
 8003198:	46bd      	mov	sp, r7
 800319a:	bd80      	pop	{r7, pc}
 800319c:	40023800 	.word	0x40023800
 80031a0:	40007000 	.word	0x40007000
 80031a4:	42470060 	.word	0x42470060

080031a8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80031a8:	b580      	push	{r7, lr}
 80031aa:	b082      	sub	sp, #8
 80031ac:	af00      	add	r7, sp, #0
 80031ae:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	2b00      	cmp	r3, #0
 80031b4:	d101      	bne.n	80031ba <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80031b6:	2301      	movs	r3, #1
 80031b8:	e01d      	b.n	80031f6 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80031c0:	b2db      	uxtb	r3, r3
 80031c2:	2b00      	cmp	r3, #0
 80031c4:	d106      	bne.n	80031d4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	2200      	movs	r2, #0
 80031ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80031ce:	6878      	ldr	r0, [r7, #4]
 80031d0:	f7fd fcf8 	bl	8000bc4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	2202      	movs	r2, #2
 80031d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	681a      	ldr	r2, [r3, #0]
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	3304      	adds	r3, #4
 80031e4:	4619      	mov	r1, r3
 80031e6:	4610      	mov	r0, r2
 80031e8:	f000 f8e4 	bl	80033b4 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	2201      	movs	r2, #1
 80031f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80031f4:	2300      	movs	r3, #0
}
 80031f6:	4618      	mov	r0, r3
 80031f8:	3708      	adds	r7, #8
 80031fa:	46bd      	mov	sp, r7
 80031fc:	bd80      	pop	{r7, pc}

080031fe <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 80031fe:	b480      	push	{r7}
 8003200:	b085      	sub	sp, #20
 8003202:	af00      	add	r7, sp, #0
 8003204:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	2202      	movs	r2, #2
 800320a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	689b      	ldr	r3, [r3, #8]
 8003214:	f003 0307 	and.w	r3, r3, #7
 8003218:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800321a:	68fb      	ldr	r3, [r7, #12]
 800321c:	2b06      	cmp	r3, #6
 800321e:	d007      	beq.n	8003230 <HAL_TIM_Base_Start+0x32>
  {
    __HAL_TIM_ENABLE(htim);
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	681a      	ldr	r2, [r3, #0]
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	f042 0201 	orr.w	r2, r2, #1
 800322e:	601a      	str	r2, [r3, #0]
  }

  /* Change the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	2201      	movs	r2, #1
 8003234:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8003238:	2300      	movs	r3, #0
}
 800323a:	4618      	mov	r0, r3
 800323c:	3714      	adds	r7, #20
 800323e:	46bd      	mov	sp, r7
 8003240:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003244:	4770      	bx	lr

08003246 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003246:	b580      	push	{r7, lr}
 8003248:	b084      	sub	sp, #16
 800324a:	af00      	add	r7, sp, #0
 800324c:	6078      	str	r0, [r7, #4]
 800324e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003256:	2b01      	cmp	r3, #1
 8003258:	d101      	bne.n	800325e <HAL_TIM_ConfigClockSource+0x18>
 800325a:	2302      	movs	r3, #2
 800325c:	e0a6      	b.n	80033ac <HAL_TIM_ConfigClockSource+0x166>
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	2201      	movs	r2, #1
 8003262:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	2202      	movs	r2, #2
 800326a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	689b      	ldr	r3, [r3, #8]
 8003274:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003276:	68fb      	ldr	r3, [r7, #12]
 8003278:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800327c:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800327e:	68fb      	ldr	r3, [r7, #12]
 8003280:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003284:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	68fa      	ldr	r2, [r7, #12]
 800328c:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800328e:	683b      	ldr	r3, [r7, #0]
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	2b40      	cmp	r3, #64	; 0x40
 8003294:	d067      	beq.n	8003366 <HAL_TIM_ConfigClockSource+0x120>
 8003296:	2b40      	cmp	r3, #64	; 0x40
 8003298:	d80b      	bhi.n	80032b2 <HAL_TIM_ConfigClockSource+0x6c>
 800329a:	2b10      	cmp	r3, #16
 800329c:	d073      	beq.n	8003386 <HAL_TIM_ConfigClockSource+0x140>
 800329e:	2b10      	cmp	r3, #16
 80032a0:	d802      	bhi.n	80032a8 <HAL_TIM_ConfigClockSource+0x62>
 80032a2:	2b00      	cmp	r3, #0
 80032a4:	d06f      	beq.n	8003386 <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 80032a6:	e078      	b.n	800339a <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 80032a8:	2b20      	cmp	r3, #32
 80032aa:	d06c      	beq.n	8003386 <HAL_TIM_ConfigClockSource+0x140>
 80032ac:	2b30      	cmp	r3, #48	; 0x30
 80032ae:	d06a      	beq.n	8003386 <HAL_TIM_ConfigClockSource+0x140>
      break;
 80032b0:	e073      	b.n	800339a <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 80032b2:	2b70      	cmp	r3, #112	; 0x70
 80032b4:	d00d      	beq.n	80032d2 <HAL_TIM_ConfigClockSource+0x8c>
 80032b6:	2b70      	cmp	r3, #112	; 0x70
 80032b8:	d804      	bhi.n	80032c4 <HAL_TIM_ConfigClockSource+0x7e>
 80032ba:	2b50      	cmp	r3, #80	; 0x50
 80032bc:	d033      	beq.n	8003326 <HAL_TIM_ConfigClockSource+0xe0>
 80032be:	2b60      	cmp	r3, #96	; 0x60
 80032c0:	d041      	beq.n	8003346 <HAL_TIM_ConfigClockSource+0x100>
      break;
 80032c2:	e06a      	b.n	800339a <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 80032c4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80032c8:	d066      	beq.n	8003398 <HAL_TIM_ConfigClockSource+0x152>
 80032ca:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80032ce:	d017      	beq.n	8003300 <HAL_TIM_ConfigClockSource+0xba>
      break;
 80032d0:	e063      	b.n	800339a <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	6818      	ldr	r0, [r3, #0]
 80032d6:	683b      	ldr	r3, [r7, #0]
 80032d8:	6899      	ldr	r1, [r3, #8]
 80032da:	683b      	ldr	r3, [r7, #0]
 80032dc:	685a      	ldr	r2, [r3, #4]
 80032de:	683b      	ldr	r3, [r7, #0]
 80032e0:	68db      	ldr	r3, [r3, #12]
 80032e2:	f000 f981 	bl	80035e8 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	689b      	ldr	r3, [r3, #8]
 80032ec:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80032ee:	68fb      	ldr	r3, [r7, #12]
 80032f0:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80032f4:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	68fa      	ldr	r2, [r7, #12]
 80032fc:	609a      	str	r2, [r3, #8]
      break;
 80032fe:	e04c      	b.n	800339a <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	6818      	ldr	r0, [r3, #0]
 8003304:	683b      	ldr	r3, [r7, #0]
 8003306:	6899      	ldr	r1, [r3, #8]
 8003308:	683b      	ldr	r3, [r7, #0]
 800330a:	685a      	ldr	r2, [r3, #4]
 800330c:	683b      	ldr	r3, [r7, #0]
 800330e:	68db      	ldr	r3, [r3, #12]
 8003310:	f000 f96a 	bl	80035e8 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	689a      	ldr	r2, [r3, #8]
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003322:	609a      	str	r2, [r3, #8]
      break;
 8003324:	e039      	b.n	800339a <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	6818      	ldr	r0, [r3, #0]
 800332a:	683b      	ldr	r3, [r7, #0]
 800332c:	6859      	ldr	r1, [r3, #4]
 800332e:	683b      	ldr	r3, [r7, #0]
 8003330:	68db      	ldr	r3, [r3, #12]
 8003332:	461a      	mov	r2, r3
 8003334:	f000 f8de 	bl	80034f4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	2150      	movs	r1, #80	; 0x50
 800333e:	4618      	mov	r0, r3
 8003340:	f000 f937 	bl	80035b2 <TIM_ITRx_SetConfig>
      break;
 8003344:	e029      	b.n	800339a <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	6818      	ldr	r0, [r3, #0]
 800334a:	683b      	ldr	r3, [r7, #0]
 800334c:	6859      	ldr	r1, [r3, #4]
 800334e:	683b      	ldr	r3, [r7, #0]
 8003350:	68db      	ldr	r3, [r3, #12]
 8003352:	461a      	mov	r2, r3
 8003354:	f000 f8fd 	bl	8003552 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	2160      	movs	r1, #96	; 0x60
 800335e:	4618      	mov	r0, r3
 8003360:	f000 f927 	bl	80035b2 <TIM_ITRx_SetConfig>
      break;
 8003364:	e019      	b.n	800339a <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	6818      	ldr	r0, [r3, #0]
 800336a:	683b      	ldr	r3, [r7, #0]
 800336c:	6859      	ldr	r1, [r3, #4]
 800336e:	683b      	ldr	r3, [r7, #0]
 8003370:	68db      	ldr	r3, [r3, #12]
 8003372:	461a      	mov	r2, r3
 8003374:	f000 f8be 	bl	80034f4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	2140      	movs	r1, #64	; 0x40
 800337e:	4618      	mov	r0, r3
 8003380:	f000 f917 	bl	80035b2 <TIM_ITRx_SetConfig>
      break;
 8003384:	e009      	b.n	800339a <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	681a      	ldr	r2, [r3, #0]
 800338a:	683b      	ldr	r3, [r7, #0]
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	4619      	mov	r1, r3
 8003390:	4610      	mov	r0, r2
 8003392:	f000 f90e 	bl	80035b2 <TIM_ITRx_SetConfig>
      break;
 8003396:	e000      	b.n	800339a <HAL_TIM_ConfigClockSource+0x154>
      break;
 8003398:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	2201      	movs	r2, #1
 800339e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	2200      	movs	r2, #0
 80033a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80033aa:	2300      	movs	r3, #0
}
 80033ac:	4618      	mov	r0, r3
 80033ae:	3710      	adds	r7, #16
 80033b0:	46bd      	mov	sp, r7
 80033b2:	bd80      	pop	{r7, pc}

080033b4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80033b4:	b480      	push	{r7}
 80033b6:	b085      	sub	sp, #20
 80033b8:	af00      	add	r7, sp, #0
 80033ba:	6078      	str	r0, [r7, #4]
 80033bc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	4a40      	ldr	r2, [pc, #256]	; (80034c8 <TIM_Base_SetConfig+0x114>)
 80033c8:	4293      	cmp	r3, r2
 80033ca:	d013      	beq.n	80033f4 <TIM_Base_SetConfig+0x40>
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80033d2:	d00f      	beq.n	80033f4 <TIM_Base_SetConfig+0x40>
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	4a3d      	ldr	r2, [pc, #244]	; (80034cc <TIM_Base_SetConfig+0x118>)
 80033d8:	4293      	cmp	r3, r2
 80033da:	d00b      	beq.n	80033f4 <TIM_Base_SetConfig+0x40>
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	4a3c      	ldr	r2, [pc, #240]	; (80034d0 <TIM_Base_SetConfig+0x11c>)
 80033e0:	4293      	cmp	r3, r2
 80033e2:	d007      	beq.n	80033f4 <TIM_Base_SetConfig+0x40>
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	4a3b      	ldr	r2, [pc, #236]	; (80034d4 <TIM_Base_SetConfig+0x120>)
 80033e8:	4293      	cmp	r3, r2
 80033ea:	d003      	beq.n	80033f4 <TIM_Base_SetConfig+0x40>
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	4a3a      	ldr	r2, [pc, #232]	; (80034d8 <TIM_Base_SetConfig+0x124>)
 80033f0:	4293      	cmp	r3, r2
 80033f2:	d108      	bne.n	8003406 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80033f4:	68fb      	ldr	r3, [r7, #12]
 80033f6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80033fa:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80033fc:	683b      	ldr	r3, [r7, #0]
 80033fe:	685b      	ldr	r3, [r3, #4]
 8003400:	68fa      	ldr	r2, [r7, #12]
 8003402:	4313      	orrs	r3, r2
 8003404:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	4a2f      	ldr	r2, [pc, #188]	; (80034c8 <TIM_Base_SetConfig+0x114>)
 800340a:	4293      	cmp	r3, r2
 800340c:	d02b      	beq.n	8003466 <TIM_Base_SetConfig+0xb2>
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003414:	d027      	beq.n	8003466 <TIM_Base_SetConfig+0xb2>
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	4a2c      	ldr	r2, [pc, #176]	; (80034cc <TIM_Base_SetConfig+0x118>)
 800341a:	4293      	cmp	r3, r2
 800341c:	d023      	beq.n	8003466 <TIM_Base_SetConfig+0xb2>
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	4a2b      	ldr	r2, [pc, #172]	; (80034d0 <TIM_Base_SetConfig+0x11c>)
 8003422:	4293      	cmp	r3, r2
 8003424:	d01f      	beq.n	8003466 <TIM_Base_SetConfig+0xb2>
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	4a2a      	ldr	r2, [pc, #168]	; (80034d4 <TIM_Base_SetConfig+0x120>)
 800342a:	4293      	cmp	r3, r2
 800342c:	d01b      	beq.n	8003466 <TIM_Base_SetConfig+0xb2>
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	4a29      	ldr	r2, [pc, #164]	; (80034d8 <TIM_Base_SetConfig+0x124>)
 8003432:	4293      	cmp	r3, r2
 8003434:	d017      	beq.n	8003466 <TIM_Base_SetConfig+0xb2>
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	4a28      	ldr	r2, [pc, #160]	; (80034dc <TIM_Base_SetConfig+0x128>)
 800343a:	4293      	cmp	r3, r2
 800343c:	d013      	beq.n	8003466 <TIM_Base_SetConfig+0xb2>
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	4a27      	ldr	r2, [pc, #156]	; (80034e0 <TIM_Base_SetConfig+0x12c>)
 8003442:	4293      	cmp	r3, r2
 8003444:	d00f      	beq.n	8003466 <TIM_Base_SetConfig+0xb2>
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	4a26      	ldr	r2, [pc, #152]	; (80034e4 <TIM_Base_SetConfig+0x130>)
 800344a:	4293      	cmp	r3, r2
 800344c:	d00b      	beq.n	8003466 <TIM_Base_SetConfig+0xb2>
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	4a25      	ldr	r2, [pc, #148]	; (80034e8 <TIM_Base_SetConfig+0x134>)
 8003452:	4293      	cmp	r3, r2
 8003454:	d007      	beq.n	8003466 <TIM_Base_SetConfig+0xb2>
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	4a24      	ldr	r2, [pc, #144]	; (80034ec <TIM_Base_SetConfig+0x138>)
 800345a:	4293      	cmp	r3, r2
 800345c:	d003      	beq.n	8003466 <TIM_Base_SetConfig+0xb2>
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	4a23      	ldr	r2, [pc, #140]	; (80034f0 <TIM_Base_SetConfig+0x13c>)
 8003462:	4293      	cmp	r3, r2
 8003464:	d108      	bne.n	8003478 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003466:	68fb      	ldr	r3, [r7, #12]
 8003468:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800346c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800346e:	683b      	ldr	r3, [r7, #0]
 8003470:	68db      	ldr	r3, [r3, #12]
 8003472:	68fa      	ldr	r2, [r7, #12]
 8003474:	4313      	orrs	r3, r2
 8003476:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003478:	68fb      	ldr	r3, [r7, #12]
 800347a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800347e:	683b      	ldr	r3, [r7, #0]
 8003480:	695b      	ldr	r3, [r3, #20]
 8003482:	4313      	orrs	r3, r2
 8003484:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	68fa      	ldr	r2, [r7, #12]
 800348a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800348c:	683b      	ldr	r3, [r7, #0]
 800348e:	689a      	ldr	r2, [r3, #8]
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003494:	683b      	ldr	r3, [r7, #0]
 8003496:	681a      	ldr	r2, [r3, #0]
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	4a0a      	ldr	r2, [pc, #40]	; (80034c8 <TIM_Base_SetConfig+0x114>)
 80034a0:	4293      	cmp	r3, r2
 80034a2:	d003      	beq.n	80034ac <TIM_Base_SetConfig+0xf8>
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	4a0c      	ldr	r2, [pc, #48]	; (80034d8 <TIM_Base_SetConfig+0x124>)
 80034a8:	4293      	cmp	r3, r2
 80034aa:	d103      	bne.n	80034b4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80034ac:	683b      	ldr	r3, [r7, #0]
 80034ae:	691a      	ldr	r2, [r3, #16]
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	2201      	movs	r2, #1
 80034b8:	615a      	str	r2, [r3, #20]
}
 80034ba:	bf00      	nop
 80034bc:	3714      	adds	r7, #20
 80034be:	46bd      	mov	sp, r7
 80034c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034c4:	4770      	bx	lr
 80034c6:	bf00      	nop
 80034c8:	40010000 	.word	0x40010000
 80034cc:	40000400 	.word	0x40000400
 80034d0:	40000800 	.word	0x40000800
 80034d4:	40000c00 	.word	0x40000c00
 80034d8:	40010400 	.word	0x40010400
 80034dc:	40014000 	.word	0x40014000
 80034e0:	40014400 	.word	0x40014400
 80034e4:	40014800 	.word	0x40014800
 80034e8:	40001800 	.word	0x40001800
 80034ec:	40001c00 	.word	0x40001c00
 80034f0:	40002000 	.word	0x40002000

080034f4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80034f4:	b480      	push	{r7}
 80034f6:	b087      	sub	sp, #28
 80034f8:	af00      	add	r7, sp, #0
 80034fa:	60f8      	str	r0, [r7, #12]
 80034fc:	60b9      	str	r1, [r7, #8]
 80034fe:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003500:	68fb      	ldr	r3, [r7, #12]
 8003502:	6a1b      	ldr	r3, [r3, #32]
 8003504:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003506:	68fb      	ldr	r3, [r7, #12]
 8003508:	6a1b      	ldr	r3, [r3, #32]
 800350a:	f023 0201 	bic.w	r2, r3, #1
 800350e:	68fb      	ldr	r3, [r7, #12]
 8003510:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003512:	68fb      	ldr	r3, [r7, #12]
 8003514:	699b      	ldr	r3, [r3, #24]
 8003516:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003518:	693b      	ldr	r3, [r7, #16]
 800351a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800351e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	011b      	lsls	r3, r3, #4
 8003524:	693a      	ldr	r2, [r7, #16]
 8003526:	4313      	orrs	r3, r2
 8003528:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800352a:	697b      	ldr	r3, [r7, #20]
 800352c:	f023 030a 	bic.w	r3, r3, #10
 8003530:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003532:	697a      	ldr	r2, [r7, #20]
 8003534:	68bb      	ldr	r3, [r7, #8]
 8003536:	4313      	orrs	r3, r2
 8003538:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800353a:	68fb      	ldr	r3, [r7, #12]
 800353c:	693a      	ldr	r2, [r7, #16]
 800353e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003540:	68fb      	ldr	r3, [r7, #12]
 8003542:	697a      	ldr	r2, [r7, #20]
 8003544:	621a      	str	r2, [r3, #32]
}
 8003546:	bf00      	nop
 8003548:	371c      	adds	r7, #28
 800354a:	46bd      	mov	sp, r7
 800354c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003550:	4770      	bx	lr

08003552 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003552:	b480      	push	{r7}
 8003554:	b087      	sub	sp, #28
 8003556:	af00      	add	r7, sp, #0
 8003558:	60f8      	str	r0, [r7, #12]
 800355a:	60b9      	str	r1, [r7, #8]
 800355c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800355e:	68fb      	ldr	r3, [r7, #12]
 8003560:	6a1b      	ldr	r3, [r3, #32]
 8003562:	f023 0210 	bic.w	r2, r3, #16
 8003566:	68fb      	ldr	r3, [r7, #12]
 8003568:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800356a:	68fb      	ldr	r3, [r7, #12]
 800356c:	699b      	ldr	r3, [r3, #24]
 800356e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003570:	68fb      	ldr	r3, [r7, #12]
 8003572:	6a1b      	ldr	r3, [r3, #32]
 8003574:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003576:	697b      	ldr	r3, [r7, #20]
 8003578:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800357c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	031b      	lsls	r3, r3, #12
 8003582:	697a      	ldr	r2, [r7, #20]
 8003584:	4313      	orrs	r3, r2
 8003586:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003588:	693b      	ldr	r3, [r7, #16]
 800358a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800358e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003590:	68bb      	ldr	r3, [r7, #8]
 8003592:	011b      	lsls	r3, r3, #4
 8003594:	693a      	ldr	r2, [r7, #16]
 8003596:	4313      	orrs	r3, r2
 8003598:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800359a:	68fb      	ldr	r3, [r7, #12]
 800359c:	697a      	ldr	r2, [r7, #20]
 800359e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80035a0:	68fb      	ldr	r3, [r7, #12]
 80035a2:	693a      	ldr	r2, [r7, #16]
 80035a4:	621a      	str	r2, [r3, #32]
}
 80035a6:	bf00      	nop
 80035a8:	371c      	adds	r7, #28
 80035aa:	46bd      	mov	sp, r7
 80035ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035b0:	4770      	bx	lr

080035b2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80035b2:	b480      	push	{r7}
 80035b4:	b085      	sub	sp, #20
 80035b6:	af00      	add	r7, sp, #0
 80035b8:	6078      	str	r0, [r7, #4]
 80035ba:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	689b      	ldr	r3, [r3, #8]
 80035c0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80035c2:	68fb      	ldr	r3, [r7, #12]
 80035c4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80035c8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80035ca:	683a      	ldr	r2, [r7, #0]
 80035cc:	68fb      	ldr	r3, [r7, #12]
 80035ce:	4313      	orrs	r3, r2
 80035d0:	f043 0307 	orr.w	r3, r3, #7
 80035d4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	68fa      	ldr	r2, [r7, #12]
 80035da:	609a      	str	r2, [r3, #8]
}
 80035dc:	bf00      	nop
 80035de:	3714      	adds	r7, #20
 80035e0:	46bd      	mov	sp, r7
 80035e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035e6:	4770      	bx	lr

080035e8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80035e8:	b480      	push	{r7}
 80035ea:	b087      	sub	sp, #28
 80035ec:	af00      	add	r7, sp, #0
 80035ee:	60f8      	str	r0, [r7, #12]
 80035f0:	60b9      	str	r1, [r7, #8]
 80035f2:	607a      	str	r2, [r7, #4]
 80035f4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80035f6:	68fb      	ldr	r3, [r7, #12]
 80035f8:	689b      	ldr	r3, [r3, #8]
 80035fa:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80035fc:	697b      	ldr	r3, [r7, #20]
 80035fe:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003602:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003604:	683b      	ldr	r3, [r7, #0]
 8003606:	021a      	lsls	r2, r3, #8
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	431a      	orrs	r2, r3
 800360c:	68bb      	ldr	r3, [r7, #8]
 800360e:	4313      	orrs	r3, r2
 8003610:	697a      	ldr	r2, [r7, #20]
 8003612:	4313      	orrs	r3, r2
 8003614:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003616:	68fb      	ldr	r3, [r7, #12]
 8003618:	697a      	ldr	r2, [r7, #20]
 800361a:	609a      	str	r2, [r3, #8]
}
 800361c:	bf00      	nop
 800361e:	371c      	adds	r7, #28
 8003620:	46bd      	mov	sp, r7
 8003622:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003626:	4770      	bx	lr

08003628 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003628:	b480      	push	{r7}
 800362a:	b085      	sub	sp, #20
 800362c:	af00      	add	r7, sp, #0
 800362e:	6078      	str	r0, [r7, #4]
 8003630:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003638:	2b01      	cmp	r3, #1
 800363a:	d101      	bne.n	8003640 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800363c:	2302      	movs	r3, #2
 800363e:	e05a      	b.n	80036f6 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	2201      	movs	r2, #1
 8003644:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	2202      	movs	r2, #2
 800364c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	685b      	ldr	r3, [r3, #4]
 8003656:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	689b      	ldr	r3, [r3, #8]
 800365e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003660:	68fb      	ldr	r3, [r7, #12]
 8003662:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003666:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003668:	683b      	ldr	r3, [r7, #0]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	68fa      	ldr	r2, [r7, #12]
 800366e:	4313      	orrs	r3, r2
 8003670:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	68fa      	ldr	r2, [r7, #12]
 8003678:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	4a21      	ldr	r2, [pc, #132]	; (8003704 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8003680:	4293      	cmp	r3, r2
 8003682:	d022      	beq.n	80036ca <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800368c:	d01d      	beq.n	80036ca <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	4a1d      	ldr	r2, [pc, #116]	; (8003708 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8003694:	4293      	cmp	r3, r2
 8003696:	d018      	beq.n	80036ca <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	4a1b      	ldr	r2, [pc, #108]	; (800370c <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800369e:	4293      	cmp	r3, r2
 80036a0:	d013      	beq.n	80036ca <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	4a1a      	ldr	r2, [pc, #104]	; (8003710 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80036a8:	4293      	cmp	r3, r2
 80036aa:	d00e      	beq.n	80036ca <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	4a18      	ldr	r2, [pc, #96]	; (8003714 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80036b2:	4293      	cmp	r3, r2
 80036b4:	d009      	beq.n	80036ca <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	4a17      	ldr	r2, [pc, #92]	; (8003718 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80036bc:	4293      	cmp	r3, r2
 80036be:	d004      	beq.n	80036ca <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	4a15      	ldr	r2, [pc, #84]	; (800371c <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80036c6:	4293      	cmp	r3, r2
 80036c8:	d10c      	bne.n	80036e4 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80036ca:	68bb      	ldr	r3, [r7, #8]
 80036cc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80036d0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80036d2:	683b      	ldr	r3, [r7, #0]
 80036d4:	685b      	ldr	r3, [r3, #4]
 80036d6:	68ba      	ldr	r2, [r7, #8]
 80036d8:	4313      	orrs	r3, r2
 80036da:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	68ba      	ldr	r2, [r7, #8]
 80036e2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	2201      	movs	r2, #1
 80036e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	2200      	movs	r2, #0
 80036f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80036f4:	2300      	movs	r3, #0
}
 80036f6:	4618      	mov	r0, r3
 80036f8:	3714      	adds	r7, #20
 80036fa:	46bd      	mov	sp, r7
 80036fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003700:	4770      	bx	lr
 8003702:	bf00      	nop
 8003704:	40010000 	.word	0x40010000
 8003708:	40000400 	.word	0x40000400
 800370c:	40000800 	.word	0x40000800
 8003710:	40000c00 	.word	0x40000c00
 8003714:	40010400 	.word	0x40010400
 8003718:	40014000 	.word	0x40014000
 800371c:	40001800 	.word	0x40001800

08003720 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003720:	b580      	push	{r7, lr}
 8003722:	b082      	sub	sp, #8
 8003724:	af00      	add	r7, sp, #0
 8003726:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	2b00      	cmp	r3, #0
 800372c:	d101      	bne.n	8003732 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800372e:	2301      	movs	r3, #1
 8003730:	e03f      	b.n	80037b2 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8003738:	b2db      	uxtb	r3, r3
 800373a:	2b00      	cmp	r3, #0
 800373c:	d106      	bne.n	800374c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	2200      	movs	r2, #0
 8003742:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003746:	6878      	ldr	r0, [r7, #4]
 8003748:	f7fd fa5c 	bl	8000c04 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	2224      	movs	r2, #36	; 0x24
 8003750:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	68da      	ldr	r2, [r3, #12]
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003762:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003764:	6878      	ldr	r0, [r7, #4]
 8003766:	f000 fa5f 	bl	8003c28 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	691a      	ldr	r2, [r3, #16]
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003778:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	695a      	ldr	r2, [r3, #20]
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003788:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	68da      	ldr	r2, [r3, #12]
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003798:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	2200      	movs	r2, #0
 800379e:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	2220      	movs	r2, #32
 80037a4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	2220      	movs	r2, #32
 80037ac:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 80037b0:	2300      	movs	r3, #0
}
 80037b2:	4618      	mov	r0, r3
 80037b4:	3708      	adds	r7, #8
 80037b6:	46bd      	mov	sp, r7
 80037b8:	bd80      	pop	{r7, pc}

080037ba <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80037ba:	b580      	push	{r7, lr}
 80037bc:	b088      	sub	sp, #32
 80037be:	af02      	add	r7, sp, #8
 80037c0:	60f8      	str	r0, [r7, #12]
 80037c2:	60b9      	str	r1, [r7, #8]
 80037c4:	603b      	str	r3, [r7, #0]
 80037c6:	4613      	mov	r3, r2
 80037c8:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 80037ca:	2300      	movs	r3, #0
 80037cc:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80037ce:	68fb      	ldr	r3, [r7, #12]
 80037d0:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80037d4:	b2db      	uxtb	r3, r3
 80037d6:	2b20      	cmp	r3, #32
 80037d8:	f040 8083 	bne.w	80038e2 <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 80037dc:	68bb      	ldr	r3, [r7, #8]
 80037de:	2b00      	cmp	r3, #0
 80037e0:	d002      	beq.n	80037e8 <HAL_UART_Transmit+0x2e>
 80037e2:	88fb      	ldrh	r3, [r7, #6]
 80037e4:	2b00      	cmp	r3, #0
 80037e6:	d101      	bne.n	80037ec <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 80037e8:	2301      	movs	r3, #1
 80037ea:	e07b      	b.n	80038e4 <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80037ec:	68fb      	ldr	r3, [r7, #12]
 80037ee:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80037f2:	2b01      	cmp	r3, #1
 80037f4:	d101      	bne.n	80037fa <HAL_UART_Transmit+0x40>
 80037f6:	2302      	movs	r3, #2
 80037f8:	e074      	b.n	80038e4 <HAL_UART_Transmit+0x12a>
 80037fa:	68fb      	ldr	r3, [r7, #12]
 80037fc:	2201      	movs	r2, #1
 80037fe:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003802:	68fb      	ldr	r3, [r7, #12]
 8003804:	2200      	movs	r2, #0
 8003806:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003808:	68fb      	ldr	r3, [r7, #12]
 800380a:	2221      	movs	r2, #33	; 0x21
 800380c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8003810:	f7fd fbfe 	bl	8001010 <HAL_GetTick>
 8003814:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003816:	68fb      	ldr	r3, [r7, #12]
 8003818:	88fa      	ldrh	r2, [r7, #6]
 800381a:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800381c:	68fb      	ldr	r3, [r7, #12]
 800381e:	88fa      	ldrh	r2, [r7, #6]
 8003820:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003822:	68fb      	ldr	r3, [r7, #12]
 8003824:	2200      	movs	r2, #0
 8003826:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 800382a:	e042      	b.n	80038b2 <HAL_UART_Transmit+0xf8>
    {
      huart->TxXferCount--;
 800382c:	68fb      	ldr	r3, [r7, #12]
 800382e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003830:	b29b      	uxth	r3, r3
 8003832:	3b01      	subs	r3, #1
 8003834:	b29a      	uxth	r2, r3
 8003836:	68fb      	ldr	r3, [r7, #12]
 8003838:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 800383a:	68fb      	ldr	r3, [r7, #12]
 800383c:	689b      	ldr	r3, [r3, #8]
 800383e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003842:	d122      	bne.n	800388a <HAL_UART_Transmit+0xd0>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003844:	683b      	ldr	r3, [r7, #0]
 8003846:	9300      	str	r3, [sp, #0]
 8003848:	697b      	ldr	r3, [r7, #20]
 800384a:	2200      	movs	r2, #0
 800384c:	2180      	movs	r1, #128	; 0x80
 800384e:	68f8      	ldr	r0, [r7, #12]
 8003850:	f000 f96c 	bl	8003b2c <UART_WaitOnFlagUntilTimeout>
 8003854:	4603      	mov	r3, r0
 8003856:	2b00      	cmp	r3, #0
 8003858:	d001      	beq.n	800385e <HAL_UART_Transmit+0xa4>
        {
          return HAL_TIMEOUT;
 800385a:	2303      	movs	r3, #3
 800385c:	e042      	b.n	80038e4 <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 800385e:	68bb      	ldr	r3, [r7, #8]
 8003860:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 8003862:	693b      	ldr	r3, [r7, #16]
 8003864:	881b      	ldrh	r3, [r3, #0]
 8003866:	461a      	mov	r2, r3
 8003868:	68fb      	ldr	r3, [r7, #12]
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003870:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 8003872:	68fb      	ldr	r3, [r7, #12]
 8003874:	691b      	ldr	r3, [r3, #16]
 8003876:	2b00      	cmp	r3, #0
 8003878:	d103      	bne.n	8003882 <HAL_UART_Transmit+0xc8>
        {
          pData += 2U;
 800387a:	68bb      	ldr	r3, [r7, #8]
 800387c:	3302      	adds	r3, #2
 800387e:	60bb      	str	r3, [r7, #8]
 8003880:	e017      	b.n	80038b2 <HAL_UART_Transmit+0xf8>
        }
        else
        {
          pData += 1U;
 8003882:	68bb      	ldr	r3, [r7, #8]
 8003884:	3301      	adds	r3, #1
 8003886:	60bb      	str	r3, [r7, #8]
 8003888:	e013      	b.n	80038b2 <HAL_UART_Transmit+0xf8>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800388a:	683b      	ldr	r3, [r7, #0]
 800388c:	9300      	str	r3, [sp, #0]
 800388e:	697b      	ldr	r3, [r7, #20]
 8003890:	2200      	movs	r2, #0
 8003892:	2180      	movs	r1, #128	; 0x80
 8003894:	68f8      	ldr	r0, [r7, #12]
 8003896:	f000 f949 	bl	8003b2c <UART_WaitOnFlagUntilTimeout>
 800389a:	4603      	mov	r3, r0
 800389c:	2b00      	cmp	r3, #0
 800389e:	d001      	beq.n	80038a4 <HAL_UART_Transmit+0xea>
        {
          return HAL_TIMEOUT;
 80038a0:	2303      	movs	r3, #3
 80038a2:	e01f      	b.n	80038e4 <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 80038a4:	68bb      	ldr	r3, [r7, #8]
 80038a6:	1c5a      	adds	r2, r3, #1
 80038a8:	60ba      	str	r2, [r7, #8]
 80038aa:	781a      	ldrb	r2, [r3, #0]
 80038ac:	68fb      	ldr	r3, [r7, #12]
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 80038b2:	68fb      	ldr	r3, [r7, #12]
 80038b4:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80038b6:	b29b      	uxth	r3, r3
 80038b8:	2b00      	cmp	r3, #0
 80038ba:	d1b7      	bne.n	800382c <HAL_UART_Transmit+0x72>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80038bc:	683b      	ldr	r3, [r7, #0]
 80038be:	9300      	str	r3, [sp, #0]
 80038c0:	697b      	ldr	r3, [r7, #20]
 80038c2:	2200      	movs	r2, #0
 80038c4:	2140      	movs	r1, #64	; 0x40
 80038c6:	68f8      	ldr	r0, [r7, #12]
 80038c8:	f000 f930 	bl	8003b2c <UART_WaitOnFlagUntilTimeout>
 80038cc:	4603      	mov	r3, r0
 80038ce:	2b00      	cmp	r3, #0
 80038d0:	d001      	beq.n	80038d6 <HAL_UART_Transmit+0x11c>
    {
      return HAL_TIMEOUT;
 80038d2:	2303      	movs	r3, #3
 80038d4:	e006      	b.n	80038e4 <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80038d6:	68fb      	ldr	r3, [r7, #12]
 80038d8:	2220      	movs	r2, #32
 80038da:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 80038de:	2300      	movs	r3, #0
 80038e0:	e000      	b.n	80038e4 <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 80038e2:	2302      	movs	r3, #2
  }
}
 80038e4:	4618      	mov	r0, r3
 80038e6:	3718      	adds	r7, #24
 80038e8:	46bd      	mov	sp, r7
 80038ea:	bd80      	pop	{r7, pc}

080038ec <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80038ec:	b580      	push	{r7, lr}
 80038ee:	b086      	sub	sp, #24
 80038f0:	af00      	add	r7, sp, #0
 80038f2:	60f8      	str	r0, [r7, #12]
 80038f4:	60b9      	str	r1, [r7, #8]
 80038f6:	4613      	mov	r3, r2
 80038f8:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80038fa:	68fb      	ldr	r3, [r7, #12]
 80038fc:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8003900:	b2db      	uxtb	r3, r3
 8003902:	2b20      	cmp	r3, #32
 8003904:	d166      	bne.n	80039d4 <HAL_UART_Receive_DMA+0xe8>
  {
    if ((pData == NULL) || (Size == 0U))
 8003906:	68bb      	ldr	r3, [r7, #8]
 8003908:	2b00      	cmp	r3, #0
 800390a:	d002      	beq.n	8003912 <HAL_UART_Receive_DMA+0x26>
 800390c:	88fb      	ldrh	r3, [r7, #6]
 800390e:	2b00      	cmp	r3, #0
 8003910:	d101      	bne.n	8003916 <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 8003912:	2301      	movs	r3, #1
 8003914:	e05f      	b.n	80039d6 <HAL_UART_Receive_DMA+0xea>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003916:	68fb      	ldr	r3, [r7, #12]
 8003918:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800391c:	2b01      	cmp	r3, #1
 800391e:	d101      	bne.n	8003924 <HAL_UART_Receive_DMA+0x38>
 8003920:	2302      	movs	r3, #2
 8003922:	e058      	b.n	80039d6 <HAL_UART_Receive_DMA+0xea>
 8003924:	68fb      	ldr	r3, [r7, #12]
 8003926:	2201      	movs	r2, #1
 8003928:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pRxBuffPtr = pData;
 800392c:	68ba      	ldr	r2, [r7, #8]
 800392e:	68fb      	ldr	r3, [r7, #12]
 8003930:	629a      	str	r2, [r3, #40]	; 0x28
    huart->RxXferSize = Size;
 8003932:	68fb      	ldr	r3, [r7, #12]
 8003934:	88fa      	ldrh	r2, [r7, #6]
 8003936:	859a      	strh	r2, [r3, #44]	; 0x2c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003938:	68fb      	ldr	r3, [r7, #12]
 800393a:	2200      	movs	r2, #0
 800393c:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800393e:	68fb      	ldr	r3, [r7, #12]
 8003940:	2222      	movs	r2, #34	; 0x22
 8003942:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8003946:	68fb      	ldr	r3, [r7, #12]
 8003948:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800394a:	4a25      	ldr	r2, [pc, #148]	; (80039e0 <HAL_UART_Receive_DMA+0xf4>)
 800394c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800394e:	68fb      	ldr	r3, [r7, #12]
 8003950:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003952:	4a24      	ldr	r2, [pc, #144]	; (80039e4 <HAL_UART_Receive_DMA+0xf8>)
 8003954:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 8003956:	68fb      	ldr	r3, [r7, #12]
 8003958:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800395a:	4a23      	ldr	r2, [pc, #140]	; (80039e8 <HAL_UART_Receive_DMA+0xfc>)
 800395c:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 800395e:	68fb      	ldr	r3, [r7, #12]
 8003960:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003962:	2200      	movs	r2, #0
 8003964:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the DMA stream */
    tmp = (uint32_t *)&pData;
 8003966:	f107 0308 	add.w	r3, r7, #8
 800396a:	617b      	str	r3, [r7, #20]
    HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 800396c:	68fb      	ldr	r3, [r7, #12]
 800396e:	6b58      	ldr	r0, [r3, #52]	; 0x34
 8003970:	68fb      	ldr	r3, [r7, #12]
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	3304      	adds	r3, #4
 8003976:	4619      	mov	r1, r3
 8003978:	697b      	ldr	r3, [r7, #20]
 800397a:	681a      	ldr	r2, [r3, #0]
 800397c:	88fb      	ldrh	r3, [r7, #6]
 800397e:	f7fe fa61 	bl	8001e44 <HAL_DMA_Start_IT>

    /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
    __HAL_UART_CLEAR_OREFLAG(huart);
 8003982:	2300      	movs	r3, #0
 8003984:	613b      	str	r3, [r7, #16]
 8003986:	68fb      	ldr	r3, [r7, #12]
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	613b      	str	r3, [r7, #16]
 800398e:	68fb      	ldr	r3, [r7, #12]
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	685b      	ldr	r3, [r3, #4]
 8003994:	613b      	str	r3, [r7, #16]
 8003996:	693b      	ldr	r3, [r7, #16]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003998:	68fb      	ldr	r3, [r7, #12]
 800399a:	2200      	movs	r2, #0
 800399c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Parity Error Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80039a0:	68fb      	ldr	r3, [r7, #12]
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	68da      	ldr	r2, [r3, #12]
 80039a6:	68fb      	ldr	r3, [r7, #12]
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80039ae:	60da      	str	r2, [r3, #12]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80039b0:	68fb      	ldr	r3, [r7, #12]
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	695a      	ldr	r2, [r3, #20]
 80039b6:	68fb      	ldr	r3, [r7, #12]
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	f042 0201 	orr.w	r2, r2, #1
 80039be:	615a      	str	r2, [r3, #20]

    /* Enable the DMA transfer for the receiver request by setting the DMAR bit
    in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80039c0:	68fb      	ldr	r3, [r7, #12]
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	695a      	ldr	r2, [r3, #20]
 80039c6:	68fb      	ldr	r3, [r7, #12]
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80039ce:	615a      	str	r2, [r3, #20]

    return HAL_OK;
 80039d0:	2300      	movs	r3, #0
 80039d2:	e000      	b.n	80039d6 <HAL_UART_Receive_DMA+0xea>
  }
  else
  {
    return HAL_BUSY;
 80039d4:	2302      	movs	r3, #2
  }
}
 80039d6:	4618      	mov	r0, r3
 80039d8:	3718      	adds	r7, #24
 80039da:	46bd      	mov	sp, r7
 80039dc:	bd80      	pop	{r7, pc}
 80039de:	bf00      	nop
 80039e0:	08003a15 	.word	0x08003a15
 80039e4:	08003a7d 	.word	0x08003a7d
 80039e8:	08003a99 	.word	0x08003a99

080039ec <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80039ec:	b480      	push	{r7}
 80039ee:	b083      	sub	sp, #12
 80039f0:	af00      	add	r7, sp, #0
 80039f2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 80039f4:	bf00      	nop
 80039f6:	370c      	adds	r7, #12
 80039f8:	46bd      	mov	sp, r7
 80039fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039fe:	4770      	bx	lr

08003a00 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003a00:	b480      	push	{r7}
 8003a02:	b083      	sub	sp, #12
 8003a04:	af00      	add	r7, sp, #0
 8003a06:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8003a08:	bf00      	nop
 8003a0a:	370c      	adds	r7, #12
 8003a0c:	46bd      	mov	sp, r7
 8003a0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a12:	4770      	bx	lr

08003a14 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8003a14:	b580      	push	{r7, lr}
 8003a16:	b084      	sub	sp, #16
 8003a18:	af00      	add	r7, sp, #0
 8003a1a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a20:	60fb      	str	r3, [r7, #12]
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003a2c:	2b00      	cmp	r3, #0
 8003a2e:	d11e      	bne.n	8003a6e <UART_DMAReceiveCplt+0x5a>
  {
    huart->RxXferCount = 0U;
 8003a30:	68fb      	ldr	r3, [r7, #12]
 8003a32:	2200      	movs	r2, #0
 8003a34:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003a36:	68fb      	ldr	r3, [r7, #12]
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	68da      	ldr	r2, [r3, #12]
 8003a3c:	68fb      	ldr	r3, [r7, #12]
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003a44:	60da      	str	r2, [r3, #12]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003a46:	68fb      	ldr	r3, [r7, #12]
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	695a      	ldr	r2, [r3, #20]
 8003a4c:	68fb      	ldr	r3, [r7, #12]
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	f022 0201 	bic.w	r2, r2, #1
 8003a54:	615a      	str	r2, [r3, #20]

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003a56:	68fb      	ldr	r3, [r7, #12]
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	695a      	ldr	r2, [r3, #20]
 8003a5c:	68fb      	ldr	r3, [r7, #12]
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003a64:	615a      	str	r2, [r3, #20]

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8003a66:	68fb      	ldr	r3, [r7, #12]
 8003a68:	2220      	movs	r2, #32
 8003a6a:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx complete callback*/
  huart->RxCpltCallback(huart);
#else
  /*Call legacy weak Rx complete callback*/
  HAL_UART_RxCpltCallback(huart);
 8003a6e:	68f8      	ldr	r0, [r7, #12]
 8003a70:	f7fc ffd8 	bl	8000a24 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003a74:	bf00      	nop
 8003a76:	3710      	adds	r7, #16
 8003a78:	46bd      	mov	sp, r7
 8003a7a:	bd80      	pop	{r7, pc}

08003a7c <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8003a7c:	b580      	push	{r7, lr}
 8003a7e:	b084      	sub	sp, #16
 8003a80:	af00      	add	r7, sp, #0
 8003a82:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a88:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx Half complete callback*/
  huart->RxHalfCpltCallback(huart);
#else
  /*Call legacy weak Rx Half complete callback*/
  HAL_UART_RxHalfCpltCallback(huart);
 8003a8a:	68f8      	ldr	r0, [r7, #12]
 8003a8c:	f7ff ffae 	bl	80039ec <HAL_UART_RxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003a90:	bf00      	nop
 8003a92:	3710      	adds	r7, #16
 8003a94:	46bd      	mov	sp, r7
 8003a96:	bd80      	pop	{r7, pc}

08003a98 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8003a98:	b580      	push	{r7, lr}
 8003a9a:	b084      	sub	sp, #16
 8003a9c:	af00      	add	r7, sp, #0
 8003a9e:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8003aa0:	2300      	movs	r3, #0
 8003aa2:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003aa8:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8003aaa:	68bb      	ldr	r3, [r7, #8]
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	695b      	ldr	r3, [r3, #20]
 8003ab0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003ab4:	2b80      	cmp	r3, #128	; 0x80
 8003ab6:	bf0c      	ite	eq
 8003ab8:	2301      	moveq	r3, #1
 8003aba:	2300      	movne	r3, #0
 8003abc:	b2db      	uxtb	r3, r3
 8003abe:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8003ac0:	68bb      	ldr	r3, [r7, #8]
 8003ac2:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8003ac6:	b2db      	uxtb	r3, r3
 8003ac8:	2b21      	cmp	r3, #33	; 0x21
 8003aca:	d108      	bne.n	8003ade <UART_DMAError+0x46>
 8003acc:	68fb      	ldr	r3, [r7, #12]
 8003ace:	2b00      	cmp	r3, #0
 8003ad0:	d005      	beq.n	8003ade <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8003ad2:	68bb      	ldr	r3, [r7, #8]
 8003ad4:	2200      	movs	r2, #0
 8003ad6:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 8003ad8:	68b8      	ldr	r0, [r7, #8]
 8003ada:	f000 f871 	bl	8003bc0 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003ade:	68bb      	ldr	r3, [r7, #8]
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	695b      	ldr	r3, [r3, #20]
 8003ae4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003ae8:	2b40      	cmp	r3, #64	; 0x40
 8003aea:	bf0c      	ite	eq
 8003aec:	2301      	moveq	r3, #1
 8003aee:	2300      	movne	r3, #0
 8003af0:	b2db      	uxtb	r3, r3
 8003af2:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8003af4:	68bb      	ldr	r3, [r7, #8]
 8003af6:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8003afa:	b2db      	uxtb	r3, r3
 8003afc:	2b22      	cmp	r3, #34	; 0x22
 8003afe:	d108      	bne.n	8003b12 <UART_DMAError+0x7a>
 8003b00:	68fb      	ldr	r3, [r7, #12]
 8003b02:	2b00      	cmp	r3, #0
 8003b04:	d005      	beq.n	8003b12 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8003b06:	68bb      	ldr	r3, [r7, #8]
 8003b08:	2200      	movs	r2, #0
 8003b0a:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 8003b0c:	68b8      	ldr	r0, [r7, #8]
 8003b0e:	f000 f86d 	bl	8003bec <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8003b12:	68bb      	ldr	r3, [r7, #8]
 8003b14:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003b16:	f043 0210 	orr.w	r2, r3, #16
 8003b1a:	68bb      	ldr	r3, [r7, #8]
 8003b1c:	63da      	str	r2, [r3, #60]	; 0x3c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003b1e:	68b8      	ldr	r0, [r7, #8]
 8003b20:	f7ff ff6e 	bl	8003a00 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003b24:	bf00      	nop
 8003b26:	3710      	adds	r7, #16
 8003b28:	46bd      	mov	sp, r7
 8003b2a:	bd80      	pop	{r7, pc}

08003b2c <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8003b2c:	b580      	push	{r7, lr}
 8003b2e:	b084      	sub	sp, #16
 8003b30:	af00      	add	r7, sp, #0
 8003b32:	60f8      	str	r0, [r7, #12]
 8003b34:	60b9      	str	r1, [r7, #8]
 8003b36:	603b      	str	r3, [r7, #0]
 8003b38:	4613      	mov	r3, r2
 8003b3a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003b3c:	e02c      	b.n	8003b98 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003b3e:	69bb      	ldr	r3, [r7, #24]
 8003b40:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003b44:	d028      	beq.n	8003b98 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8003b46:	69bb      	ldr	r3, [r7, #24]
 8003b48:	2b00      	cmp	r3, #0
 8003b4a:	d007      	beq.n	8003b5c <UART_WaitOnFlagUntilTimeout+0x30>
 8003b4c:	f7fd fa60 	bl	8001010 <HAL_GetTick>
 8003b50:	4602      	mov	r2, r0
 8003b52:	683b      	ldr	r3, [r7, #0]
 8003b54:	1ad3      	subs	r3, r2, r3
 8003b56:	69ba      	ldr	r2, [r7, #24]
 8003b58:	429a      	cmp	r2, r3
 8003b5a:	d21d      	bcs.n	8003b98 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003b5c:	68fb      	ldr	r3, [r7, #12]
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	68da      	ldr	r2, [r3, #12]
 8003b62:	68fb      	ldr	r3, [r7, #12]
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8003b6a:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003b6c:	68fb      	ldr	r3, [r7, #12]
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	695a      	ldr	r2, [r3, #20]
 8003b72:	68fb      	ldr	r3, [r7, #12]
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	f022 0201 	bic.w	r2, r2, #1
 8003b7a:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8003b7c:	68fb      	ldr	r3, [r7, #12]
 8003b7e:	2220      	movs	r2, #32
 8003b80:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8003b84:	68fb      	ldr	r3, [r7, #12]
 8003b86:	2220      	movs	r2, #32
 8003b88:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8003b8c:	68fb      	ldr	r3, [r7, #12]
 8003b8e:	2200      	movs	r2, #0
 8003b90:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 8003b94:	2303      	movs	r3, #3
 8003b96:	e00f      	b.n	8003bb8 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003b98:	68fb      	ldr	r3, [r7, #12]
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	681a      	ldr	r2, [r3, #0]
 8003b9e:	68bb      	ldr	r3, [r7, #8]
 8003ba0:	4013      	ands	r3, r2
 8003ba2:	68ba      	ldr	r2, [r7, #8]
 8003ba4:	429a      	cmp	r2, r3
 8003ba6:	bf0c      	ite	eq
 8003ba8:	2301      	moveq	r3, #1
 8003baa:	2300      	movne	r3, #0
 8003bac:	b2db      	uxtb	r3, r3
 8003bae:	461a      	mov	r2, r3
 8003bb0:	79fb      	ldrb	r3, [r7, #7]
 8003bb2:	429a      	cmp	r2, r3
 8003bb4:	d0c3      	beq.n	8003b3e <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003bb6:	2300      	movs	r3, #0
}
 8003bb8:	4618      	mov	r0, r3
 8003bba:	3710      	adds	r7, #16
 8003bbc:	46bd      	mov	sp, r7
 8003bbe:	bd80      	pop	{r7, pc}

08003bc0 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8003bc0:	b480      	push	{r7}
 8003bc2:	b083      	sub	sp, #12
 8003bc4:	af00      	add	r7, sp, #0
 8003bc6:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	68da      	ldr	r2, [r3, #12]
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 8003bd6:	60da      	str	r2, [r3, #12]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	2220      	movs	r2, #32
 8003bdc:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
}
 8003be0:	bf00      	nop
 8003be2:	370c      	adds	r7, #12
 8003be4:	46bd      	mov	sp, r7
 8003be6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bea:	4770      	bx	lr

08003bec <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003bec:	b480      	push	{r7}
 8003bee:	b083      	sub	sp, #12
 8003bf0:	af00      	add	r7, sp, #0
 8003bf2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	68da      	ldr	r2, [r3, #12]
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8003c02:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	695a      	ldr	r2, [r3, #20]
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	f022 0201 	bic.w	r2, r2, #1
 8003c12:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	2220      	movs	r2, #32
 8003c18:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 8003c1c:	bf00      	nop
 8003c1e:	370c      	adds	r7, #12
 8003c20:	46bd      	mov	sp, r7
 8003c22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c26:	4770      	bx	lr

08003c28 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003c28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003c2c:	b085      	sub	sp, #20
 8003c2e:	af00      	add	r7, sp, #0
 8003c30:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	691b      	ldr	r3, [r3, #16]
 8003c38:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	68da      	ldr	r2, [r3, #12]
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	430a      	orrs	r2, r1
 8003c46:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	689a      	ldr	r2, [r3, #8]
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	691b      	ldr	r3, [r3, #16]
 8003c50:	431a      	orrs	r2, r3
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	695b      	ldr	r3, [r3, #20]
 8003c56:	431a      	orrs	r2, r3
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	69db      	ldr	r3, [r3, #28]
 8003c5c:	4313      	orrs	r3, r2
 8003c5e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	68db      	ldr	r3, [r3, #12]
 8003c66:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8003c6a:	f023 030c 	bic.w	r3, r3, #12
 8003c6e:	687a      	ldr	r2, [r7, #4]
 8003c70:	6812      	ldr	r2, [r2, #0]
 8003c72:	68f9      	ldr	r1, [r7, #12]
 8003c74:	430b      	orrs	r3, r1
 8003c76:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	695b      	ldr	r3, [r3, #20]
 8003c7e:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	699a      	ldr	r2, [r3, #24]
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	430a      	orrs	r2, r1
 8003c8c:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	69db      	ldr	r3, [r3, #28]
 8003c92:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003c96:	f040 818b 	bne.w	8003fb0 <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	4ac1      	ldr	r2, [pc, #772]	; (8003fa4 <UART_SetConfig+0x37c>)
 8003ca0:	4293      	cmp	r3, r2
 8003ca2:	d005      	beq.n	8003cb0 <UART_SetConfig+0x88>
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	4abf      	ldr	r2, [pc, #764]	; (8003fa8 <UART_SetConfig+0x380>)
 8003caa:	4293      	cmp	r3, r2
 8003cac:	f040 80bd 	bne.w	8003e2a <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003cb0:	f7fe fe6c 	bl	800298c <HAL_RCC_GetPCLK2Freq>
 8003cb4:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003cb6:	68bb      	ldr	r3, [r7, #8]
 8003cb8:	461d      	mov	r5, r3
 8003cba:	f04f 0600 	mov.w	r6, #0
 8003cbe:	46a8      	mov	r8, r5
 8003cc0:	46b1      	mov	r9, r6
 8003cc2:	eb18 0308 	adds.w	r3, r8, r8
 8003cc6:	eb49 0409 	adc.w	r4, r9, r9
 8003cca:	4698      	mov	r8, r3
 8003ccc:	46a1      	mov	r9, r4
 8003cce:	eb18 0805 	adds.w	r8, r8, r5
 8003cd2:	eb49 0906 	adc.w	r9, r9, r6
 8003cd6:	f04f 0100 	mov.w	r1, #0
 8003cda:	f04f 0200 	mov.w	r2, #0
 8003cde:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8003ce2:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8003ce6:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8003cea:	4688      	mov	r8, r1
 8003cec:	4691      	mov	r9, r2
 8003cee:	eb18 0005 	adds.w	r0, r8, r5
 8003cf2:	eb49 0106 	adc.w	r1, r9, r6
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	685b      	ldr	r3, [r3, #4]
 8003cfa:	461d      	mov	r5, r3
 8003cfc:	f04f 0600 	mov.w	r6, #0
 8003d00:	196b      	adds	r3, r5, r5
 8003d02:	eb46 0406 	adc.w	r4, r6, r6
 8003d06:	461a      	mov	r2, r3
 8003d08:	4623      	mov	r3, r4
 8003d0a:	f7fc fad1 	bl	80002b0 <__aeabi_uldivmod>
 8003d0e:	4603      	mov	r3, r0
 8003d10:	460c      	mov	r4, r1
 8003d12:	461a      	mov	r2, r3
 8003d14:	4ba5      	ldr	r3, [pc, #660]	; (8003fac <UART_SetConfig+0x384>)
 8003d16:	fba3 2302 	umull	r2, r3, r3, r2
 8003d1a:	095b      	lsrs	r3, r3, #5
 8003d1c:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8003d20:	68bb      	ldr	r3, [r7, #8]
 8003d22:	461d      	mov	r5, r3
 8003d24:	f04f 0600 	mov.w	r6, #0
 8003d28:	46a9      	mov	r9, r5
 8003d2a:	46b2      	mov	sl, r6
 8003d2c:	eb19 0309 	adds.w	r3, r9, r9
 8003d30:	eb4a 040a 	adc.w	r4, sl, sl
 8003d34:	4699      	mov	r9, r3
 8003d36:	46a2      	mov	sl, r4
 8003d38:	eb19 0905 	adds.w	r9, r9, r5
 8003d3c:	eb4a 0a06 	adc.w	sl, sl, r6
 8003d40:	f04f 0100 	mov.w	r1, #0
 8003d44:	f04f 0200 	mov.w	r2, #0
 8003d48:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003d4c:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003d50:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8003d54:	4689      	mov	r9, r1
 8003d56:	4692      	mov	sl, r2
 8003d58:	eb19 0005 	adds.w	r0, r9, r5
 8003d5c:	eb4a 0106 	adc.w	r1, sl, r6
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	685b      	ldr	r3, [r3, #4]
 8003d64:	461d      	mov	r5, r3
 8003d66:	f04f 0600 	mov.w	r6, #0
 8003d6a:	196b      	adds	r3, r5, r5
 8003d6c:	eb46 0406 	adc.w	r4, r6, r6
 8003d70:	461a      	mov	r2, r3
 8003d72:	4623      	mov	r3, r4
 8003d74:	f7fc fa9c 	bl	80002b0 <__aeabi_uldivmod>
 8003d78:	4603      	mov	r3, r0
 8003d7a:	460c      	mov	r4, r1
 8003d7c:	461a      	mov	r2, r3
 8003d7e:	4b8b      	ldr	r3, [pc, #556]	; (8003fac <UART_SetConfig+0x384>)
 8003d80:	fba3 1302 	umull	r1, r3, r3, r2
 8003d84:	095b      	lsrs	r3, r3, #5
 8003d86:	2164      	movs	r1, #100	; 0x64
 8003d88:	fb01 f303 	mul.w	r3, r1, r3
 8003d8c:	1ad3      	subs	r3, r2, r3
 8003d8e:	00db      	lsls	r3, r3, #3
 8003d90:	3332      	adds	r3, #50	; 0x32
 8003d92:	4a86      	ldr	r2, [pc, #536]	; (8003fac <UART_SetConfig+0x384>)
 8003d94:	fba2 2303 	umull	r2, r3, r2, r3
 8003d98:	095b      	lsrs	r3, r3, #5
 8003d9a:	005b      	lsls	r3, r3, #1
 8003d9c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003da0:	4498      	add	r8, r3
 8003da2:	68bb      	ldr	r3, [r7, #8]
 8003da4:	461d      	mov	r5, r3
 8003da6:	f04f 0600 	mov.w	r6, #0
 8003daa:	46a9      	mov	r9, r5
 8003dac:	46b2      	mov	sl, r6
 8003dae:	eb19 0309 	adds.w	r3, r9, r9
 8003db2:	eb4a 040a 	adc.w	r4, sl, sl
 8003db6:	4699      	mov	r9, r3
 8003db8:	46a2      	mov	sl, r4
 8003dba:	eb19 0905 	adds.w	r9, r9, r5
 8003dbe:	eb4a 0a06 	adc.w	sl, sl, r6
 8003dc2:	f04f 0100 	mov.w	r1, #0
 8003dc6:	f04f 0200 	mov.w	r2, #0
 8003dca:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003dce:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003dd2:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8003dd6:	4689      	mov	r9, r1
 8003dd8:	4692      	mov	sl, r2
 8003dda:	eb19 0005 	adds.w	r0, r9, r5
 8003dde:	eb4a 0106 	adc.w	r1, sl, r6
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	685b      	ldr	r3, [r3, #4]
 8003de6:	461d      	mov	r5, r3
 8003de8:	f04f 0600 	mov.w	r6, #0
 8003dec:	196b      	adds	r3, r5, r5
 8003dee:	eb46 0406 	adc.w	r4, r6, r6
 8003df2:	461a      	mov	r2, r3
 8003df4:	4623      	mov	r3, r4
 8003df6:	f7fc fa5b 	bl	80002b0 <__aeabi_uldivmod>
 8003dfa:	4603      	mov	r3, r0
 8003dfc:	460c      	mov	r4, r1
 8003dfe:	461a      	mov	r2, r3
 8003e00:	4b6a      	ldr	r3, [pc, #424]	; (8003fac <UART_SetConfig+0x384>)
 8003e02:	fba3 1302 	umull	r1, r3, r3, r2
 8003e06:	095b      	lsrs	r3, r3, #5
 8003e08:	2164      	movs	r1, #100	; 0x64
 8003e0a:	fb01 f303 	mul.w	r3, r1, r3
 8003e0e:	1ad3      	subs	r3, r2, r3
 8003e10:	00db      	lsls	r3, r3, #3
 8003e12:	3332      	adds	r3, #50	; 0x32
 8003e14:	4a65      	ldr	r2, [pc, #404]	; (8003fac <UART_SetConfig+0x384>)
 8003e16:	fba2 2303 	umull	r2, r3, r2, r3
 8003e1a:	095b      	lsrs	r3, r3, #5
 8003e1c:	f003 0207 	and.w	r2, r3, #7
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	4442      	add	r2, r8
 8003e26:	609a      	str	r2, [r3, #8]
 8003e28:	e26f      	b.n	800430a <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8003e2a:	f7fe fd9b 	bl	8002964 <HAL_RCC_GetPCLK1Freq>
 8003e2e:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003e30:	68bb      	ldr	r3, [r7, #8]
 8003e32:	461d      	mov	r5, r3
 8003e34:	f04f 0600 	mov.w	r6, #0
 8003e38:	46a8      	mov	r8, r5
 8003e3a:	46b1      	mov	r9, r6
 8003e3c:	eb18 0308 	adds.w	r3, r8, r8
 8003e40:	eb49 0409 	adc.w	r4, r9, r9
 8003e44:	4698      	mov	r8, r3
 8003e46:	46a1      	mov	r9, r4
 8003e48:	eb18 0805 	adds.w	r8, r8, r5
 8003e4c:	eb49 0906 	adc.w	r9, r9, r6
 8003e50:	f04f 0100 	mov.w	r1, #0
 8003e54:	f04f 0200 	mov.w	r2, #0
 8003e58:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8003e5c:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8003e60:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8003e64:	4688      	mov	r8, r1
 8003e66:	4691      	mov	r9, r2
 8003e68:	eb18 0005 	adds.w	r0, r8, r5
 8003e6c:	eb49 0106 	adc.w	r1, r9, r6
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	685b      	ldr	r3, [r3, #4]
 8003e74:	461d      	mov	r5, r3
 8003e76:	f04f 0600 	mov.w	r6, #0
 8003e7a:	196b      	adds	r3, r5, r5
 8003e7c:	eb46 0406 	adc.w	r4, r6, r6
 8003e80:	461a      	mov	r2, r3
 8003e82:	4623      	mov	r3, r4
 8003e84:	f7fc fa14 	bl	80002b0 <__aeabi_uldivmod>
 8003e88:	4603      	mov	r3, r0
 8003e8a:	460c      	mov	r4, r1
 8003e8c:	461a      	mov	r2, r3
 8003e8e:	4b47      	ldr	r3, [pc, #284]	; (8003fac <UART_SetConfig+0x384>)
 8003e90:	fba3 2302 	umull	r2, r3, r3, r2
 8003e94:	095b      	lsrs	r3, r3, #5
 8003e96:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8003e9a:	68bb      	ldr	r3, [r7, #8]
 8003e9c:	461d      	mov	r5, r3
 8003e9e:	f04f 0600 	mov.w	r6, #0
 8003ea2:	46a9      	mov	r9, r5
 8003ea4:	46b2      	mov	sl, r6
 8003ea6:	eb19 0309 	adds.w	r3, r9, r9
 8003eaa:	eb4a 040a 	adc.w	r4, sl, sl
 8003eae:	4699      	mov	r9, r3
 8003eb0:	46a2      	mov	sl, r4
 8003eb2:	eb19 0905 	adds.w	r9, r9, r5
 8003eb6:	eb4a 0a06 	adc.w	sl, sl, r6
 8003eba:	f04f 0100 	mov.w	r1, #0
 8003ebe:	f04f 0200 	mov.w	r2, #0
 8003ec2:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003ec6:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003eca:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8003ece:	4689      	mov	r9, r1
 8003ed0:	4692      	mov	sl, r2
 8003ed2:	eb19 0005 	adds.w	r0, r9, r5
 8003ed6:	eb4a 0106 	adc.w	r1, sl, r6
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	685b      	ldr	r3, [r3, #4]
 8003ede:	461d      	mov	r5, r3
 8003ee0:	f04f 0600 	mov.w	r6, #0
 8003ee4:	196b      	adds	r3, r5, r5
 8003ee6:	eb46 0406 	adc.w	r4, r6, r6
 8003eea:	461a      	mov	r2, r3
 8003eec:	4623      	mov	r3, r4
 8003eee:	f7fc f9df 	bl	80002b0 <__aeabi_uldivmod>
 8003ef2:	4603      	mov	r3, r0
 8003ef4:	460c      	mov	r4, r1
 8003ef6:	461a      	mov	r2, r3
 8003ef8:	4b2c      	ldr	r3, [pc, #176]	; (8003fac <UART_SetConfig+0x384>)
 8003efa:	fba3 1302 	umull	r1, r3, r3, r2
 8003efe:	095b      	lsrs	r3, r3, #5
 8003f00:	2164      	movs	r1, #100	; 0x64
 8003f02:	fb01 f303 	mul.w	r3, r1, r3
 8003f06:	1ad3      	subs	r3, r2, r3
 8003f08:	00db      	lsls	r3, r3, #3
 8003f0a:	3332      	adds	r3, #50	; 0x32
 8003f0c:	4a27      	ldr	r2, [pc, #156]	; (8003fac <UART_SetConfig+0x384>)
 8003f0e:	fba2 2303 	umull	r2, r3, r2, r3
 8003f12:	095b      	lsrs	r3, r3, #5
 8003f14:	005b      	lsls	r3, r3, #1
 8003f16:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003f1a:	4498      	add	r8, r3
 8003f1c:	68bb      	ldr	r3, [r7, #8]
 8003f1e:	461d      	mov	r5, r3
 8003f20:	f04f 0600 	mov.w	r6, #0
 8003f24:	46a9      	mov	r9, r5
 8003f26:	46b2      	mov	sl, r6
 8003f28:	eb19 0309 	adds.w	r3, r9, r9
 8003f2c:	eb4a 040a 	adc.w	r4, sl, sl
 8003f30:	4699      	mov	r9, r3
 8003f32:	46a2      	mov	sl, r4
 8003f34:	eb19 0905 	adds.w	r9, r9, r5
 8003f38:	eb4a 0a06 	adc.w	sl, sl, r6
 8003f3c:	f04f 0100 	mov.w	r1, #0
 8003f40:	f04f 0200 	mov.w	r2, #0
 8003f44:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003f48:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003f4c:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8003f50:	4689      	mov	r9, r1
 8003f52:	4692      	mov	sl, r2
 8003f54:	eb19 0005 	adds.w	r0, r9, r5
 8003f58:	eb4a 0106 	adc.w	r1, sl, r6
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	685b      	ldr	r3, [r3, #4]
 8003f60:	461d      	mov	r5, r3
 8003f62:	f04f 0600 	mov.w	r6, #0
 8003f66:	196b      	adds	r3, r5, r5
 8003f68:	eb46 0406 	adc.w	r4, r6, r6
 8003f6c:	461a      	mov	r2, r3
 8003f6e:	4623      	mov	r3, r4
 8003f70:	f7fc f99e 	bl	80002b0 <__aeabi_uldivmod>
 8003f74:	4603      	mov	r3, r0
 8003f76:	460c      	mov	r4, r1
 8003f78:	461a      	mov	r2, r3
 8003f7a:	4b0c      	ldr	r3, [pc, #48]	; (8003fac <UART_SetConfig+0x384>)
 8003f7c:	fba3 1302 	umull	r1, r3, r3, r2
 8003f80:	095b      	lsrs	r3, r3, #5
 8003f82:	2164      	movs	r1, #100	; 0x64
 8003f84:	fb01 f303 	mul.w	r3, r1, r3
 8003f88:	1ad3      	subs	r3, r2, r3
 8003f8a:	00db      	lsls	r3, r3, #3
 8003f8c:	3332      	adds	r3, #50	; 0x32
 8003f8e:	4a07      	ldr	r2, [pc, #28]	; (8003fac <UART_SetConfig+0x384>)
 8003f90:	fba2 2303 	umull	r2, r3, r2, r3
 8003f94:	095b      	lsrs	r3, r3, #5
 8003f96:	f003 0207 	and.w	r2, r3, #7
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	4442      	add	r2, r8
 8003fa0:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 8003fa2:	e1b2      	b.n	800430a <UART_SetConfig+0x6e2>
 8003fa4:	40011000 	.word	0x40011000
 8003fa8:	40011400 	.word	0x40011400
 8003fac:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	4ad7      	ldr	r2, [pc, #860]	; (8004314 <UART_SetConfig+0x6ec>)
 8003fb6:	4293      	cmp	r3, r2
 8003fb8:	d005      	beq.n	8003fc6 <UART_SetConfig+0x39e>
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	4ad6      	ldr	r2, [pc, #856]	; (8004318 <UART_SetConfig+0x6f0>)
 8003fc0:	4293      	cmp	r3, r2
 8003fc2:	f040 80d1 	bne.w	8004168 <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 8003fc6:	f7fe fce1 	bl	800298c <HAL_RCC_GetPCLK2Freq>
 8003fca:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003fcc:	68bb      	ldr	r3, [r7, #8]
 8003fce:	469a      	mov	sl, r3
 8003fd0:	f04f 0b00 	mov.w	fp, #0
 8003fd4:	46d0      	mov	r8, sl
 8003fd6:	46d9      	mov	r9, fp
 8003fd8:	eb18 0308 	adds.w	r3, r8, r8
 8003fdc:	eb49 0409 	adc.w	r4, r9, r9
 8003fe0:	4698      	mov	r8, r3
 8003fe2:	46a1      	mov	r9, r4
 8003fe4:	eb18 080a 	adds.w	r8, r8, sl
 8003fe8:	eb49 090b 	adc.w	r9, r9, fp
 8003fec:	f04f 0100 	mov.w	r1, #0
 8003ff0:	f04f 0200 	mov.w	r2, #0
 8003ff4:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8003ff8:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8003ffc:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8004000:	4688      	mov	r8, r1
 8004002:	4691      	mov	r9, r2
 8004004:	eb1a 0508 	adds.w	r5, sl, r8
 8004008:	eb4b 0609 	adc.w	r6, fp, r9
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	685b      	ldr	r3, [r3, #4]
 8004010:	4619      	mov	r1, r3
 8004012:	f04f 0200 	mov.w	r2, #0
 8004016:	f04f 0300 	mov.w	r3, #0
 800401a:	f04f 0400 	mov.w	r4, #0
 800401e:	0094      	lsls	r4, r2, #2
 8004020:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8004024:	008b      	lsls	r3, r1, #2
 8004026:	461a      	mov	r2, r3
 8004028:	4623      	mov	r3, r4
 800402a:	4628      	mov	r0, r5
 800402c:	4631      	mov	r1, r6
 800402e:	f7fc f93f 	bl	80002b0 <__aeabi_uldivmod>
 8004032:	4603      	mov	r3, r0
 8004034:	460c      	mov	r4, r1
 8004036:	461a      	mov	r2, r3
 8004038:	4bb8      	ldr	r3, [pc, #736]	; (800431c <UART_SetConfig+0x6f4>)
 800403a:	fba3 2302 	umull	r2, r3, r3, r2
 800403e:	095b      	lsrs	r3, r3, #5
 8004040:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8004044:	68bb      	ldr	r3, [r7, #8]
 8004046:	469b      	mov	fp, r3
 8004048:	f04f 0c00 	mov.w	ip, #0
 800404c:	46d9      	mov	r9, fp
 800404e:	46e2      	mov	sl, ip
 8004050:	eb19 0309 	adds.w	r3, r9, r9
 8004054:	eb4a 040a 	adc.w	r4, sl, sl
 8004058:	4699      	mov	r9, r3
 800405a:	46a2      	mov	sl, r4
 800405c:	eb19 090b 	adds.w	r9, r9, fp
 8004060:	eb4a 0a0c 	adc.w	sl, sl, ip
 8004064:	f04f 0100 	mov.w	r1, #0
 8004068:	f04f 0200 	mov.w	r2, #0
 800406c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004070:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8004074:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8004078:	4689      	mov	r9, r1
 800407a:	4692      	mov	sl, r2
 800407c:	eb1b 0509 	adds.w	r5, fp, r9
 8004080:	eb4c 060a 	adc.w	r6, ip, sl
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	685b      	ldr	r3, [r3, #4]
 8004088:	4619      	mov	r1, r3
 800408a:	f04f 0200 	mov.w	r2, #0
 800408e:	f04f 0300 	mov.w	r3, #0
 8004092:	f04f 0400 	mov.w	r4, #0
 8004096:	0094      	lsls	r4, r2, #2
 8004098:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800409c:	008b      	lsls	r3, r1, #2
 800409e:	461a      	mov	r2, r3
 80040a0:	4623      	mov	r3, r4
 80040a2:	4628      	mov	r0, r5
 80040a4:	4631      	mov	r1, r6
 80040a6:	f7fc f903 	bl	80002b0 <__aeabi_uldivmod>
 80040aa:	4603      	mov	r3, r0
 80040ac:	460c      	mov	r4, r1
 80040ae:	461a      	mov	r2, r3
 80040b0:	4b9a      	ldr	r3, [pc, #616]	; (800431c <UART_SetConfig+0x6f4>)
 80040b2:	fba3 1302 	umull	r1, r3, r3, r2
 80040b6:	095b      	lsrs	r3, r3, #5
 80040b8:	2164      	movs	r1, #100	; 0x64
 80040ba:	fb01 f303 	mul.w	r3, r1, r3
 80040be:	1ad3      	subs	r3, r2, r3
 80040c0:	011b      	lsls	r3, r3, #4
 80040c2:	3332      	adds	r3, #50	; 0x32
 80040c4:	4a95      	ldr	r2, [pc, #596]	; (800431c <UART_SetConfig+0x6f4>)
 80040c6:	fba2 2303 	umull	r2, r3, r2, r3
 80040ca:	095b      	lsrs	r3, r3, #5
 80040cc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80040d0:	4498      	add	r8, r3
 80040d2:	68bb      	ldr	r3, [r7, #8]
 80040d4:	469b      	mov	fp, r3
 80040d6:	f04f 0c00 	mov.w	ip, #0
 80040da:	46d9      	mov	r9, fp
 80040dc:	46e2      	mov	sl, ip
 80040de:	eb19 0309 	adds.w	r3, r9, r9
 80040e2:	eb4a 040a 	adc.w	r4, sl, sl
 80040e6:	4699      	mov	r9, r3
 80040e8:	46a2      	mov	sl, r4
 80040ea:	eb19 090b 	adds.w	r9, r9, fp
 80040ee:	eb4a 0a0c 	adc.w	sl, sl, ip
 80040f2:	f04f 0100 	mov.w	r1, #0
 80040f6:	f04f 0200 	mov.w	r2, #0
 80040fa:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80040fe:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8004102:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8004106:	4689      	mov	r9, r1
 8004108:	4692      	mov	sl, r2
 800410a:	eb1b 0509 	adds.w	r5, fp, r9
 800410e:	eb4c 060a 	adc.w	r6, ip, sl
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	685b      	ldr	r3, [r3, #4]
 8004116:	4619      	mov	r1, r3
 8004118:	f04f 0200 	mov.w	r2, #0
 800411c:	f04f 0300 	mov.w	r3, #0
 8004120:	f04f 0400 	mov.w	r4, #0
 8004124:	0094      	lsls	r4, r2, #2
 8004126:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800412a:	008b      	lsls	r3, r1, #2
 800412c:	461a      	mov	r2, r3
 800412e:	4623      	mov	r3, r4
 8004130:	4628      	mov	r0, r5
 8004132:	4631      	mov	r1, r6
 8004134:	f7fc f8bc 	bl	80002b0 <__aeabi_uldivmod>
 8004138:	4603      	mov	r3, r0
 800413a:	460c      	mov	r4, r1
 800413c:	461a      	mov	r2, r3
 800413e:	4b77      	ldr	r3, [pc, #476]	; (800431c <UART_SetConfig+0x6f4>)
 8004140:	fba3 1302 	umull	r1, r3, r3, r2
 8004144:	095b      	lsrs	r3, r3, #5
 8004146:	2164      	movs	r1, #100	; 0x64
 8004148:	fb01 f303 	mul.w	r3, r1, r3
 800414c:	1ad3      	subs	r3, r2, r3
 800414e:	011b      	lsls	r3, r3, #4
 8004150:	3332      	adds	r3, #50	; 0x32
 8004152:	4a72      	ldr	r2, [pc, #456]	; (800431c <UART_SetConfig+0x6f4>)
 8004154:	fba2 2303 	umull	r2, r3, r2, r3
 8004158:	095b      	lsrs	r3, r3, #5
 800415a:	f003 020f 	and.w	r2, r3, #15
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	4442      	add	r2, r8
 8004164:	609a      	str	r2, [r3, #8]
 8004166:	e0d0      	b.n	800430a <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 8004168:	f7fe fbfc 	bl	8002964 <HAL_RCC_GetPCLK1Freq>
 800416c:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800416e:	68bb      	ldr	r3, [r7, #8]
 8004170:	469a      	mov	sl, r3
 8004172:	f04f 0b00 	mov.w	fp, #0
 8004176:	46d0      	mov	r8, sl
 8004178:	46d9      	mov	r9, fp
 800417a:	eb18 0308 	adds.w	r3, r8, r8
 800417e:	eb49 0409 	adc.w	r4, r9, r9
 8004182:	4698      	mov	r8, r3
 8004184:	46a1      	mov	r9, r4
 8004186:	eb18 080a 	adds.w	r8, r8, sl
 800418a:	eb49 090b 	adc.w	r9, r9, fp
 800418e:	f04f 0100 	mov.w	r1, #0
 8004192:	f04f 0200 	mov.w	r2, #0
 8004196:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800419a:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800419e:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 80041a2:	4688      	mov	r8, r1
 80041a4:	4691      	mov	r9, r2
 80041a6:	eb1a 0508 	adds.w	r5, sl, r8
 80041aa:	eb4b 0609 	adc.w	r6, fp, r9
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	685b      	ldr	r3, [r3, #4]
 80041b2:	4619      	mov	r1, r3
 80041b4:	f04f 0200 	mov.w	r2, #0
 80041b8:	f04f 0300 	mov.w	r3, #0
 80041bc:	f04f 0400 	mov.w	r4, #0
 80041c0:	0094      	lsls	r4, r2, #2
 80041c2:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80041c6:	008b      	lsls	r3, r1, #2
 80041c8:	461a      	mov	r2, r3
 80041ca:	4623      	mov	r3, r4
 80041cc:	4628      	mov	r0, r5
 80041ce:	4631      	mov	r1, r6
 80041d0:	f7fc f86e 	bl	80002b0 <__aeabi_uldivmod>
 80041d4:	4603      	mov	r3, r0
 80041d6:	460c      	mov	r4, r1
 80041d8:	461a      	mov	r2, r3
 80041da:	4b50      	ldr	r3, [pc, #320]	; (800431c <UART_SetConfig+0x6f4>)
 80041dc:	fba3 2302 	umull	r2, r3, r3, r2
 80041e0:	095b      	lsrs	r3, r3, #5
 80041e2:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80041e6:	68bb      	ldr	r3, [r7, #8]
 80041e8:	469b      	mov	fp, r3
 80041ea:	f04f 0c00 	mov.w	ip, #0
 80041ee:	46d9      	mov	r9, fp
 80041f0:	46e2      	mov	sl, ip
 80041f2:	eb19 0309 	adds.w	r3, r9, r9
 80041f6:	eb4a 040a 	adc.w	r4, sl, sl
 80041fa:	4699      	mov	r9, r3
 80041fc:	46a2      	mov	sl, r4
 80041fe:	eb19 090b 	adds.w	r9, r9, fp
 8004202:	eb4a 0a0c 	adc.w	sl, sl, ip
 8004206:	f04f 0100 	mov.w	r1, #0
 800420a:	f04f 0200 	mov.w	r2, #0
 800420e:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004212:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8004216:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800421a:	4689      	mov	r9, r1
 800421c:	4692      	mov	sl, r2
 800421e:	eb1b 0509 	adds.w	r5, fp, r9
 8004222:	eb4c 060a 	adc.w	r6, ip, sl
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	685b      	ldr	r3, [r3, #4]
 800422a:	4619      	mov	r1, r3
 800422c:	f04f 0200 	mov.w	r2, #0
 8004230:	f04f 0300 	mov.w	r3, #0
 8004234:	f04f 0400 	mov.w	r4, #0
 8004238:	0094      	lsls	r4, r2, #2
 800423a:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800423e:	008b      	lsls	r3, r1, #2
 8004240:	461a      	mov	r2, r3
 8004242:	4623      	mov	r3, r4
 8004244:	4628      	mov	r0, r5
 8004246:	4631      	mov	r1, r6
 8004248:	f7fc f832 	bl	80002b0 <__aeabi_uldivmod>
 800424c:	4603      	mov	r3, r0
 800424e:	460c      	mov	r4, r1
 8004250:	461a      	mov	r2, r3
 8004252:	4b32      	ldr	r3, [pc, #200]	; (800431c <UART_SetConfig+0x6f4>)
 8004254:	fba3 1302 	umull	r1, r3, r3, r2
 8004258:	095b      	lsrs	r3, r3, #5
 800425a:	2164      	movs	r1, #100	; 0x64
 800425c:	fb01 f303 	mul.w	r3, r1, r3
 8004260:	1ad3      	subs	r3, r2, r3
 8004262:	011b      	lsls	r3, r3, #4
 8004264:	3332      	adds	r3, #50	; 0x32
 8004266:	4a2d      	ldr	r2, [pc, #180]	; (800431c <UART_SetConfig+0x6f4>)
 8004268:	fba2 2303 	umull	r2, r3, r2, r3
 800426c:	095b      	lsrs	r3, r3, #5
 800426e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004272:	4498      	add	r8, r3
 8004274:	68bb      	ldr	r3, [r7, #8]
 8004276:	469b      	mov	fp, r3
 8004278:	f04f 0c00 	mov.w	ip, #0
 800427c:	46d9      	mov	r9, fp
 800427e:	46e2      	mov	sl, ip
 8004280:	eb19 0309 	adds.w	r3, r9, r9
 8004284:	eb4a 040a 	adc.w	r4, sl, sl
 8004288:	4699      	mov	r9, r3
 800428a:	46a2      	mov	sl, r4
 800428c:	eb19 090b 	adds.w	r9, r9, fp
 8004290:	eb4a 0a0c 	adc.w	sl, sl, ip
 8004294:	f04f 0100 	mov.w	r1, #0
 8004298:	f04f 0200 	mov.w	r2, #0
 800429c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80042a0:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80042a4:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80042a8:	4689      	mov	r9, r1
 80042aa:	4692      	mov	sl, r2
 80042ac:	eb1b 0509 	adds.w	r5, fp, r9
 80042b0:	eb4c 060a 	adc.w	r6, ip, sl
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	685b      	ldr	r3, [r3, #4]
 80042b8:	4619      	mov	r1, r3
 80042ba:	f04f 0200 	mov.w	r2, #0
 80042be:	f04f 0300 	mov.w	r3, #0
 80042c2:	f04f 0400 	mov.w	r4, #0
 80042c6:	0094      	lsls	r4, r2, #2
 80042c8:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80042cc:	008b      	lsls	r3, r1, #2
 80042ce:	461a      	mov	r2, r3
 80042d0:	4623      	mov	r3, r4
 80042d2:	4628      	mov	r0, r5
 80042d4:	4631      	mov	r1, r6
 80042d6:	f7fb ffeb 	bl	80002b0 <__aeabi_uldivmod>
 80042da:	4603      	mov	r3, r0
 80042dc:	460c      	mov	r4, r1
 80042de:	461a      	mov	r2, r3
 80042e0:	4b0e      	ldr	r3, [pc, #56]	; (800431c <UART_SetConfig+0x6f4>)
 80042e2:	fba3 1302 	umull	r1, r3, r3, r2
 80042e6:	095b      	lsrs	r3, r3, #5
 80042e8:	2164      	movs	r1, #100	; 0x64
 80042ea:	fb01 f303 	mul.w	r3, r1, r3
 80042ee:	1ad3      	subs	r3, r2, r3
 80042f0:	011b      	lsls	r3, r3, #4
 80042f2:	3332      	adds	r3, #50	; 0x32
 80042f4:	4a09      	ldr	r2, [pc, #36]	; (800431c <UART_SetConfig+0x6f4>)
 80042f6:	fba2 2303 	umull	r2, r3, r2, r3
 80042fa:	095b      	lsrs	r3, r3, #5
 80042fc:	f003 020f 	and.w	r2, r3, #15
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	4442      	add	r2, r8
 8004306:	609a      	str	r2, [r3, #8]
}
 8004308:	e7ff      	b.n	800430a <UART_SetConfig+0x6e2>
 800430a:	bf00      	nop
 800430c:	3714      	adds	r7, #20
 800430e:	46bd      	mov	sp, r7
 8004310:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004314:	40011000 	.word	0x40011000
 8004318:	40011400 	.word	0x40011400
 800431c:	51eb851f 	.word	0x51eb851f

08004320 <__errno>:
 8004320:	4b01      	ldr	r3, [pc, #4]	; (8004328 <__errno+0x8>)
 8004322:	6818      	ldr	r0, [r3, #0]
 8004324:	4770      	bx	lr
 8004326:	bf00      	nop
 8004328:	2000000c 	.word	0x2000000c

0800432c <__libc_init_array>:
 800432c:	b570      	push	{r4, r5, r6, lr}
 800432e:	4e0d      	ldr	r6, [pc, #52]	; (8004364 <__libc_init_array+0x38>)
 8004330:	4c0d      	ldr	r4, [pc, #52]	; (8004368 <__libc_init_array+0x3c>)
 8004332:	1ba4      	subs	r4, r4, r6
 8004334:	10a4      	asrs	r4, r4, #2
 8004336:	2500      	movs	r5, #0
 8004338:	42a5      	cmp	r5, r4
 800433a:	d109      	bne.n	8004350 <__libc_init_array+0x24>
 800433c:	4e0b      	ldr	r6, [pc, #44]	; (800436c <__libc_init_array+0x40>)
 800433e:	4c0c      	ldr	r4, [pc, #48]	; (8004370 <__libc_init_array+0x44>)
 8004340:	f000 ff04 	bl	800514c <_init>
 8004344:	1ba4      	subs	r4, r4, r6
 8004346:	10a4      	asrs	r4, r4, #2
 8004348:	2500      	movs	r5, #0
 800434a:	42a5      	cmp	r5, r4
 800434c:	d105      	bne.n	800435a <__libc_init_array+0x2e>
 800434e:	bd70      	pop	{r4, r5, r6, pc}
 8004350:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8004354:	4798      	blx	r3
 8004356:	3501      	adds	r5, #1
 8004358:	e7ee      	b.n	8004338 <__libc_init_array+0xc>
 800435a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800435e:	4798      	blx	r3
 8004360:	3501      	adds	r5, #1
 8004362:	e7f2      	b.n	800434a <__libc_init_array+0x1e>
 8004364:	08005230 	.word	0x08005230
 8004368:	08005230 	.word	0x08005230
 800436c:	08005230 	.word	0x08005230
 8004370:	08005234 	.word	0x08005234

08004374 <memset>:
 8004374:	4402      	add	r2, r0
 8004376:	4603      	mov	r3, r0
 8004378:	4293      	cmp	r3, r2
 800437a:	d100      	bne.n	800437e <memset+0xa>
 800437c:	4770      	bx	lr
 800437e:	f803 1b01 	strb.w	r1, [r3], #1
 8004382:	e7f9      	b.n	8004378 <memset+0x4>

08004384 <iprintf>:
 8004384:	b40f      	push	{r0, r1, r2, r3}
 8004386:	4b0a      	ldr	r3, [pc, #40]	; (80043b0 <iprintf+0x2c>)
 8004388:	b513      	push	{r0, r1, r4, lr}
 800438a:	681c      	ldr	r4, [r3, #0]
 800438c:	b124      	cbz	r4, 8004398 <iprintf+0x14>
 800438e:	69a3      	ldr	r3, [r4, #24]
 8004390:	b913      	cbnz	r3, 8004398 <iprintf+0x14>
 8004392:	4620      	mov	r0, r4
 8004394:	f000 f84e 	bl	8004434 <__sinit>
 8004398:	ab05      	add	r3, sp, #20
 800439a:	9a04      	ldr	r2, [sp, #16]
 800439c:	68a1      	ldr	r1, [r4, #8]
 800439e:	9301      	str	r3, [sp, #4]
 80043a0:	4620      	mov	r0, r4
 80043a2:	f000 f955 	bl	8004650 <_vfiprintf_r>
 80043a6:	b002      	add	sp, #8
 80043a8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80043ac:	b004      	add	sp, #16
 80043ae:	4770      	bx	lr
 80043b0:	2000000c 	.word	0x2000000c

080043b4 <std>:
 80043b4:	2300      	movs	r3, #0
 80043b6:	b510      	push	{r4, lr}
 80043b8:	4604      	mov	r4, r0
 80043ba:	e9c0 3300 	strd	r3, r3, [r0]
 80043be:	6083      	str	r3, [r0, #8]
 80043c0:	8181      	strh	r1, [r0, #12]
 80043c2:	6643      	str	r3, [r0, #100]	; 0x64
 80043c4:	81c2      	strh	r2, [r0, #14]
 80043c6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80043ca:	6183      	str	r3, [r0, #24]
 80043cc:	4619      	mov	r1, r3
 80043ce:	2208      	movs	r2, #8
 80043d0:	305c      	adds	r0, #92	; 0x5c
 80043d2:	f7ff ffcf 	bl	8004374 <memset>
 80043d6:	4b05      	ldr	r3, [pc, #20]	; (80043ec <std+0x38>)
 80043d8:	6263      	str	r3, [r4, #36]	; 0x24
 80043da:	4b05      	ldr	r3, [pc, #20]	; (80043f0 <std+0x3c>)
 80043dc:	62a3      	str	r3, [r4, #40]	; 0x28
 80043de:	4b05      	ldr	r3, [pc, #20]	; (80043f4 <std+0x40>)
 80043e0:	62e3      	str	r3, [r4, #44]	; 0x2c
 80043e2:	4b05      	ldr	r3, [pc, #20]	; (80043f8 <std+0x44>)
 80043e4:	6224      	str	r4, [r4, #32]
 80043e6:	6323      	str	r3, [r4, #48]	; 0x30
 80043e8:	bd10      	pop	{r4, pc}
 80043ea:	bf00      	nop
 80043ec:	08004bad 	.word	0x08004bad
 80043f0:	08004bcf 	.word	0x08004bcf
 80043f4:	08004c07 	.word	0x08004c07
 80043f8:	08004c2b 	.word	0x08004c2b

080043fc <_cleanup_r>:
 80043fc:	4901      	ldr	r1, [pc, #4]	; (8004404 <_cleanup_r+0x8>)
 80043fe:	f000 b885 	b.w	800450c <_fwalk_reent>
 8004402:	bf00      	nop
 8004404:	08004f05 	.word	0x08004f05

08004408 <__sfmoreglue>:
 8004408:	b570      	push	{r4, r5, r6, lr}
 800440a:	1e4a      	subs	r2, r1, #1
 800440c:	2568      	movs	r5, #104	; 0x68
 800440e:	4355      	muls	r5, r2
 8004410:	460e      	mov	r6, r1
 8004412:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8004416:	f000 f897 	bl	8004548 <_malloc_r>
 800441a:	4604      	mov	r4, r0
 800441c:	b140      	cbz	r0, 8004430 <__sfmoreglue+0x28>
 800441e:	2100      	movs	r1, #0
 8004420:	e9c0 1600 	strd	r1, r6, [r0]
 8004424:	300c      	adds	r0, #12
 8004426:	60a0      	str	r0, [r4, #8]
 8004428:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800442c:	f7ff ffa2 	bl	8004374 <memset>
 8004430:	4620      	mov	r0, r4
 8004432:	bd70      	pop	{r4, r5, r6, pc}

08004434 <__sinit>:
 8004434:	6983      	ldr	r3, [r0, #24]
 8004436:	b510      	push	{r4, lr}
 8004438:	4604      	mov	r4, r0
 800443a:	bb33      	cbnz	r3, 800448a <__sinit+0x56>
 800443c:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 8004440:	6503      	str	r3, [r0, #80]	; 0x50
 8004442:	4b12      	ldr	r3, [pc, #72]	; (800448c <__sinit+0x58>)
 8004444:	4a12      	ldr	r2, [pc, #72]	; (8004490 <__sinit+0x5c>)
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	6282      	str	r2, [r0, #40]	; 0x28
 800444a:	4298      	cmp	r0, r3
 800444c:	bf04      	itt	eq
 800444e:	2301      	moveq	r3, #1
 8004450:	6183      	streq	r3, [r0, #24]
 8004452:	f000 f81f 	bl	8004494 <__sfp>
 8004456:	6060      	str	r0, [r4, #4]
 8004458:	4620      	mov	r0, r4
 800445a:	f000 f81b 	bl	8004494 <__sfp>
 800445e:	60a0      	str	r0, [r4, #8]
 8004460:	4620      	mov	r0, r4
 8004462:	f000 f817 	bl	8004494 <__sfp>
 8004466:	2200      	movs	r2, #0
 8004468:	60e0      	str	r0, [r4, #12]
 800446a:	2104      	movs	r1, #4
 800446c:	6860      	ldr	r0, [r4, #4]
 800446e:	f7ff ffa1 	bl	80043b4 <std>
 8004472:	2201      	movs	r2, #1
 8004474:	2109      	movs	r1, #9
 8004476:	68a0      	ldr	r0, [r4, #8]
 8004478:	f7ff ff9c 	bl	80043b4 <std>
 800447c:	2202      	movs	r2, #2
 800447e:	2112      	movs	r1, #18
 8004480:	68e0      	ldr	r0, [r4, #12]
 8004482:	f7ff ff97 	bl	80043b4 <std>
 8004486:	2301      	movs	r3, #1
 8004488:	61a3      	str	r3, [r4, #24]
 800448a:	bd10      	pop	{r4, pc}
 800448c:	08005190 	.word	0x08005190
 8004490:	080043fd 	.word	0x080043fd

08004494 <__sfp>:
 8004494:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004496:	4b1b      	ldr	r3, [pc, #108]	; (8004504 <__sfp+0x70>)
 8004498:	681e      	ldr	r6, [r3, #0]
 800449a:	69b3      	ldr	r3, [r6, #24]
 800449c:	4607      	mov	r7, r0
 800449e:	b913      	cbnz	r3, 80044a6 <__sfp+0x12>
 80044a0:	4630      	mov	r0, r6
 80044a2:	f7ff ffc7 	bl	8004434 <__sinit>
 80044a6:	3648      	adds	r6, #72	; 0x48
 80044a8:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80044ac:	3b01      	subs	r3, #1
 80044ae:	d503      	bpl.n	80044b8 <__sfp+0x24>
 80044b0:	6833      	ldr	r3, [r6, #0]
 80044b2:	b133      	cbz	r3, 80044c2 <__sfp+0x2e>
 80044b4:	6836      	ldr	r6, [r6, #0]
 80044b6:	e7f7      	b.n	80044a8 <__sfp+0x14>
 80044b8:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80044bc:	b16d      	cbz	r5, 80044da <__sfp+0x46>
 80044be:	3468      	adds	r4, #104	; 0x68
 80044c0:	e7f4      	b.n	80044ac <__sfp+0x18>
 80044c2:	2104      	movs	r1, #4
 80044c4:	4638      	mov	r0, r7
 80044c6:	f7ff ff9f 	bl	8004408 <__sfmoreglue>
 80044ca:	6030      	str	r0, [r6, #0]
 80044cc:	2800      	cmp	r0, #0
 80044ce:	d1f1      	bne.n	80044b4 <__sfp+0x20>
 80044d0:	230c      	movs	r3, #12
 80044d2:	603b      	str	r3, [r7, #0]
 80044d4:	4604      	mov	r4, r0
 80044d6:	4620      	mov	r0, r4
 80044d8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80044da:	4b0b      	ldr	r3, [pc, #44]	; (8004508 <__sfp+0x74>)
 80044dc:	6665      	str	r5, [r4, #100]	; 0x64
 80044de:	e9c4 5500 	strd	r5, r5, [r4]
 80044e2:	60a5      	str	r5, [r4, #8]
 80044e4:	e9c4 3503 	strd	r3, r5, [r4, #12]
 80044e8:	e9c4 5505 	strd	r5, r5, [r4, #20]
 80044ec:	2208      	movs	r2, #8
 80044ee:	4629      	mov	r1, r5
 80044f0:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80044f4:	f7ff ff3e 	bl	8004374 <memset>
 80044f8:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80044fc:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8004500:	e7e9      	b.n	80044d6 <__sfp+0x42>
 8004502:	bf00      	nop
 8004504:	08005190 	.word	0x08005190
 8004508:	ffff0001 	.word	0xffff0001

0800450c <_fwalk_reent>:
 800450c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004510:	4680      	mov	r8, r0
 8004512:	4689      	mov	r9, r1
 8004514:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8004518:	2600      	movs	r6, #0
 800451a:	b914      	cbnz	r4, 8004522 <_fwalk_reent+0x16>
 800451c:	4630      	mov	r0, r6
 800451e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004522:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 8004526:	3f01      	subs	r7, #1
 8004528:	d501      	bpl.n	800452e <_fwalk_reent+0x22>
 800452a:	6824      	ldr	r4, [r4, #0]
 800452c:	e7f5      	b.n	800451a <_fwalk_reent+0xe>
 800452e:	89ab      	ldrh	r3, [r5, #12]
 8004530:	2b01      	cmp	r3, #1
 8004532:	d907      	bls.n	8004544 <_fwalk_reent+0x38>
 8004534:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8004538:	3301      	adds	r3, #1
 800453a:	d003      	beq.n	8004544 <_fwalk_reent+0x38>
 800453c:	4629      	mov	r1, r5
 800453e:	4640      	mov	r0, r8
 8004540:	47c8      	blx	r9
 8004542:	4306      	orrs	r6, r0
 8004544:	3568      	adds	r5, #104	; 0x68
 8004546:	e7ee      	b.n	8004526 <_fwalk_reent+0x1a>

08004548 <_malloc_r>:
 8004548:	b570      	push	{r4, r5, r6, lr}
 800454a:	1ccd      	adds	r5, r1, #3
 800454c:	f025 0503 	bic.w	r5, r5, #3
 8004550:	3508      	adds	r5, #8
 8004552:	2d0c      	cmp	r5, #12
 8004554:	bf38      	it	cc
 8004556:	250c      	movcc	r5, #12
 8004558:	2d00      	cmp	r5, #0
 800455a:	4606      	mov	r6, r0
 800455c:	db01      	blt.n	8004562 <_malloc_r+0x1a>
 800455e:	42a9      	cmp	r1, r5
 8004560:	d903      	bls.n	800456a <_malloc_r+0x22>
 8004562:	230c      	movs	r3, #12
 8004564:	6033      	str	r3, [r6, #0]
 8004566:	2000      	movs	r0, #0
 8004568:	bd70      	pop	{r4, r5, r6, pc}
 800456a:	f000 fd6b 	bl	8005044 <__malloc_lock>
 800456e:	4a21      	ldr	r2, [pc, #132]	; (80045f4 <_malloc_r+0xac>)
 8004570:	6814      	ldr	r4, [r2, #0]
 8004572:	4621      	mov	r1, r4
 8004574:	b991      	cbnz	r1, 800459c <_malloc_r+0x54>
 8004576:	4c20      	ldr	r4, [pc, #128]	; (80045f8 <_malloc_r+0xb0>)
 8004578:	6823      	ldr	r3, [r4, #0]
 800457a:	b91b      	cbnz	r3, 8004584 <_malloc_r+0x3c>
 800457c:	4630      	mov	r0, r6
 800457e:	f000 fb05 	bl	8004b8c <_sbrk_r>
 8004582:	6020      	str	r0, [r4, #0]
 8004584:	4629      	mov	r1, r5
 8004586:	4630      	mov	r0, r6
 8004588:	f000 fb00 	bl	8004b8c <_sbrk_r>
 800458c:	1c43      	adds	r3, r0, #1
 800458e:	d124      	bne.n	80045da <_malloc_r+0x92>
 8004590:	230c      	movs	r3, #12
 8004592:	6033      	str	r3, [r6, #0]
 8004594:	4630      	mov	r0, r6
 8004596:	f000 fd56 	bl	8005046 <__malloc_unlock>
 800459a:	e7e4      	b.n	8004566 <_malloc_r+0x1e>
 800459c:	680b      	ldr	r3, [r1, #0]
 800459e:	1b5b      	subs	r3, r3, r5
 80045a0:	d418      	bmi.n	80045d4 <_malloc_r+0x8c>
 80045a2:	2b0b      	cmp	r3, #11
 80045a4:	d90f      	bls.n	80045c6 <_malloc_r+0x7e>
 80045a6:	600b      	str	r3, [r1, #0]
 80045a8:	50cd      	str	r5, [r1, r3]
 80045aa:	18cc      	adds	r4, r1, r3
 80045ac:	4630      	mov	r0, r6
 80045ae:	f000 fd4a 	bl	8005046 <__malloc_unlock>
 80045b2:	f104 000b 	add.w	r0, r4, #11
 80045b6:	1d23      	adds	r3, r4, #4
 80045b8:	f020 0007 	bic.w	r0, r0, #7
 80045bc:	1ac3      	subs	r3, r0, r3
 80045be:	d0d3      	beq.n	8004568 <_malloc_r+0x20>
 80045c0:	425a      	negs	r2, r3
 80045c2:	50e2      	str	r2, [r4, r3]
 80045c4:	e7d0      	b.n	8004568 <_malloc_r+0x20>
 80045c6:	428c      	cmp	r4, r1
 80045c8:	684b      	ldr	r3, [r1, #4]
 80045ca:	bf16      	itet	ne
 80045cc:	6063      	strne	r3, [r4, #4]
 80045ce:	6013      	streq	r3, [r2, #0]
 80045d0:	460c      	movne	r4, r1
 80045d2:	e7eb      	b.n	80045ac <_malloc_r+0x64>
 80045d4:	460c      	mov	r4, r1
 80045d6:	6849      	ldr	r1, [r1, #4]
 80045d8:	e7cc      	b.n	8004574 <_malloc_r+0x2c>
 80045da:	1cc4      	adds	r4, r0, #3
 80045dc:	f024 0403 	bic.w	r4, r4, #3
 80045e0:	42a0      	cmp	r0, r4
 80045e2:	d005      	beq.n	80045f0 <_malloc_r+0xa8>
 80045e4:	1a21      	subs	r1, r4, r0
 80045e6:	4630      	mov	r0, r6
 80045e8:	f000 fad0 	bl	8004b8c <_sbrk_r>
 80045ec:	3001      	adds	r0, #1
 80045ee:	d0cf      	beq.n	8004590 <_malloc_r+0x48>
 80045f0:	6025      	str	r5, [r4, #0]
 80045f2:	e7db      	b.n	80045ac <_malloc_r+0x64>
 80045f4:	20000090 	.word	0x20000090
 80045f8:	20000094 	.word	0x20000094

080045fc <__sfputc_r>:
 80045fc:	6893      	ldr	r3, [r2, #8]
 80045fe:	3b01      	subs	r3, #1
 8004600:	2b00      	cmp	r3, #0
 8004602:	b410      	push	{r4}
 8004604:	6093      	str	r3, [r2, #8]
 8004606:	da08      	bge.n	800461a <__sfputc_r+0x1e>
 8004608:	6994      	ldr	r4, [r2, #24]
 800460a:	42a3      	cmp	r3, r4
 800460c:	db01      	blt.n	8004612 <__sfputc_r+0x16>
 800460e:	290a      	cmp	r1, #10
 8004610:	d103      	bne.n	800461a <__sfputc_r+0x1e>
 8004612:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004616:	f000 bb0d 	b.w	8004c34 <__swbuf_r>
 800461a:	6813      	ldr	r3, [r2, #0]
 800461c:	1c58      	adds	r0, r3, #1
 800461e:	6010      	str	r0, [r2, #0]
 8004620:	7019      	strb	r1, [r3, #0]
 8004622:	4608      	mov	r0, r1
 8004624:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004628:	4770      	bx	lr

0800462a <__sfputs_r>:
 800462a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800462c:	4606      	mov	r6, r0
 800462e:	460f      	mov	r7, r1
 8004630:	4614      	mov	r4, r2
 8004632:	18d5      	adds	r5, r2, r3
 8004634:	42ac      	cmp	r4, r5
 8004636:	d101      	bne.n	800463c <__sfputs_r+0x12>
 8004638:	2000      	movs	r0, #0
 800463a:	e007      	b.n	800464c <__sfputs_r+0x22>
 800463c:	463a      	mov	r2, r7
 800463e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004642:	4630      	mov	r0, r6
 8004644:	f7ff ffda 	bl	80045fc <__sfputc_r>
 8004648:	1c43      	adds	r3, r0, #1
 800464a:	d1f3      	bne.n	8004634 <__sfputs_r+0xa>
 800464c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08004650 <_vfiprintf_r>:
 8004650:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004654:	460c      	mov	r4, r1
 8004656:	b09d      	sub	sp, #116	; 0x74
 8004658:	4617      	mov	r7, r2
 800465a:	461d      	mov	r5, r3
 800465c:	4606      	mov	r6, r0
 800465e:	b118      	cbz	r0, 8004668 <_vfiprintf_r+0x18>
 8004660:	6983      	ldr	r3, [r0, #24]
 8004662:	b90b      	cbnz	r3, 8004668 <_vfiprintf_r+0x18>
 8004664:	f7ff fee6 	bl	8004434 <__sinit>
 8004668:	4b7c      	ldr	r3, [pc, #496]	; (800485c <_vfiprintf_r+0x20c>)
 800466a:	429c      	cmp	r4, r3
 800466c:	d158      	bne.n	8004720 <_vfiprintf_r+0xd0>
 800466e:	6874      	ldr	r4, [r6, #4]
 8004670:	89a3      	ldrh	r3, [r4, #12]
 8004672:	0718      	lsls	r0, r3, #28
 8004674:	d55e      	bpl.n	8004734 <_vfiprintf_r+0xe4>
 8004676:	6923      	ldr	r3, [r4, #16]
 8004678:	2b00      	cmp	r3, #0
 800467a:	d05b      	beq.n	8004734 <_vfiprintf_r+0xe4>
 800467c:	2300      	movs	r3, #0
 800467e:	9309      	str	r3, [sp, #36]	; 0x24
 8004680:	2320      	movs	r3, #32
 8004682:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8004686:	2330      	movs	r3, #48	; 0x30
 8004688:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800468c:	9503      	str	r5, [sp, #12]
 800468e:	f04f 0b01 	mov.w	fp, #1
 8004692:	46b8      	mov	r8, r7
 8004694:	4645      	mov	r5, r8
 8004696:	f815 3b01 	ldrb.w	r3, [r5], #1
 800469a:	b10b      	cbz	r3, 80046a0 <_vfiprintf_r+0x50>
 800469c:	2b25      	cmp	r3, #37	; 0x25
 800469e:	d154      	bne.n	800474a <_vfiprintf_r+0xfa>
 80046a0:	ebb8 0a07 	subs.w	sl, r8, r7
 80046a4:	d00b      	beq.n	80046be <_vfiprintf_r+0x6e>
 80046a6:	4653      	mov	r3, sl
 80046a8:	463a      	mov	r2, r7
 80046aa:	4621      	mov	r1, r4
 80046ac:	4630      	mov	r0, r6
 80046ae:	f7ff ffbc 	bl	800462a <__sfputs_r>
 80046b2:	3001      	adds	r0, #1
 80046b4:	f000 80c2 	beq.w	800483c <_vfiprintf_r+0x1ec>
 80046b8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80046ba:	4453      	add	r3, sl
 80046bc:	9309      	str	r3, [sp, #36]	; 0x24
 80046be:	f898 3000 	ldrb.w	r3, [r8]
 80046c2:	2b00      	cmp	r3, #0
 80046c4:	f000 80ba 	beq.w	800483c <_vfiprintf_r+0x1ec>
 80046c8:	2300      	movs	r3, #0
 80046ca:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80046ce:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80046d2:	9304      	str	r3, [sp, #16]
 80046d4:	9307      	str	r3, [sp, #28]
 80046d6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80046da:	931a      	str	r3, [sp, #104]	; 0x68
 80046dc:	46a8      	mov	r8, r5
 80046de:	2205      	movs	r2, #5
 80046e0:	f818 1b01 	ldrb.w	r1, [r8], #1
 80046e4:	485e      	ldr	r0, [pc, #376]	; (8004860 <_vfiprintf_r+0x210>)
 80046e6:	f7fb fd93 	bl	8000210 <memchr>
 80046ea:	9b04      	ldr	r3, [sp, #16]
 80046ec:	bb78      	cbnz	r0, 800474e <_vfiprintf_r+0xfe>
 80046ee:	06d9      	lsls	r1, r3, #27
 80046f0:	bf44      	itt	mi
 80046f2:	2220      	movmi	r2, #32
 80046f4:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80046f8:	071a      	lsls	r2, r3, #28
 80046fa:	bf44      	itt	mi
 80046fc:	222b      	movmi	r2, #43	; 0x2b
 80046fe:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8004702:	782a      	ldrb	r2, [r5, #0]
 8004704:	2a2a      	cmp	r2, #42	; 0x2a
 8004706:	d02a      	beq.n	800475e <_vfiprintf_r+0x10e>
 8004708:	9a07      	ldr	r2, [sp, #28]
 800470a:	46a8      	mov	r8, r5
 800470c:	2000      	movs	r0, #0
 800470e:	250a      	movs	r5, #10
 8004710:	4641      	mov	r1, r8
 8004712:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004716:	3b30      	subs	r3, #48	; 0x30
 8004718:	2b09      	cmp	r3, #9
 800471a:	d969      	bls.n	80047f0 <_vfiprintf_r+0x1a0>
 800471c:	b360      	cbz	r0, 8004778 <_vfiprintf_r+0x128>
 800471e:	e024      	b.n	800476a <_vfiprintf_r+0x11a>
 8004720:	4b50      	ldr	r3, [pc, #320]	; (8004864 <_vfiprintf_r+0x214>)
 8004722:	429c      	cmp	r4, r3
 8004724:	d101      	bne.n	800472a <_vfiprintf_r+0xda>
 8004726:	68b4      	ldr	r4, [r6, #8]
 8004728:	e7a2      	b.n	8004670 <_vfiprintf_r+0x20>
 800472a:	4b4f      	ldr	r3, [pc, #316]	; (8004868 <_vfiprintf_r+0x218>)
 800472c:	429c      	cmp	r4, r3
 800472e:	bf08      	it	eq
 8004730:	68f4      	ldreq	r4, [r6, #12]
 8004732:	e79d      	b.n	8004670 <_vfiprintf_r+0x20>
 8004734:	4621      	mov	r1, r4
 8004736:	4630      	mov	r0, r6
 8004738:	f000 fae0 	bl	8004cfc <__swsetup_r>
 800473c:	2800      	cmp	r0, #0
 800473e:	d09d      	beq.n	800467c <_vfiprintf_r+0x2c>
 8004740:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004744:	b01d      	add	sp, #116	; 0x74
 8004746:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800474a:	46a8      	mov	r8, r5
 800474c:	e7a2      	b.n	8004694 <_vfiprintf_r+0x44>
 800474e:	4a44      	ldr	r2, [pc, #272]	; (8004860 <_vfiprintf_r+0x210>)
 8004750:	1a80      	subs	r0, r0, r2
 8004752:	fa0b f000 	lsl.w	r0, fp, r0
 8004756:	4318      	orrs	r0, r3
 8004758:	9004      	str	r0, [sp, #16]
 800475a:	4645      	mov	r5, r8
 800475c:	e7be      	b.n	80046dc <_vfiprintf_r+0x8c>
 800475e:	9a03      	ldr	r2, [sp, #12]
 8004760:	1d11      	adds	r1, r2, #4
 8004762:	6812      	ldr	r2, [r2, #0]
 8004764:	9103      	str	r1, [sp, #12]
 8004766:	2a00      	cmp	r2, #0
 8004768:	db01      	blt.n	800476e <_vfiprintf_r+0x11e>
 800476a:	9207      	str	r2, [sp, #28]
 800476c:	e004      	b.n	8004778 <_vfiprintf_r+0x128>
 800476e:	4252      	negs	r2, r2
 8004770:	f043 0302 	orr.w	r3, r3, #2
 8004774:	9207      	str	r2, [sp, #28]
 8004776:	9304      	str	r3, [sp, #16]
 8004778:	f898 3000 	ldrb.w	r3, [r8]
 800477c:	2b2e      	cmp	r3, #46	; 0x2e
 800477e:	d10e      	bne.n	800479e <_vfiprintf_r+0x14e>
 8004780:	f898 3001 	ldrb.w	r3, [r8, #1]
 8004784:	2b2a      	cmp	r3, #42	; 0x2a
 8004786:	d138      	bne.n	80047fa <_vfiprintf_r+0x1aa>
 8004788:	9b03      	ldr	r3, [sp, #12]
 800478a:	1d1a      	adds	r2, r3, #4
 800478c:	681b      	ldr	r3, [r3, #0]
 800478e:	9203      	str	r2, [sp, #12]
 8004790:	2b00      	cmp	r3, #0
 8004792:	bfb8      	it	lt
 8004794:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8004798:	f108 0802 	add.w	r8, r8, #2
 800479c:	9305      	str	r3, [sp, #20]
 800479e:	4d33      	ldr	r5, [pc, #204]	; (800486c <_vfiprintf_r+0x21c>)
 80047a0:	f898 1000 	ldrb.w	r1, [r8]
 80047a4:	2203      	movs	r2, #3
 80047a6:	4628      	mov	r0, r5
 80047a8:	f7fb fd32 	bl	8000210 <memchr>
 80047ac:	b140      	cbz	r0, 80047c0 <_vfiprintf_r+0x170>
 80047ae:	2340      	movs	r3, #64	; 0x40
 80047b0:	1b40      	subs	r0, r0, r5
 80047b2:	fa03 f000 	lsl.w	r0, r3, r0
 80047b6:	9b04      	ldr	r3, [sp, #16]
 80047b8:	4303      	orrs	r3, r0
 80047ba:	f108 0801 	add.w	r8, r8, #1
 80047be:	9304      	str	r3, [sp, #16]
 80047c0:	f898 1000 	ldrb.w	r1, [r8]
 80047c4:	482a      	ldr	r0, [pc, #168]	; (8004870 <_vfiprintf_r+0x220>)
 80047c6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80047ca:	2206      	movs	r2, #6
 80047cc:	f108 0701 	add.w	r7, r8, #1
 80047d0:	f7fb fd1e 	bl	8000210 <memchr>
 80047d4:	2800      	cmp	r0, #0
 80047d6:	d037      	beq.n	8004848 <_vfiprintf_r+0x1f8>
 80047d8:	4b26      	ldr	r3, [pc, #152]	; (8004874 <_vfiprintf_r+0x224>)
 80047da:	bb1b      	cbnz	r3, 8004824 <_vfiprintf_r+0x1d4>
 80047dc:	9b03      	ldr	r3, [sp, #12]
 80047de:	3307      	adds	r3, #7
 80047e0:	f023 0307 	bic.w	r3, r3, #7
 80047e4:	3308      	adds	r3, #8
 80047e6:	9303      	str	r3, [sp, #12]
 80047e8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80047ea:	444b      	add	r3, r9
 80047ec:	9309      	str	r3, [sp, #36]	; 0x24
 80047ee:	e750      	b.n	8004692 <_vfiprintf_r+0x42>
 80047f0:	fb05 3202 	mla	r2, r5, r2, r3
 80047f4:	2001      	movs	r0, #1
 80047f6:	4688      	mov	r8, r1
 80047f8:	e78a      	b.n	8004710 <_vfiprintf_r+0xc0>
 80047fa:	2300      	movs	r3, #0
 80047fc:	f108 0801 	add.w	r8, r8, #1
 8004800:	9305      	str	r3, [sp, #20]
 8004802:	4619      	mov	r1, r3
 8004804:	250a      	movs	r5, #10
 8004806:	4640      	mov	r0, r8
 8004808:	f810 2b01 	ldrb.w	r2, [r0], #1
 800480c:	3a30      	subs	r2, #48	; 0x30
 800480e:	2a09      	cmp	r2, #9
 8004810:	d903      	bls.n	800481a <_vfiprintf_r+0x1ca>
 8004812:	2b00      	cmp	r3, #0
 8004814:	d0c3      	beq.n	800479e <_vfiprintf_r+0x14e>
 8004816:	9105      	str	r1, [sp, #20]
 8004818:	e7c1      	b.n	800479e <_vfiprintf_r+0x14e>
 800481a:	fb05 2101 	mla	r1, r5, r1, r2
 800481e:	2301      	movs	r3, #1
 8004820:	4680      	mov	r8, r0
 8004822:	e7f0      	b.n	8004806 <_vfiprintf_r+0x1b6>
 8004824:	ab03      	add	r3, sp, #12
 8004826:	9300      	str	r3, [sp, #0]
 8004828:	4622      	mov	r2, r4
 800482a:	4b13      	ldr	r3, [pc, #76]	; (8004878 <_vfiprintf_r+0x228>)
 800482c:	a904      	add	r1, sp, #16
 800482e:	4630      	mov	r0, r6
 8004830:	f3af 8000 	nop.w
 8004834:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 8004838:	4681      	mov	r9, r0
 800483a:	d1d5      	bne.n	80047e8 <_vfiprintf_r+0x198>
 800483c:	89a3      	ldrh	r3, [r4, #12]
 800483e:	065b      	lsls	r3, r3, #25
 8004840:	f53f af7e 	bmi.w	8004740 <_vfiprintf_r+0xf0>
 8004844:	9809      	ldr	r0, [sp, #36]	; 0x24
 8004846:	e77d      	b.n	8004744 <_vfiprintf_r+0xf4>
 8004848:	ab03      	add	r3, sp, #12
 800484a:	9300      	str	r3, [sp, #0]
 800484c:	4622      	mov	r2, r4
 800484e:	4b0a      	ldr	r3, [pc, #40]	; (8004878 <_vfiprintf_r+0x228>)
 8004850:	a904      	add	r1, sp, #16
 8004852:	4630      	mov	r0, r6
 8004854:	f000 f888 	bl	8004968 <_printf_i>
 8004858:	e7ec      	b.n	8004834 <_vfiprintf_r+0x1e4>
 800485a:	bf00      	nop
 800485c:	080051b4 	.word	0x080051b4
 8004860:	080051f4 	.word	0x080051f4
 8004864:	080051d4 	.word	0x080051d4
 8004868:	08005194 	.word	0x08005194
 800486c:	080051fa 	.word	0x080051fa
 8004870:	080051fe 	.word	0x080051fe
 8004874:	00000000 	.word	0x00000000
 8004878:	0800462b 	.word	0x0800462b

0800487c <_printf_common>:
 800487c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004880:	4691      	mov	r9, r2
 8004882:	461f      	mov	r7, r3
 8004884:	688a      	ldr	r2, [r1, #8]
 8004886:	690b      	ldr	r3, [r1, #16]
 8004888:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800488c:	4293      	cmp	r3, r2
 800488e:	bfb8      	it	lt
 8004890:	4613      	movlt	r3, r2
 8004892:	f8c9 3000 	str.w	r3, [r9]
 8004896:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800489a:	4606      	mov	r6, r0
 800489c:	460c      	mov	r4, r1
 800489e:	b112      	cbz	r2, 80048a6 <_printf_common+0x2a>
 80048a0:	3301      	adds	r3, #1
 80048a2:	f8c9 3000 	str.w	r3, [r9]
 80048a6:	6823      	ldr	r3, [r4, #0]
 80048a8:	0699      	lsls	r1, r3, #26
 80048aa:	bf42      	ittt	mi
 80048ac:	f8d9 3000 	ldrmi.w	r3, [r9]
 80048b0:	3302      	addmi	r3, #2
 80048b2:	f8c9 3000 	strmi.w	r3, [r9]
 80048b6:	6825      	ldr	r5, [r4, #0]
 80048b8:	f015 0506 	ands.w	r5, r5, #6
 80048bc:	d107      	bne.n	80048ce <_printf_common+0x52>
 80048be:	f104 0a19 	add.w	sl, r4, #25
 80048c2:	68e3      	ldr	r3, [r4, #12]
 80048c4:	f8d9 2000 	ldr.w	r2, [r9]
 80048c8:	1a9b      	subs	r3, r3, r2
 80048ca:	42ab      	cmp	r3, r5
 80048cc:	dc28      	bgt.n	8004920 <_printf_common+0xa4>
 80048ce:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 80048d2:	6822      	ldr	r2, [r4, #0]
 80048d4:	3300      	adds	r3, #0
 80048d6:	bf18      	it	ne
 80048d8:	2301      	movne	r3, #1
 80048da:	0692      	lsls	r2, r2, #26
 80048dc:	d42d      	bmi.n	800493a <_printf_common+0xbe>
 80048de:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80048e2:	4639      	mov	r1, r7
 80048e4:	4630      	mov	r0, r6
 80048e6:	47c0      	blx	r8
 80048e8:	3001      	adds	r0, #1
 80048ea:	d020      	beq.n	800492e <_printf_common+0xb2>
 80048ec:	6823      	ldr	r3, [r4, #0]
 80048ee:	68e5      	ldr	r5, [r4, #12]
 80048f0:	f8d9 2000 	ldr.w	r2, [r9]
 80048f4:	f003 0306 	and.w	r3, r3, #6
 80048f8:	2b04      	cmp	r3, #4
 80048fa:	bf08      	it	eq
 80048fc:	1aad      	subeq	r5, r5, r2
 80048fe:	68a3      	ldr	r3, [r4, #8]
 8004900:	6922      	ldr	r2, [r4, #16]
 8004902:	bf0c      	ite	eq
 8004904:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004908:	2500      	movne	r5, #0
 800490a:	4293      	cmp	r3, r2
 800490c:	bfc4      	itt	gt
 800490e:	1a9b      	subgt	r3, r3, r2
 8004910:	18ed      	addgt	r5, r5, r3
 8004912:	f04f 0900 	mov.w	r9, #0
 8004916:	341a      	adds	r4, #26
 8004918:	454d      	cmp	r5, r9
 800491a:	d11a      	bne.n	8004952 <_printf_common+0xd6>
 800491c:	2000      	movs	r0, #0
 800491e:	e008      	b.n	8004932 <_printf_common+0xb6>
 8004920:	2301      	movs	r3, #1
 8004922:	4652      	mov	r2, sl
 8004924:	4639      	mov	r1, r7
 8004926:	4630      	mov	r0, r6
 8004928:	47c0      	blx	r8
 800492a:	3001      	adds	r0, #1
 800492c:	d103      	bne.n	8004936 <_printf_common+0xba>
 800492e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004932:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004936:	3501      	adds	r5, #1
 8004938:	e7c3      	b.n	80048c2 <_printf_common+0x46>
 800493a:	18e1      	adds	r1, r4, r3
 800493c:	1c5a      	adds	r2, r3, #1
 800493e:	2030      	movs	r0, #48	; 0x30
 8004940:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004944:	4422      	add	r2, r4
 8004946:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800494a:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800494e:	3302      	adds	r3, #2
 8004950:	e7c5      	b.n	80048de <_printf_common+0x62>
 8004952:	2301      	movs	r3, #1
 8004954:	4622      	mov	r2, r4
 8004956:	4639      	mov	r1, r7
 8004958:	4630      	mov	r0, r6
 800495a:	47c0      	blx	r8
 800495c:	3001      	adds	r0, #1
 800495e:	d0e6      	beq.n	800492e <_printf_common+0xb2>
 8004960:	f109 0901 	add.w	r9, r9, #1
 8004964:	e7d8      	b.n	8004918 <_printf_common+0x9c>
	...

08004968 <_printf_i>:
 8004968:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800496c:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8004970:	460c      	mov	r4, r1
 8004972:	7e09      	ldrb	r1, [r1, #24]
 8004974:	b085      	sub	sp, #20
 8004976:	296e      	cmp	r1, #110	; 0x6e
 8004978:	4617      	mov	r7, r2
 800497a:	4606      	mov	r6, r0
 800497c:	4698      	mov	r8, r3
 800497e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8004980:	f000 80b3 	beq.w	8004aea <_printf_i+0x182>
 8004984:	d822      	bhi.n	80049cc <_printf_i+0x64>
 8004986:	2963      	cmp	r1, #99	; 0x63
 8004988:	d036      	beq.n	80049f8 <_printf_i+0x90>
 800498a:	d80a      	bhi.n	80049a2 <_printf_i+0x3a>
 800498c:	2900      	cmp	r1, #0
 800498e:	f000 80b9 	beq.w	8004b04 <_printf_i+0x19c>
 8004992:	2958      	cmp	r1, #88	; 0x58
 8004994:	f000 8083 	beq.w	8004a9e <_printf_i+0x136>
 8004998:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800499c:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 80049a0:	e032      	b.n	8004a08 <_printf_i+0xa0>
 80049a2:	2964      	cmp	r1, #100	; 0x64
 80049a4:	d001      	beq.n	80049aa <_printf_i+0x42>
 80049a6:	2969      	cmp	r1, #105	; 0x69
 80049a8:	d1f6      	bne.n	8004998 <_printf_i+0x30>
 80049aa:	6820      	ldr	r0, [r4, #0]
 80049ac:	6813      	ldr	r3, [r2, #0]
 80049ae:	0605      	lsls	r5, r0, #24
 80049b0:	f103 0104 	add.w	r1, r3, #4
 80049b4:	d52a      	bpl.n	8004a0c <_printf_i+0xa4>
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	6011      	str	r1, [r2, #0]
 80049ba:	2b00      	cmp	r3, #0
 80049bc:	da03      	bge.n	80049c6 <_printf_i+0x5e>
 80049be:	222d      	movs	r2, #45	; 0x2d
 80049c0:	425b      	negs	r3, r3
 80049c2:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 80049c6:	486f      	ldr	r0, [pc, #444]	; (8004b84 <_printf_i+0x21c>)
 80049c8:	220a      	movs	r2, #10
 80049ca:	e039      	b.n	8004a40 <_printf_i+0xd8>
 80049cc:	2973      	cmp	r1, #115	; 0x73
 80049ce:	f000 809d 	beq.w	8004b0c <_printf_i+0x1a4>
 80049d2:	d808      	bhi.n	80049e6 <_printf_i+0x7e>
 80049d4:	296f      	cmp	r1, #111	; 0x6f
 80049d6:	d020      	beq.n	8004a1a <_printf_i+0xb2>
 80049d8:	2970      	cmp	r1, #112	; 0x70
 80049da:	d1dd      	bne.n	8004998 <_printf_i+0x30>
 80049dc:	6823      	ldr	r3, [r4, #0]
 80049de:	f043 0320 	orr.w	r3, r3, #32
 80049e2:	6023      	str	r3, [r4, #0]
 80049e4:	e003      	b.n	80049ee <_printf_i+0x86>
 80049e6:	2975      	cmp	r1, #117	; 0x75
 80049e8:	d017      	beq.n	8004a1a <_printf_i+0xb2>
 80049ea:	2978      	cmp	r1, #120	; 0x78
 80049ec:	d1d4      	bne.n	8004998 <_printf_i+0x30>
 80049ee:	2378      	movs	r3, #120	; 0x78
 80049f0:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80049f4:	4864      	ldr	r0, [pc, #400]	; (8004b88 <_printf_i+0x220>)
 80049f6:	e055      	b.n	8004aa4 <_printf_i+0x13c>
 80049f8:	6813      	ldr	r3, [r2, #0]
 80049fa:	1d19      	adds	r1, r3, #4
 80049fc:	681b      	ldr	r3, [r3, #0]
 80049fe:	6011      	str	r1, [r2, #0]
 8004a00:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004a04:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004a08:	2301      	movs	r3, #1
 8004a0a:	e08c      	b.n	8004b26 <_printf_i+0x1be>
 8004a0c:	681b      	ldr	r3, [r3, #0]
 8004a0e:	6011      	str	r1, [r2, #0]
 8004a10:	f010 0f40 	tst.w	r0, #64	; 0x40
 8004a14:	bf18      	it	ne
 8004a16:	b21b      	sxthne	r3, r3
 8004a18:	e7cf      	b.n	80049ba <_printf_i+0x52>
 8004a1a:	6813      	ldr	r3, [r2, #0]
 8004a1c:	6825      	ldr	r5, [r4, #0]
 8004a1e:	1d18      	adds	r0, r3, #4
 8004a20:	6010      	str	r0, [r2, #0]
 8004a22:	0628      	lsls	r0, r5, #24
 8004a24:	d501      	bpl.n	8004a2a <_printf_i+0xc2>
 8004a26:	681b      	ldr	r3, [r3, #0]
 8004a28:	e002      	b.n	8004a30 <_printf_i+0xc8>
 8004a2a:	0668      	lsls	r0, r5, #25
 8004a2c:	d5fb      	bpl.n	8004a26 <_printf_i+0xbe>
 8004a2e:	881b      	ldrh	r3, [r3, #0]
 8004a30:	4854      	ldr	r0, [pc, #336]	; (8004b84 <_printf_i+0x21c>)
 8004a32:	296f      	cmp	r1, #111	; 0x6f
 8004a34:	bf14      	ite	ne
 8004a36:	220a      	movne	r2, #10
 8004a38:	2208      	moveq	r2, #8
 8004a3a:	2100      	movs	r1, #0
 8004a3c:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8004a40:	6865      	ldr	r5, [r4, #4]
 8004a42:	60a5      	str	r5, [r4, #8]
 8004a44:	2d00      	cmp	r5, #0
 8004a46:	f2c0 8095 	blt.w	8004b74 <_printf_i+0x20c>
 8004a4a:	6821      	ldr	r1, [r4, #0]
 8004a4c:	f021 0104 	bic.w	r1, r1, #4
 8004a50:	6021      	str	r1, [r4, #0]
 8004a52:	2b00      	cmp	r3, #0
 8004a54:	d13d      	bne.n	8004ad2 <_printf_i+0x16a>
 8004a56:	2d00      	cmp	r5, #0
 8004a58:	f040 808e 	bne.w	8004b78 <_printf_i+0x210>
 8004a5c:	4665      	mov	r5, ip
 8004a5e:	2a08      	cmp	r2, #8
 8004a60:	d10b      	bne.n	8004a7a <_printf_i+0x112>
 8004a62:	6823      	ldr	r3, [r4, #0]
 8004a64:	07db      	lsls	r3, r3, #31
 8004a66:	d508      	bpl.n	8004a7a <_printf_i+0x112>
 8004a68:	6923      	ldr	r3, [r4, #16]
 8004a6a:	6862      	ldr	r2, [r4, #4]
 8004a6c:	429a      	cmp	r2, r3
 8004a6e:	bfde      	ittt	le
 8004a70:	2330      	movle	r3, #48	; 0x30
 8004a72:	f805 3c01 	strble.w	r3, [r5, #-1]
 8004a76:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8004a7a:	ebac 0305 	sub.w	r3, ip, r5
 8004a7e:	6123      	str	r3, [r4, #16]
 8004a80:	f8cd 8000 	str.w	r8, [sp]
 8004a84:	463b      	mov	r3, r7
 8004a86:	aa03      	add	r2, sp, #12
 8004a88:	4621      	mov	r1, r4
 8004a8a:	4630      	mov	r0, r6
 8004a8c:	f7ff fef6 	bl	800487c <_printf_common>
 8004a90:	3001      	adds	r0, #1
 8004a92:	d14d      	bne.n	8004b30 <_printf_i+0x1c8>
 8004a94:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004a98:	b005      	add	sp, #20
 8004a9a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8004a9e:	4839      	ldr	r0, [pc, #228]	; (8004b84 <_printf_i+0x21c>)
 8004aa0:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8004aa4:	6813      	ldr	r3, [r2, #0]
 8004aa6:	6821      	ldr	r1, [r4, #0]
 8004aa8:	1d1d      	adds	r5, r3, #4
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	6015      	str	r5, [r2, #0]
 8004aae:	060a      	lsls	r2, r1, #24
 8004ab0:	d50b      	bpl.n	8004aca <_printf_i+0x162>
 8004ab2:	07ca      	lsls	r2, r1, #31
 8004ab4:	bf44      	itt	mi
 8004ab6:	f041 0120 	orrmi.w	r1, r1, #32
 8004aba:	6021      	strmi	r1, [r4, #0]
 8004abc:	b91b      	cbnz	r3, 8004ac6 <_printf_i+0x15e>
 8004abe:	6822      	ldr	r2, [r4, #0]
 8004ac0:	f022 0220 	bic.w	r2, r2, #32
 8004ac4:	6022      	str	r2, [r4, #0]
 8004ac6:	2210      	movs	r2, #16
 8004ac8:	e7b7      	b.n	8004a3a <_printf_i+0xd2>
 8004aca:	064d      	lsls	r5, r1, #25
 8004acc:	bf48      	it	mi
 8004ace:	b29b      	uxthmi	r3, r3
 8004ad0:	e7ef      	b.n	8004ab2 <_printf_i+0x14a>
 8004ad2:	4665      	mov	r5, ip
 8004ad4:	fbb3 f1f2 	udiv	r1, r3, r2
 8004ad8:	fb02 3311 	mls	r3, r2, r1, r3
 8004adc:	5cc3      	ldrb	r3, [r0, r3]
 8004ade:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8004ae2:	460b      	mov	r3, r1
 8004ae4:	2900      	cmp	r1, #0
 8004ae6:	d1f5      	bne.n	8004ad4 <_printf_i+0x16c>
 8004ae8:	e7b9      	b.n	8004a5e <_printf_i+0xf6>
 8004aea:	6813      	ldr	r3, [r2, #0]
 8004aec:	6825      	ldr	r5, [r4, #0]
 8004aee:	6961      	ldr	r1, [r4, #20]
 8004af0:	1d18      	adds	r0, r3, #4
 8004af2:	6010      	str	r0, [r2, #0]
 8004af4:	0628      	lsls	r0, r5, #24
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	d501      	bpl.n	8004afe <_printf_i+0x196>
 8004afa:	6019      	str	r1, [r3, #0]
 8004afc:	e002      	b.n	8004b04 <_printf_i+0x19c>
 8004afe:	066a      	lsls	r2, r5, #25
 8004b00:	d5fb      	bpl.n	8004afa <_printf_i+0x192>
 8004b02:	8019      	strh	r1, [r3, #0]
 8004b04:	2300      	movs	r3, #0
 8004b06:	6123      	str	r3, [r4, #16]
 8004b08:	4665      	mov	r5, ip
 8004b0a:	e7b9      	b.n	8004a80 <_printf_i+0x118>
 8004b0c:	6813      	ldr	r3, [r2, #0]
 8004b0e:	1d19      	adds	r1, r3, #4
 8004b10:	6011      	str	r1, [r2, #0]
 8004b12:	681d      	ldr	r5, [r3, #0]
 8004b14:	6862      	ldr	r2, [r4, #4]
 8004b16:	2100      	movs	r1, #0
 8004b18:	4628      	mov	r0, r5
 8004b1a:	f7fb fb79 	bl	8000210 <memchr>
 8004b1e:	b108      	cbz	r0, 8004b24 <_printf_i+0x1bc>
 8004b20:	1b40      	subs	r0, r0, r5
 8004b22:	6060      	str	r0, [r4, #4]
 8004b24:	6863      	ldr	r3, [r4, #4]
 8004b26:	6123      	str	r3, [r4, #16]
 8004b28:	2300      	movs	r3, #0
 8004b2a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004b2e:	e7a7      	b.n	8004a80 <_printf_i+0x118>
 8004b30:	6923      	ldr	r3, [r4, #16]
 8004b32:	462a      	mov	r2, r5
 8004b34:	4639      	mov	r1, r7
 8004b36:	4630      	mov	r0, r6
 8004b38:	47c0      	blx	r8
 8004b3a:	3001      	adds	r0, #1
 8004b3c:	d0aa      	beq.n	8004a94 <_printf_i+0x12c>
 8004b3e:	6823      	ldr	r3, [r4, #0]
 8004b40:	079b      	lsls	r3, r3, #30
 8004b42:	d413      	bmi.n	8004b6c <_printf_i+0x204>
 8004b44:	68e0      	ldr	r0, [r4, #12]
 8004b46:	9b03      	ldr	r3, [sp, #12]
 8004b48:	4298      	cmp	r0, r3
 8004b4a:	bfb8      	it	lt
 8004b4c:	4618      	movlt	r0, r3
 8004b4e:	e7a3      	b.n	8004a98 <_printf_i+0x130>
 8004b50:	2301      	movs	r3, #1
 8004b52:	464a      	mov	r2, r9
 8004b54:	4639      	mov	r1, r7
 8004b56:	4630      	mov	r0, r6
 8004b58:	47c0      	blx	r8
 8004b5a:	3001      	adds	r0, #1
 8004b5c:	d09a      	beq.n	8004a94 <_printf_i+0x12c>
 8004b5e:	3501      	adds	r5, #1
 8004b60:	68e3      	ldr	r3, [r4, #12]
 8004b62:	9a03      	ldr	r2, [sp, #12]
 8004b64:	1a9b      	subs	r3, r3, r2
 8004b66:	42ab      	cmp	r3, r5
 8004b68:	dcf2      	bgt.n	8004b50 <_printf_i+0x1e8>
 8004b6a:	e7eb      	b.n	8004b44 <_printf_i+0x1dc>
 8004b6c:	2500      	movs	r5, #0
 8004b6e:	f104 0919 	add.w	r9, r4, #25
 8004b72:	e7f5      	b.n	8004b60 <_printf_i+0x1f8>
 8004b74:	2b00      	cmp	r3, #0
 8004b76:	d1ac      	bne.n	8004ad2 <_printf_i+0x16a>
 8004b78:	7803      	ldrb	r3, [r0, #0]
 8004b7a:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004b7e:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004b82:	e76c      	b.n	8004a5e <_printf_i+0xf6>
 8004b84:	08005205 	.word	0x08005205
 8004b88:	08005216 	.word	0x08005216

08004b8c <_sbrk_r>:
 8004b8c:	b538      	push	{r3, r4, r5, lr}
 8004b8e:	4c06      	ldr	r4, [pc, #24]	; (8004ba8 <_sbrk_r+0x1c>)
 8004b90:	2300      	movs	r3, #0
 8004b92:	4605      	mov	r5, r0
 8004b94:	4608      	mov	r0, r1
 8004b96:	6023      	str	r3, [r4, #0]
 8004b98:	f7fc f968 	bl	8000e6c <_sbrk>
 8004b9c:	1c43      	adds	r3, r0, #1
 8004b9e:	d102      	bne.n	8004ba6 <_sbrk_r+0x1a>
 8004ba0:	6823      	ldr	r3, [r4, #0]
 8004ba2:	b103      	cbz	r3, 8004ba6 <_sbrk_r+0x1a>
 8004ba4:	602b      	str	r3, [r5, #0]
 8004ba6:	bd38      	pop	{r3, r4, r5, pc}
 8004ba8:	20000240 	.word	0x20000240

08004bac <__sread>:
 8004bac:	b510      	push	{r4, lr}
 8004bae:	460c      	mov	r4, r1
 8004bb0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004bb4:	f000 fa96 	bl	80050e4 <_read_r>
 8004bb8:	2800      	cmp	r0, #0
 8004bba:	bfab      	itete	ge
 8004bbc:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8004bbe:	89a3      	ldrhlt	r3, [r4, #12]
 8004bc0:	181b      	addge	r3, r3, r0
 8004bc2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8004bc6:	bfac      	ite	ge
 8004bc8:	6563      	strge	r3, [r4, #84]	; 0x54
 8004bca:	81a3      	strhlt	r3, [r4, #12]
 8004bcc:	bd10      	pop	{r4, pc}

08004bce <__swrite>:
 8004bce:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004bd2:	461f      	mov	r7, r3
 8004bd4:	898b      	ldrh	r3, [r1, #12]
 8004bd6:	05db      	lsls	r3, r3, #23
 8004bd8:	4605      	mov	r5, r0
 8004bda:	460c      	mov	r4, r1
 8004bdc:	4616      	mov	r6, r2
 8004bde:	d505      	bpl.n	8004bec <__swrite+0x1e>
 8004be0:	2302      	movs	r3, #2
 8004be2:	2200      	movs	r2, #0
 8004be4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004be8:	f000 f9b6 	bl	8004f58 <_lseek_r>
 8004bec:	89a3      	ldrh	r3, [r4, #12]
 8004bee:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004bf2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004bf6:	81a3      	strh	r3, [r4, #12]
 8004bf8:	4632      	mov	r2, r6
 8004bfa:	463b      	mov	r3, r7
 8004bfc:	4628      	mov	r0, r5
 8004bfe:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004c02:	f000 b869 	b.w	8004cd8 <_write_r>

08004c06 <__sseek>:
 8004c06:	b510      	push	{r4, lr}
 8004c08:	460c      	mov	r4, r1
 8004c0a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004c0e:	f000 f9a3 	bl	8004f58 <_lseek_r>
 8004c12:	1c43      	adds	r3, r0, #1
 8004c14:	89a3      	ldrh	r3, [r4, #12]
 8004c16:	bf15      	itete	ne
 8004c18:	6560      	strne	r0, [r4, #84]	; 0x54
 8004c1a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8004c1e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8004c22:	81a3      	strheq	r3, [r4, #12]
 8004c24:	bf18      	it	ne
 8004c26:	81a3      	strhne	r3, [r4, #12]
 8004c28:	bd10      	pop	{r4, pc}

08004c2a <__sclose>:
 8004c2a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004c2e:	f000 b8d3 	b.w	8004dd8 <_close_r>
	...

08004c34 <__swbuf_r>:
 8004c34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004c36:	460e      	mov	r6, r1
 8004c38:	4614      	mov	r4, r2
 8004c3a:	4605      	mov	r5, r0
 8004c3c:	b118      	cbz	r0, 8004c46 <__swbuf_r+0x12>
 8004c3e:	6983      	ldr	r3, [r0, #24]
 8004c40:	b90b      	cbnz	r3, 8004c46 <__swbuf_r+0x12>
 8004c42:	f7ff fbf7 	bl	8004434 <__sinit>
 8004c46:	4b21      	ldr	r3, [pc, #132]	; (8004ccc <__swbuf_r+0x98>)
 8004c48:	429c      	cmp	r4, r3
 8004c4a:	d12a      	bne.n	8004ca2 <__swbuf_r+0x6e>
 8004c4c:	686c      	ldr	r4, [r5, #4]
 8004c4e:	69a3      	ldr	r3, [r4, #24]
 8004c50:	60a3      	str	r3, [r4, #8]
 8004c52:	89a3      	ldrh	r3, [r4, #12]
 8004c54:	071a      	lsls	r2, r3, #28
 8004c56:	d52e      	bpl.n	8004cb6 <__swbuf_r+0x82>
 8004c58:	6923      	ldr	r3, [r4, #16]
 8004c5a:	b363      	cbz	r3, 8004cb6 <__swbuf_r+0x82>
 8004c5c:	6923      	ldr	r3, [r4, #16]
 8004c5e:	6820      	ldr	r0, [r4, #0]
 8004c60:	1ac0      	subs	r0, r0, r3
 8004c62:	6963      	ldr	r3, [r4, #20]
 8004c64:	b2f6      	uxtb	r6, r6
 8004c66:	4283      	cmp	r3, r0
 8004c68:	4637      	mov	r7, r6
 8004c6a:	dc04      	bgt.n	8004c76 <__swbuf_r+0x42>
 8004c6c:	4621      	mov	r1, r4
 8004c6e:	4628      	mov	r0, r5
 8004c70:	f000 f948 	bl	8004f04 <_fflush_r>
 8004c74:	bb28      	cbnz	r0, 8004cc2 <__swbuf_r+0x8e>
 8004c76:	68a3      	ldr	r3, [r4, #8]
 8004c78:	3b01      	subs	r3, #1
 8004c7a:	60a3      	str	r3, [r4, #8]
 8004c7c:	6823      	ldr	r3, [r4, #0]
 8004c7e:	1c5a      	adds	r2, r3, #1
 8004c80:	6022      	str	r2, [r4, #0]
 8004c82:	701e      	strb	r6, [r3, #0]
 8004c84:	6963      	ldr	r3, [r4, #20]
 8004c86:	3001      	adds	r0, #1
 8004c88:	4283      	cmp	r3, r0
 8004c8a:	d004      	beq.n	8004c96 <__swbuf_r+0x62>
 8004c8c:	89a3      	ldrh	r3, [r4, #12]
 8004c8e:	07db      	lsls	r3, r3, #31
 8004c90:	d519      	bpl.n	8004cc6 <__swbuf_r+0x92>
 8004c92:	2e0a      	cmp	r6, #10
 8004c94:	d117      	bne.n	8004cc6 <__swbuf_r+0x92>
 8004c96:	4621      	mov	r1, r4
 8004c98:	4628      	mov	r0, r5
 8004c9a:	f000 f933 	bl	8004f04 <_fflush_r>
 8004c9e:	b190      	cbz	r0, 8004cc6 <__swbuf_r+0x92>
 8004ca0:	e00f      	b.n	8004cc2 <__swbuf_r+0x8e>
 8004ca2:	4b0b      	ldr	r3, [pc, #44]	; (8004cd0 <__swbuf_r+0x9c>)
 8004ca4:	429c      	cmp	r4, r3
 8004ca6:	d101      	bne.n	8004cac <__swbuf_r+0x78>
 8004ca8:	68ac      	ldr	r4, [r5, #8]
 8004caa:	e7d0      	b.n	8004c4e <__swbuf_r+0x1a>
 8004cac:	4b09      	ldr	r3, [pc, #36]	; (8004cd4 <__swbuf_r+0xa0>)
 8004cae:	429c      	cmp	r4, r3
 8004cb0:	bf08      	it	eq
 8004cb2:	68ec      	ldreq	r4, [r5, #12]
 8004cb4:	e7cb      	b.n	8004c4e <__swbuf_r+0x1a>
 8004cb6:	4621      	mov	r1, r4
 8004cb8:	4628      	mov	r0, r5
 8004cba:	f000 f81f 	bl	8004cfc <__swsetup_r>
 8004cbe:	2800      	cmp	r0, #0
 8004cc0:	d0cc      	beq.n	8004c5c <__swbuf_r+0x28>
 8004cc2:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8004cc6:	4638      	mov	r0, r7
 8004cc8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004cca:	bf00      	nop
 8004ccc:	080051b4 	.word	0x080051b4
 8004cd0:	080051d4 	.word	0x080051d4
 8004cd4:	08005194 	.word	0x08005194

08004cd8 <_write_r>:
 8004cd8:	b538      	push	{r3, r4, r5, lr}
 8004cda:	4c07      	ldr	r4, [pc, #28]	; (8004cf8 <_write_r+0x20>)
 8004cdc:	4605      	mov	r5, r0
 8004cde:	4608      	mov	r0, r1
 8004ce0:	4611      	mov	r1, r2
 8004ce2:	2200      	movs	r2, #0
 8004ce4:	6022      	str	r2, [r4, #0]
 8004ce6:	461a      	mov	r2, r3
 8004ce8:	f7fc f86f 	bl	8000dca <_write>
 8004cec:	1c43      	adds	r3, r0, #1
 8004cee:	d102      	bne.n	8004cf6 <_write_r+0x1e>
 8004cf0:	6823      	ldr	r3, [r4, #0]
 8004cf2:	b103      	cbz	r3, 8004cf6 <_write_r+0x1e>
 8004cf4:	602b      	str	r3, [r5, #0]
 8004cf6:	bd38      	pop	{r3, r4, r5, pc}
 8004cf8:	20000240 	.word	0x20000240

08004cfc <__swsetup_r>:
 8004cfc:	4b32      	ldr	r3, [pc, #200]	; (8004dc8 <__swsetup_r+0xcc>)
 8004cfe:	b570      	push	{r4, r5, r6, lr}
 8004d00:	681d      	ldr	r5, [r3, #0]
 8004d02:	4606      	mov	r6, r0
 8004d04:	460c      	mov	r4, r1
 8004d06:	b125      	cbz	r5, 8004d12 <__swsetup_r+0x16>
 8004d08:	69ab      	ldr	r3, [r5, #24]
 8004d0a:	b913      	cbnz	r3, 8004d12 <__swsetup_r+0x16>
 8004d0c:	4628      	mov	r0, r5
 8004d0e:	f7ff fb91 	bl	8004434 <__sinit>
 8004d12:	4b2e      	ldr	r3, [pc, #184]	; (8004dcc <__swsetup_r+0xd0>)
 8004d14:	429c      	cmp	r4, r3
 8004d16:	d10f      	bne.n	8004d38 <__swsetup_r+0x3c>
 8004d18:	686c      	ldr	r4, [r5, #4]
 8004d1a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004d1e:	b29a      	uxth	r2, r3
 8004d20:	0715      	lsls	r5, r2, #28
 8004d22:	d42c      	bmi.n	8004d7e <__swsetup_r+0x82>
 8004d24:	06d0      	lsls	r0, r2, #27
 8004d26:	d411      	bmi.n	8004d4c <__swsetup_r+0x50>
 8004d28:	2209      	movs	r2, #9
 8004d2a:	6032      	str	r2, [r6, #0]
 8004d2c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004d30:	81a3      	strh	r3, [r4, #12]
 8004d32:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004d36:	e03e      	b.n	8004db6 <__swsetup_r+0xba>
 8004d38:	4b25      	ldr	r3, [pc, #148]	; (8004dd0 <__swsetup_r+0xd4>)
 8004d3a:	429c      	cmp	r4, r3
 8004d3c:	d101      	bne.n	8004d42 <__swsetup_r+0x46>
 8004d3e:	68ac      	ldr	r4, [r5, #8]
 8004d40:	e7eb      	b.n	8004d1a <__swsetup_r+0x1e>
 8004d42:	4b24      	ldr	r3, [pc, #144]	; (8004dd4 <__swsetup_r+0xd8>)
 8004d44:	429c      	cmp	r4, r3
 8004d46:	bf08      	it	eq
 8004d48:	68ec      	ldreq	r4, [r5, #12]
 8004d4a:	e7e6      	b.n	8004d1a <__swsetup_r+0x1e>
 8004d4c:	0751      	lsls	r1, r2, #29
 8004d4e:	d512      	bpl.n	8004d76 <__swsetup_r+0x7a>
 8004d50:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004d52:	b141      	cbz	r1, 8004d66 <__swsetup_r+0x6a>
 8004d54:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004d58:	4299      	cmp	r1, r3
 8004d5a:	d002      	beq.n	8004d62 <__swsetup_r+0x66>
 8004d5c:	4630      	mov	r0, r6
 8004d5e:	f000 f973 	bl	8005048 <_free_r>
 8004d62:	2300      	movs	r3, #0
 8004d64:	6363      	str	r3, [r4, #52]	; 0x34
 8004d66:	89a3      	ldrh	r3, [r4, #12]
 8004d68:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8004d6c:	81a3      	strh	r3, [r4, #12]
 8004d6e:	2300      	movs	r3, #0
 8004d70:	6063      	str	r3, [r4, #4]
 8004d72:	6923      	ldr	r3, [r4, #16]
 8004d74:	6023      	str	r3, [r4, #0]
 8004d76:	89a3      	ldrh	r3, [r4, #12]
 8004d78:	f043 0308 	orr.w	r3, r3, #8
 8004d7c:	81a3      	strh	r3, [r4, #12]
 8004d7e:	6923      	ldr	r3, [r4, #16]
 8004d80:	b94b      	cbnz	r3, 8004d96 <__swsetup_r+0x9a>
 8004d82:	89a3      	ldrh	r3, [r4, #12]
 8004d84:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8004d88:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004d8c:	d003      	beq.n	8004d96 <__swsetup_r+0x9a>
 8004d8e:	4621      	mov	r1, r4
 8004d90:	4630      	mov	r0, r6
 8004d92:	f000 f917 	bl	8004fc4 <__smakebuf_r>
 8004d96:	89a2      	ldrh	r2, [r4, #12]
 8004d98:	f012 0301 	ands.w	r3, r2, #1
 8004d9c:	d00c      	beq.n	8004db8 <__swsetup_r+0xbc>
 8004d9e:	2300      	movs	r3, #0
 8004da0:	60a3      	str	r3, [r4, #8]
 8004da2:	6963      	ldr	r3, [r4, #20]
 8004da4:	425b      	negs	r3, r3
 8004da6:	61a3      	str	r3, [r4, #24]
 8004da8:	6923      	ldr	r3, [r4, #16]
 8004daa:	b953      	cbnz	r3, 8004dc2 <__swsetup_r+0xc6>
 8004dac:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004db0:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 8004db4:	d1ba      	bne.n	8004d2c <__swsetup_r+0x30>
 8004db6:	bd70      	pop	{r4, r5, r6, pc}
 8004db8:	0792      	lsls	r2, r2, #30
 8004dba:	bf58      	it	pl
 8004dbc:	6963      	ldrpl	r3, [r4, #20]
 8004dbe:	60a3      	str	r3, [r4, #8]
 8004dc0:	e7f2      	b.n	8004da8 <__swsetup_r+0xac>
 8004dc2:	2000      	movs	r0, #0
 8004dc4:	e7f7      	b.n	8004db6 <__swsetup_r+0xba>
 8004dc6:	bf00      	nop
 8004dc8:	2000000c 	.word	0x2000000c
 8004dcc:	080051b4 	.word	0x080051b4
 8004dd0:	080051d4 	.word	0x080051d4
 8004dd4:	08005194 	.word	0x08005194

08004dd8 <_close_r>:
 8004dd8:	b538      	push	{r3, r4, r5, lr}
 8004dda:	4c06      	ldr	r4, [pc, #24]	; (8004df4 <_close_r+0x1c>)
 8004ddc:	2300      	movs	r3, #0
 8004dde:	4605      	mov	r5, r0
 8004de0:	4608      	mov	r0, r1
 8004de2:	6023      	str	r3, [r4, #0]
 8004de4:	f7fc f80d 	bl	8000e02 <_close>
 8004de8:	1c43      	adds	r3, r0, #1
 8004dea:	d102      	bne.n	8004df2 <_close_r+0x1a>
 8004dec:	6823      	ldr	r3, [r4, #0]
 8004dee:	b103      	cbz	r3, 8004df2 <_close_r+0x1a>
 8004df0:	602b      	str	r3, [r5, #0]
 8004df2:	bd38      	pop	{r3, r4, r5, pc}
 8004df4:	20000240 	.word	0x20000240

08004df8 <__sflush_r>:
 8004df8:	898a      	ldrh	r2, [r1, #12]
 8004dfa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004dfe:	4605      	mov	r5, r0
 8004e00:	0710      	lsls	r0, r2, #28
 8004e02:	460c      	mov	r4, r1
 8004e04:	d458      	bmi.n	8004eb8 <__sflush_r+0xc0>
 8004e06:	684b      	ldr	r3, [r1, #4]
 8004e08:	2b00      	cmp	r3, #0
 8004e0a:	dc05      	bgt.n	8004e18 <__sflush_r+0x20>
 8004e0c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8004e0e:	2b00      	cmp	r3, #0
 8004e10:	dc02      	bgt.n	8004e18 <__sflush_r+0x20>
 8004e12:	2000      	movs	r0, #0
 8004e14:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004e18:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8004e1a:	2e00      	cmp	r6, #0
 8004e1c:	d0f9      	beq.n	8004e12 <__sflush_r+0x1a>
 8004e1e:	2300      	movs	r3, #0
 8004e20:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8004e24:	682f      	ldr	r7, [r5, #0]
 8004e26:	6a21      	ldr	r1, [r4, #32]
 8004e28:	602b      	str	r3, [r5, #0]
 8004e2a:	d032      	beq.n	8004e92 <__sflush_r+0x9a>
 8004e2c:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8004e2e:	89a3      	ldrh	r3, [r4, #12]
 8004e30:	075a      	lsls	r2, r3, #29
 8004e32:	d505      	bpl.n	8004e40 <__sflush_r+0x48>
 8004e34:	6863      	ldr	r3, [r4, #4]
 8004e36:	1ac0      	subs	r0, r0, r3
 8004e38:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8004e3a:	b10b      	cbz	r3, 8004e40 <__sflush_r+0x48>
 8004e3c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8004e3e:	1ac0      	subs	r0, r0, r3
 8004e40:	2300      	movs	r3, #0
 8004e42:	4602      	mov	r2, r0
 8004e44:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8004e46:	6a21      	ldr	r1, [r4, #32]
 8004e48:	4628      	mov	r0, r5
 8004e4a:	47b0      	blx	r6
 8004e4c:	1c43      	adds	r3, r0, #1
 8004e4e:	89a3      	ldrh	r3, [r4, #12]
 8004e50:	d106      	bne.n	8004e60 <__sflush_r+0x68>
 8004e52:	6829      	ldr	r1, [r5, #0]
 8004e54:	291d      	cmp	r1, #29
 8004e56:	d848      	bhi.n	8004eea <__sflush_r+0xf2>
 8004e58:	4a29      	ldr	r2, [pc, #164]	; (8004f00 <__sflush_r+0x108>)
 8004e5a:	40ca      	lsrs	r2, r1
 8004e5c:	07d6      	lsls	r6, r2, #31
 8004e5e:	d544      	bpl.n	8004eea <__sflush_r+0xf2>
 8004e60:	2200      	movs	r2, #0
 8004e62:	6062      	str	r2, [r4, #4]
 8004e64:	04d9      	lsls	r1, r3, #19
 8004e66:	6922      	ldr	r2, [r4, #16]
 8004e68:	6022      	str	r2, [r4, #0]
 8004e6a:	d504      	bpl.n	8004e76 <__sflush_r+0x7e>
 8004e6c:	1c42      	adds	r2, r0, #1
 8004e6e:	d101      	bne.n	8004e74 <__sflush_r+0x7c>
 8004e70:	682b      	ldr	r3, [r5, #0]
 8004e72:	b903      	cbnz	r3, 8004e76 <__sflush_r+0x7e>
 8004e74:	6560      	str	r0, [r4, #84]	; 0x54
 8004e76:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004e78:	602f      	str	r7, [r5, #0]
 8004e7a:	2900      	cmp	r1, #0
 8004e7c:	d0c9      	beq.n	8004e12 <__sflush_r+0x1a>
 8004e7e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004e82:	4299      	cmp	r1, r3
 8004e84:	d002      	beq.n	8004e8c <__sflush_r+0x94>
 8004e86:	4628      	mov	r0, r5
 8004e88:	f000 f8de 	bl	8005048 <_free_r>
 8004e8c:	2000      	movs	r0, #0
 8004e8e:	6360      	str	r0, [r4, #52]	; 0x34
 8004e90:	e7c0      	b.n	8004e14 <__sflush_r+0x1c>
 8004e92:	2301      	movs	r3, #1
 8004e94:	4628      	mov	r0, r5
 8004e96:	47b0      	blx	r6
 8004e98:	1c41      	adds	r1, r0, #1
 8004e9a:	d1c8      	bne.n	8004e2e <__sflush_r+0x36>
 8004e9c:	682b      	ldr	r3, [r5, #0]
 8004e9e:	2b00      	cmp	r3, #0
 8004ea0:	d0c5      	beq.n	8004e2e <__sflush_r+0x36>
 8004ea2:	2b1d      	cmp	r3, #29
 8004ea4:	d001      	beq.n	8004eaa <__sflush_r+0xb2>
 8004ea6:	2b16      	cmp	r3, #22
 8004ea8:	d101      	bne.n	8004eae <__sflush_r+0xb6>
 8004eaa:	602f      	str	r7, [r5, #0]
 8004eac:	e7b1      	b.n	8004e12 <__sflush_r+0x1a>
 8004eae:	89a3      	ldrh	r3, [r4, #12]
 8004eb0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004eb4:	81a3      	strh	r3, [r4, #12]
 8004eb6:	e7ad      	b.n	8004e14 <__sflush_r+0x1c>
 8004eb8:	690f      	ldr	r7, [r1, #16]
 8004eba:	2f00      	cmp	r7, #0
 8004ebc:	d0a9      	beq.n	8004e12 <__sflush_r+0x1a>
 8004ebe:	0793      	lsls	r3, r2, #30
 8004ec0:	680e      	ldr	r6, [r1, #0]
 8004ec2:	bf08      	it	eq
 8004ec4:	694b      	ldreq	r3, [r1, #20]
 8004ec6:	600f      	str	r7, [r1, #0]
 8004ec8:	bf18      	it	ne
 8004eca:	2300      	movne	r3, #0
 8004ecc:	eba6 0807 	sub.w	r8, r6, r7
 8004ed0:	608b      	str	r3, [r1, #8]
 8004ed2:	f1b8 0f00 	cmp.w	r8, #0
 8004ed6:	dd9c      	ble.n	8004e12 <__sflush_r+0x1a>
 8004ed8:	4643      	mov	r3, r8
 8004eda:	463a      	mov	r2, r7
 8004edc:	6a21      	ldr	r1, [r4, #32]
 8004ede:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8004ee0:	4628      	mov	r0, r5
 8004ee2:	47b0      	blx	r6
 8004ee4:	2800      	cmp	r0, #0
 8004ee6:	dc06      	bgt.n	8004ef6 <__sflush_r+0xfe>
 8004ee8:	89a3      	ldrh	r3, [r4, #12]
 8004eea:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004eee:	81a3      	strh	r3, [r4, #12]
 8004ef0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004ef4:	e78e      	b.n	8004e14 <__sflush_r+0x1c>
 8004ef6:	4407      	add	r7, r0
 8004ef8:	eba8 0800 	sub.w	r8, r8, r0
 8004efc:	e7e9      	b.n	8004ed2 <__sflush_r+0xda>
 8004efe:	bf00      	nop
 8004f00:	20400001 	.word	0x20400001

08004f04 <_fflush_r>:
 8004f04:	b538      	push	{r3, r4, r5, lr}
 8004f06:	690b      	ldr	r3, [r1, #16]
 8004f08:	4605      	mov	r5, r0
 8004f0a:	460c      	mov	r4, r1
 8004f0c:	b1db      	cbz	r3, 8004f46 <_fflush_r+0x42>
 8004f0e:	b118      	cbz	r0, 8004f18 <_fflush_r+0x14>
 8004f10:	6983      	ldr	r3, [r0, #24]
 8004f12:	b90b      	cbnz	r3, 8004f18 <_fflush_r+0x14>
 8004f14:	f7ff fa8e 	bl	8004434 <__sinit>
 8004f18:	4b0c      	ldr	r3, [pc, #48]	; (8004f4c <_fflush_r+0x48>)
 8004f1a:	429c      	cmp	r4, r3
 8004f1c:	d109      	bne.n	8004f32 <_fflush_r+0x2e>
 8004f1e:	686c      	ldr	r4, [r5, #4]
 8004f20:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004f24:	b17b      	cbz	r3, 8004f46 <_fflush_r+0x42>
 8004f26:	4621      	mov	r1, r4
 8004f28:	4628      	mov	r0, r5
 8004f2a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004f2e:	f7ff bf63 	b.w	8004df8 <__sflush_r>
 8004f32:	4b07      	ldr	r3, [pc, #28]	; (8004f50 <_fflush_r+0x4c>)
 8004f34:	429c      	cmp	r4, r3
 8004f36:	d101      	bne.n	8004f3c <_fflush_r+0x38>
 8004f38:	68ac      	ldr	r4, [r5, #8]
 8004f3a:	e7f1      	b.n	8004f20 <_fflush_r+0x1c>
 8004f3c:	4b05      	ldr	r3, [pc, #20]	; (8004f54 <_fflush_r+0x50>)
 8004f3e:	429c      	cmp	r4, r3
 8004f40:	bf08      	it	eq
 8004f42:	68ec      	ldreq	r4, [r5, #12]
 8004f44:	e7ec      	b.n	8004f20 <_fflush_r+0x1c>
 8004f46:	2000      	movs	r0, #0
 8004f48:	bd38      	pop	{r3, r4, r5, pc}
 8004f4a:	bf00      	nop
 8004f4c:	080051b4 	.word	0x080051b4
 8004f50:	080051d4 	.word	0x080051d4
 8004f54:	08005194 	.word	0x08005194

08004f58 <_lseek_r>:
 8004f58:	b538      	push	{r3, r4, r5, lr}
 8004f5a:	4c07      	ldr	r4, [pc, #28]	; (8004f78 <_lseek_r+0x20>)
 8004f5c:	4605      	mov	r5, r0
 8004f5e:	4608      	mov	r0, r1
 8004f60:	4611      	mov	r1, r2
 8004f62:	2200      	movs	r2, #0
 8004f64:	6022      	str	r2, [r4, #0]
 8004f66:	461a      	mov	r2, r3
 8004f68:	f7fb ff72 	bl	8000e50 <_lseek>
 8004f6c:	1c43      	adds	r3, r0, #1
 8004f6e:	d102      	bne.n	8004f76 <_lseek_r+0x1e>
 8004f70:	6823      	ldr	r3, [r4, #0]
 8004f72:	b103      	cbz	r3, 8004f76 <_lseek_r+0x1e>
 8004f74:	602b      	str	r3, [r5, #0]
 8004f76:	bd38      	pop	{r3, r4, r5, pc}
 8004f78:	20000240 	.word	0x20000240

08004f7c <__swhatbuf_r>:
 8004f7c:	b570      	push	{r4, r5, r6, lr}
 8004f7e:	460e      	mov	r6, r1
 8004f80:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004f84:	2900      	cmp	r1, #0
 8004f86:	b096      	sub	sp, #88	; 0x58
 8004f88:	4614      	mov	r4, r2
 8004f8a:	461d      	mov	r5, r3
 8004f8c:	da07      	bge.n	8004f9e <__swhatbuf_r+0x22>
 8004f8e:	2300      	movs	r3, #0
 8004f90:	602b      	str	r3, [r5, #0]
 8004f92:	89b3      	ldrh	r3, [r6, #12]
 8004f94:	061a      	lsls	r2, r3, #24
 8004f96:	d410      	bmi.n	8004fba <__swhatbuf_r+0x3e>
 8004f98:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004f9c:	e00e      	b.n	8004fbc <__swhatbuf_r+0x40>
 8004f9e:	466a      	mov	r2, sp
 8004fa0:	f000 f8b2 	bl	8005108 <_fstat_r>
 8004fa4:	2800      	cmp	r0, #0
 8004fa6:	dbf2      	blt.n	8004f8e <__swhatbuf_r+0x12>
 8004fa8:	9a01      	ldr	r2, [sp, #4]
 8004faa:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8004fae:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8004fb2:	425a      	negs	r2, r3
 8004fb4:	415a      	adcs	r2, r3
 8004fb6:	602a      	str	r2, [r5, #0]
 8004fb8:	e7ee      	b.n	8004f98 <__swhatbuf_r+0x1c>
 8004fba:	2340      	movs	r3, #64	; 0x40
 8004fbc:	2000      	movs	r0, #0
 8004fbe:	6023      	str	r3, [r4, #0]
 8004fc0:	b016      	add	sp, #88	; 0x58
 8004fc2:	bd70      	pop	{r4, r5, r6, pc}

08004fc4 <__smakebuf_r>:
 8004fc4:	898b      	ldrh	r3, [r1, #12]
 8004fc6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8004fc8:	079d      	lsls	r5, r3, #30
 8004fca:	4606      	mov	r6, r0
 8004fcc:	460c      	mov	r4, r1
 8004fce:	d507      	bpl.n	8004fe0 <__smakebuf_r+0x1c>
 8004fd0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8004fd4:	6023      	str	r3, [r4, #0]
 8004fd6:	6123      	str	r3, [r4, #16]
 8004fd8:	2301      	movs	r3, #1
 8004fda:	6163      	str	r3, [r4, #20]
 8004fdc:	b002      	add	sp, #8
 8004fde:	bd70      	pop	{r4, r5, r6, pc}
 8004fe0:	ab01      	add	r3, sp, #4
 8004fe2:	466a      	mov	r2, sp
 8004fe4:	f7ff ffca 	bl	8004f7c <__swhatbuf_r>
 8004fe8:	9900      	ldr	r1, [sp, #0]
 8004fea:	4605      	mov	r5, r0
 8004fec:	4630      	mov	r0, r6
 8004fee:	f7ff faab 	bl	8004548 <_malloc_r>
 8004ff2:	b948      	cbnz	r0, 8005008 <__smakebuf_r+0x44>
 8004ff4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004ff8:	059a      	lsls	r2, r3, #22
 8004ffa:	d4ef      	bmi.n	8004fdc <__smakebuf_r+0x18>
 8004ffc:	f023 0303 	bic.w	r3, r3, #3
 8005000:	f043 0302 	orr.w	r3, r3, #2
 8005004:	81a3      	strh	r3, [r4, #12]
 8005006:	e7e3      	b.n	8004fd0 <__smakebuf_r+0xc>
 8005008:	4b0d      	ldr	r3, [pc, #52]	; (8005040 <__smakebuf_r+0x7c>)
 800500a:	62b3      	str	r3, [r6, #40]	; 0x28
 800500c:	89a3      	ldrh	r3, [r4, #12]
 800500e:	6020      	str	r0, [r4, #0]
 8005010:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005014:	81a3      	strh	r3, [r4, #12]
 8005016:	9b00      	ldr	r3, [sp, #0]
 8005018:	6163      	str	r3, [r4, #20]
 800501a:	9b01      	ldr	r3, [sp, #4]
 800501c:	6120      	str	r0, [r4, #16]
 800501e:	b15b      	cbz	r3, 8005038 <__smakebuf_r+0x74>
 8005020:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005024:	4630      	mov	r0, r6
 8005026:	f000 f881 	bl	800512c <_isatty_r>
 800502a:	b128      	cbz	r0, 8005038 <__smakebuf_r+0x74>
 800502c:	89a3      	ldrh	r3, [r4, #12]
 800502e:	f023 0303 	bic.w	r3, r3, #3
 8005032:	f043 0301 	orr.w	r3, r3, #1
 8005036:	81a3      	strh	r3, [r4, #12]
 8005038:	89a3      	ldrh	r3, [r4, #12]
 800503a:	431d      	orrs	r5, r3
 800503c:	81a5      	strh	r5, [r4, #12]
 800503e:	e7cd      	b.n	8004fdc <__smakebuf_r+0x18>
 8005040:	080043fd 	.word	0x080043fd

08005044 <__malloc_lock>:
 8005044:	4770      	bx	lr

08005046 <__malloc_unlock>:
 8005046:	4770      	bx	lr

08005048 <_free_r>:
 8005048:	b538      	push	{r3, r4, r5, lr}
 800504a:	4605      	mov	r5, r0
 800504c:	2900      	cmp	r1, #0
 800504e:	d045      	beq.n	80050dc <_free_r+0x94>
 8005050:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005054:	1f0c      	subs	r4, r1, #4
 8005056:	2b00      	cmp	r3, #0
 8005058:	bfb8      	it	lt
 800505a:	18e4      	addlt	r4, r4, r3
 800505c:	f7ff fff2 	bl	8005044 <__malloc_lock>
 8005060:	4a1f      	ldr	r2, [pc, #124]	; (80050e0 <_free_r+0x98>)
 8005062:	6813      	ldr	r3, [r2, #0]
 8005064:	4610      	mov	r0, r2
 8005066:	b933      	cbnz	r3, 8005076 <_free_r+0x2e>
 8005068:	6063      	str	r3, [r4, #4]
 800506a:	6014      	str	r4, [r2, #0]
 800506c:	4628      	mov	r0, r5
 800506e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005072:	f7ff bfe8 	b.w	8005046 <__malloc_unlock>
 8005076:	42a3      	cmp	r3, r4
 8005078:	d90c      	bls.n	8005094 <_free_r+0x4c>
 800507a:	6821      	ldr	r1, [r4, #0]
 800507c:	1862      	adds	r2, r4, r1
 800507e:	4293      	cmp	r3, r2
 8005080:	bf04      	itt	eq
 8005082:	681a      	ldreq	r2, [r3, #0]
 8005084:	685b      	ldreq	r3, [r3, #4]
 8005086:	6063      	str	r3, [r4, #4]
 8005088:	bf04      	itt	eq
 800508a:	1852      	addeq	r2, r2, r1
 800508c:	6022      	streq	r2, [r4, #0]
 800508e:	6004      	str	r4, [r0, #0]
 8005090:	e7ec      	b.n	800506c <_free_r+0x24>
 8005092:	4613      	mov	r3, r2
 8005094:	685a      	ldr	r2, [r3, #4]
 8005096:	b10a      	cbz	r2, 800509c <_free_r+0x54>
 8005098:	42a2      	cmp	r2, r4
 800509a:	d9fa      	bls.n	8005092 <_free_r+0x4a>
 800509c:	6819      	ldr	r1, [r3, #0]
 800509e:	1858      	adds	r0, r3, r1
 80050a0:	42a0      	cmp	r0, r4
 80050a2:	d10b      	bne.n	80050bc <_free_r+0x74>
 80050a4:	6820      	ldr	r0, [r4, #0]
 80050a6:	4401      	add	r1, r0
 80050a8:	1858      	adds	r0, r3, r1
 80050aa:	4282      	cmp	r2, r0
 80050ac:	6019      	str	r1, [r3, #0]
 80050ae:	d1dd      	bne.n	800506c <_free_r+0x24>
 80050b0:	6810      	ldr	r0, [r2, #0]
 80050b2:	6852      	ldr	r2, [r2, #4]
 80050b4:	605a      	str	r2, [r3, #4]
 80050b6:	4401      	add	r1, r0
 80050b8:	6019      	str	r1, [r3, #0]
 80050ba:	e7d7      	b.n	800506c <_free_r+0x24>
 80050bc:	d902      	bls.n	80050c4 <_free_r+0x7c>
 80050be:	230c      	movs	r3, #12
 80050c0:	602b      	str	r3, [r5, #0]
 80050c2:	e7d3      	b.n	800506c <_free_r+0x24>
 80050c4:	6820      	ldr	r0, [r4, #0]
 80050c6:	1821      	adds	r1, r4, r0
 80050c8:	428a      	cmp	r2, r1
 80050ca:	bf04      	itt	eq
 80050cc:	6811      	ldreq	r1, [r2, #0]
 80050ce:	6852      	ldreq	r2, [r2, #4]
 80050d0:	6062      	str	r2, [r4, #4]
 80050d2:	bf04      	itt	eq
 80050d4:	1809      	addeq	r1, r1, r0
 80050d6:	6021      	streq	r1, [r4, #0]
 80050d8:	605c      	str	r4, [r3, #4]
 80050da:	e7c7      	b.n	800506c <_free_r+0x24>
 80050dc:	bd38      	pop	{r3, r4, r5, pc}
 80050de:	bf00      	nop
 80050e0:	20000090 	.word	0x20000090

080050e4 <_read_r>:
 80050e4:	b538      	push	{r3, r4, r5, lr}
 80050e6:	4c07      	ldr	r4, [pc, #28]	; (8005104 <_read_r+0x20>)
 80050e8:	4605      	mov	r5, r0
 80050ea:	4608      	mov	r0, r1
 80050ec:	4611      	mov	r1, r2
 80050ee:	2200      	movs	r2, #0
 80050f0:	6022      	str	r2, [r4, #0]
 80050f2:	461a      	mov	r2, r3
 80050f4:	f7fb fe4c 	bl	8000d90 <_read>
 80050f8:	1c43      	adds	r3, r0, #1
 80050fa:	d102      	bne.n	8005102 <_read_r+0x1e>
 80050fc:	6823      	ldr	r3, [r4, #0]
 80050fe:	b103      	cbz	r3, 8005102 <_read_r+0x1e>
 8005100:	602b      	str	r3, [r5, #0]
 8005102:	bd38      	pop	{r3, r4, r5, pc}
 8005104:	20000240 	.word	0x20000240

08005108 <_fstat_r>:
 8005108:	b538      	push	{r3, r4, r5, lr}
 800510a:	4c07      	ldr	r4, [pc, #28]	; (8005128 <_fstat_r+0x20>)
 800510c:	2300      	movs	r3, #0
 800510e:	4605      	mov	r5, r0
 8005110:	4608      	mov	r0, r1
 8005112:	4611      	mov	r1, r2
 8005114:	6023      	str	r3, [r4, #0]
 8005116:	f7fb fe80 	bl	8000e1a <_fstat>
 800511a:	1c43      	adds	r3, r0, #1
 800511c:	d102      	bne.n	8005124 <_fstat_r+0x1c>
 800511e:	6823      	ldr	r3, [r4, #0]
 8005120:	b103      	cbz	r3, 8005124 <_fstat_r+0x1c>
 8005122:	602b      	str	r3, [r5, #0]
 8005124:	bd38      	pop	{r3, r4, r5, pc}
 8005126:	bf00      	nop
 8005128:	20000240 	.word	0x20000240

0800512c <_isatty_r>:
 800512c:	b538      	push	{r3, r4, r5, lr}
 800512e:	4c06      	ldr	r4, [pc, #24]	; (8005148 <_isatty_r+0x1c>)
 8005130:	2300      	movs	r3, #0
 8005132:	4605      	mov	r5, r0
 8005134:	4608      	mov	r0, r1
 8005136:	6023      	str	r3, [r4, #0]
 8005138:	f7fb fe7f 	bl	8000e3a <_isatty>
 800513c:	1c43      	adds	r3, r0, #1
 800513e:	d102      	bne.n	8005146 <_isatty_r+0x1a>
 8005140:	6823      	ldr	r3, [r4, #0]
 8005142:	b103      	cbz	r3, 8005146 <_isatty_r+0x1a>
 8005144:	602b      	str	r3, [r5, #0]
 8005146:	bd38      	pop	{r3, r4, r5, pc}
 8005148:	20000240 	.word	0x20000240

0800514c <_init>:
 800514c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800514e:	bf00      	nop
 8005150:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005152:	bc08      	pop	{r3}
 8005154:	469e      	mov	lr, r3
 8005156:	4770      	bx	lr

08005158 <_fini>:
 8005158:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800515a:	bf00      	nop
 800515c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800515e:	bc08      	pop	{r3}
 8005160:	469e      	mov	lr, r3
 8005162:	4770      	bx	lr
